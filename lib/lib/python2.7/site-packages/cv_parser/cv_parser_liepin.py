#!/usr/bin/env python
# coding=utf-8

import sys,re,codecs
from bs4 import BeautifulSoup
from urllib2 import urlopen
from collections import OrderedDict
from base import CvTopParser
import os
reload(sys)
sys.setdefaultencoding('utf-8')


class CvParserLiepin(CvTopParser):
    """
    对猎聘的简历进行解析
    """
    def __init__(self):

        CvTopParser.__init__(self)

        self.PAY = re.compile(u"(\d+[\s\-])?\d+元")
        self.UPDATETIME = re.compile("更新日期[:：\s](\d+年\d+月\d+日)")
        self.ADDR = re.compile(u"现居住地[：:\s](\S+)")
        self.result = OrderedDict()

    def preprocess(self,htmlContent=None,fname=None,url=None):
        if url!=None:
            self.html= urlopen(url).read().decode('utf-8')
        elif htmlContent:
            self.html = htmlContent
        elif fname:
            self.html = codecs.open(fname,'rb','utf-8').read()
        else:
            raise Exception("input error")

        if re.search(u"已被(求职者)?删除|无法查看",self.html):
            raise Exception("error: input illegal cv ")

        self.soup = BeautifulSoup(self.html,"lxml")
        
        self.resume = self.soup.find("div","resume-main")
        self.basic_soup = self.resume.find("div","basic-main")
        self.field_list = self.resume.find_all("div","section-title")

        self.result.clear()
        self.result["cvFrom"] = "liepin"
        self.result["privateInfo"] = {}
        

    # 解析基本信息
    def regular_basic(self):

        res = OrderedDict()
        
        if self.resume.find("resume-info"):
            find_update_time = self.resume.find("resume-info").find("p",text=re.compile(u"最新登录|更新时"))
            if find_update_time:
                res["cvId"] = find_update_time.get_text().split(u'|')[0].strip()
                res["updateTime"] = find_update_time.get_text().split(u'|')[1].strip()
                
        tags = []
        rows = [ line for line in self.basic_soup.find("table").find_all("tr") if self.basic_soup.find("table") ]
        for row in rows:
            tags.extend(row.find_all("th"))

        for tag in tags:
            if re.search(u"姓名",tag.get_text()):
                self.result["privateInfo"]["userName"] = tag.find_next_sibling("td").get_text().strip()

            elif re.search(u"性别",tag.get_text()):
                res["gender"] = tag.find_next_sibling("td").get_text().strip()

            elif re.search(u"手机号",tag.get_text()):
                self.result["privateInfo"]["phoneNumber"] = tag.find_next_sibling("td").get_text().strip()
            
            elif re.search(u"年龄",tag.get_text()):
                res["age"] = tag.find_next_sibling("td").get_text().strip()

            elif re.search(u"电子邮件",tag.get_text()):
                self.result["privateInfo"]["email"] = tag.find_next_sibling("td").get_text().strip()

            elif re.search(u"教育程度",tag.get_text()):
                res["nowDiploma"] = tag.find_next_sibling("td").get_text().strip()

            elif re.search(u"工作年限",tag.get_text()):
                res["nowWorkAge"] = tag.find_next_sibling("td").get_text().strip()

            elif re.search(u"婚姻",tag.get_text()):
                res["marriage"] = tag.find_next_sibling("td").get_text()
            
            elif re.search(u"职业状态",tag.get_text()):
                res["workStatus"] = tag.find_next_sibling("td").get_text()

            elif re.search(u"所在地",tag.get_text()):
                res["nowAddress"] = tag.find_next_sibling("td").get_text().strip()
            
            elif re.search(u"国籍",tag.get_text()):
                res["country"] = tag.find_next_sibling("td").get_text().strip()
            
            elif re.search(u"户口",tag.get_text()):
                res["nowHukou"] = tag.find_next_sibling("td").get_text().strip()

            elif re.search(u"政治面貌",tag.get_text()):
                res["nowPolistatus"] = tag.find_next_sibling("td").get_text().strip()

        # 目前职业情况
        find_status = self.basic_soup.find_next("h4",text=re.compile(u"目前职业"))
        if find_status and find_status.find_next("table"):
            tags = []
            rows = find_status.find_next("table").find_all("tr")
            for row in rows:
                tags.extend(row.find_all("th"))

            for tag in tags:
                if re.search(u"所在行业",tag.get_text()):
                    res["nowIndustry"] = re.sub("\s","",tag.find_next_sibling("td").get_text().strip())
                elif re.search(u"公司名称",tag.get_text()):
                    res["nowInc"] = tag.find_next_sibling("td").get_text().strip()
                elif re.search(u"所任职位",tag.get_text()):
                    res["nowPosition"] = tag.find_next_sibling("td").get_text().strip()
                elif re.search(u"目前年薪",tag.get_text()):
                    res["nowSalary"] = tag.find_next_sibling("td").get_text().strip()

        self.result['baseInfo'] =  res



    # 求职意向
    def regular_expect(self):

        res = OrderedDict()
        
        find_work_exp = self.basic_soup.find_next("h4",text=re.compile(u"职业发展意向"))
        if find_work_exp and find_work_exp.find_next("table"):
            tags = [ line.find("th") for line in find_work_exp.find_next("table").find_all("tr")]

            for tag in tags:
                if re.search(u"期望行业",tag.get_text()):
                    res["expIndustrys"] = re.sub("\s","",tag.find_next_sibling("td").get_text().strip())

                elif re.search(u"期望职位",tag.get_text()):
                    res["expPositions"] = tag.find_next_sibling("td").get_text().strip()

                elif re.search(u"期望地点",tag.get_text()):
                    res["expLocations"] = tag.find_next_sibling("td").get_text().strip()

                elif re.search(u"期望年薪",tag.get_text()):
                    res["expSalary"] = tag.find_next_sibling("td").get_text().strip()

        self.result['jobExp'] =  res





    # 教育经历
    def regular_educate(self):

        edusoup = ""
        for field in self.field_list:
            if re.search(u"教育经历",field.find("h2").get_text()):
                edusoup = field.find_next("div","section-content")
                break
        res = []
        id = 1
        if edusoup:
            items = edusoup.find_all("table","field")
            for item in items:
                rows = item.find_all("tr")
                for row in rows:
                    tokens = row.find_all("td")
                    tmp = {}
                    if len(tokens)>2:
                        tmp["itemId"] = str(id)
                        tmp["eduStart"] = self.clean_edu_time(tokens[0].get_text().split(u'–')[0])
                        tmp["eduEnd"] =  self.clean_edu_time(tokens[0].get_text().split(u'–')[-1])
                        tmp["schName"] = tokens[0].find("strong").get_text().strip()
                        tmp["majorName"] = tokens[1].find("span").get_text().strip()
                        tmp["eduDiploma"] = tokens[2].find("span","filter-zone").get_text().strip()
                        if res and tmp["eduStart"] == res[-1]["eduStart"] and tmp["eduDiploma"] == res[-1]["eduDiploma"]:
                            continue
                        res.append(tmp)
                        id += 1
        if res:
            # 基本信息中的最高学历学校，专业
            self.result["baseInfo"]["recentSchName"] = res[0]["schName"]
            self.result["baseInfo"]["recentMajorName"] = res[0]["majorName"]
        self.result['eduList'] = res




    #　工作经历
    def regular_workexp(self):
        
        worksoup = ""
        for field in self.field_list:
            if re.search(u"工作经历",field.find("h2").get_text()):
                worksoup = field
                break

        res = []
        if worksoup:

            items = worksoup.find_next_siblings("div","section-content")
            id = 1
            for item in items:
                tmp = OrderedDict()
                if item.find("div","list-title"):
                    tokens = [ token.get_text() for token in item.find("div","list-title").find_all("span")]

                    tmp["itemId"] = str(id)
                    tmp["jobStart"] = self.clean_edu_time(tokens[0].split(u"-")[0])
                    tmp["jobEnd"] = self.clean_edu_time(tokens[0].split(u"-")[1])
                    tmp["incName"] = tokens[1].strip()
                    tmp["jobDuration"] = tokens[2].strip()[1:-1]
                    
                if item.find("div","list-content"):
                    tags = item.find("div","list-content").find_all("tr")
                    
                    for tag in tags:
                        if re.search(u"公司行业",tag.get_text()):
                            inc_tokens = re.sub("\s","",tag.get_text()).split(u"|")
                            for token in inc_tokens:
                                if re.search(u"公司行业",token):
                                    tmp["incIndustrys"] = token.split(u"：")[-1].strip()
                                elif re.search(u"公司规模",token):
                                    tmp["incEmployee"] = token.split(u"：")[-1].strip()
                                elif re.search(u"公司性质",token):
                                    tmp["incType"] = token.split(u"：")[-1].strip()
                                
                            if re.search(u"公司描述",tag.find_next("span","filter-zone").get_text()):
                                tmp["incDesc"] = tag.find_next("span","filter").get_text().strip()

                        elif re.search(u"所在地区",tag.get_text()):
                            find_jobname = tag.find_previous("span","filter-zone")
                            if find_jobname:
                                tmp["jobPosition"] = find_jobname.get_text().strip()

                            tmp["incLocation"] = tag.find("td").get_text().strip()

                        elif re.search(u"所在部门",tag.get_text()):
                            tmp["jobDepartment"] = tag.find("td").get_text().strip()
                        elif re.search(u"汇报对象",tag.get_text()):
                            tmp["jobReport"] = tag.find("td").get_text().strip()
                        elif re.search(u"下属人数",tag.get_text()):
                            tmp["jobSubTeamSize"] = tag.find("td").get_text().strip()
                        elif re.search(u"工作职责",tag.get_text()):
                            tmp["jobDesc"] = tag.find("td").get_text().strip()
                        elif re.search(u"工作业绩",tag.get_text()):
                            tmp["jobAchievement"] = tag.find("td").get_text().strip()
                if res and "jobDesc" in res[-1] and tmp["jobStart"]==res[-1]["jobStart"] and tmp["jobDesc"]==res[-1]["jobDesc"]:
                    continue

                id += 1
                res.append(tmp)
       
        self.result['jobList'] = res


    def regular_language(self):

        langsoup = ""
        for field in self.field_list:
            if re.search(u"语言能力",field.find(u"h2").get_text()):
                langsoup = field.find_next("div","section-content")
                break

        res = []
        id = 1
        if langsoup:
            items = langsoup.find("table","field").find_all("tr")
            for item in items:
                tmp = {}
                tmp["itemId"] = str(id)
                tmp["languageName"] = re.sub("\s","",item.get_text())
                res.append(tmp)
                id += 1
        
        self.result["languageList"] = res


    #　证书
    def regular_cert(self):
        

        certsoup =""
        for field in self.field_list:
            if re.search(u"证书",field.find("h2").get_text()):
                certsoup = field.find_next("div","section-content")
                break

        res = []
        id = 1
        if certsoup:
            items = certsoup.find("table","field").find_all("tr")
            for item in items:
                tokens = item.get_text().split()

                if len(tokens)<2:continue
                tmp={}
                tmp["itemId"] = str(id)
                tmp["certTime"] = tokens[0].strip()
                tmp["certName"] = tokens[1].strip()
                
                if item.find_next_sibling("div","resume-preview-dl"):
                    cert_str = item.find_next_sibling("div").find_all("td")[-1].get_text()
                else:
                    cert_str = tokens[1]

                find_level = self.CERT_LEVEL.search(cert_str)
                tmp["certLevel"] = find_level.group() if find_level else "None"

                res.append(tmp)
                id += 1

        self.result["certList"] = res
   
    
    # 技能
    def regular_skill(self):
        """
        技能模块
        """

        skillsoup = ""
        for field in self.field_list:
            if re.search(u"技能",field.find("h2").get_text()):
                skillsoup = field.find_next("div","section-content")
                break
        res = []
        id =1
        if skillsoup:

            items = skillsoup.find("bable","field").find_all("tr")

            for item in items:
                tokens = [token for token in re.split(u"[:：| ]",item) if len(token.strip())>1]
                if len(tokens)<2:continue
                tmp = {}
                tmp["itemId"] = str(id)
                tmp["skillName"] = tokens[0].strip()
                tmp["skillLevel"] = tokens[1].strip()
                find_duration = re.search("\d+月|[半一二三四五六七八九十\d]年",item)
                tmp["skillDuration"] = find_duration.group() if find_duration else "None"
                res.append(tmp)
                id += 1

        self.result['skillList'] = res

     
    #　项目经验
    def regular_project(self):

        prosoup = ""
        for field in self.field_list:
            if re.search(u"项目经历",field.find("h2").get_text()):
                prosoup = field
                break
        
        res = []
        id = 1
        if prosoup:
            items = prosoup.find_next_siblings("div","section-content")
            id = 1
            for item in items:
                tmp = OrderedDict()
                find_content = item.find("div","list-title")
                if find_content:
                    tokens = [ token.get_text() for token in item.find("div","list-title").find_all("span") if token]
                    if len(tokens)>1:
                        tmp["itemId"] = str(id)
                        tmp["proStart"] = self.clean_edu_time(tokens[0].split(u"–")[0])
                        tmp["proEnd"] = self.clean_edu_time(tokens[0].split(u"–")[1])
                        tmp["proName"] = tokens[1].strip()
                    
                    
                    if item.find("div","list-content"):
                        tags = item.find("div","list-content").find_all("tr")

                        for tag in tags:
                            if re.search(u"项目职务",tag.find("th").get_text()):
                                tmp["proDuty"] = tag.find("td").get_text()
                            if re.search(u"项目简介",tag.find("th").get_text()):
                                tmp["proDesc"] = tag.find("td").get_text()
                            if re.search(u"项目业绩",tag.find("th").get_text()):
                                tmp["proAchievement"] = tag.find("td").get_text()
                            if re.search(u"所在公司",tag.find("th").get_text()):
                                tmp["proIncName"] = tag.find("td").get_text()
                    res.append(tmp)
                    id += 1

        self.result['proList'] = res





    def regular_train(self):
        

        trainsoup = ""
        for field in self.field_list:
            if re.search(u"培训经历",field.find("h2").get_text()):
                trainsoup = field
                break

        res = []
        id = 1
        if trainsoup:
            items = trainsoup.find_all("div","section-content")
            for item in items:
                
                tokens = [ token for token in item.get_text().split() if len(token.strip())>1 ]
                if len(tokens)<3:continue

                tmp = {}
                tmp["itemId"] = str(id)
                tmp["trainStart"] = tokens[0]
                tmp["trainEnd"] = tokens[1]
                tmp["trainTitle"] = "".join(tokens[2:])

                field_list = item.find_next("table").find_all("td")
                for field in field_list:
                    find_agency = re.search(u"培训机构：",field.get_text())
                    find_location = re.search(u"培训地点",field.get_text())
                    find_desc = re.search(u"培训描述",field.get_text())
                    find_content = re.search(u"培训内容",field.get_text())
                    find_cert = re.search(u"所获证书",field.get_text())

                    if find_agency:
                        tmp["trainAgency"] = field.find_next_sibling("td").get_text() if field.find_next_sibling("td") else "None"

                    elif find_location:
                        tmp["trainLoc"] = field.find_next_sibling("td").get_text() if field.find_next_sibling("td") else "None"

                    elif find_desc:
                        tmp["trainDesc"] = field.find_next_sibling("td").get_text() if field.find_next_sibling("td") else "None"
                    
                    elif find_cert:
                        tmp["trainCert"] = field.find_next_sibling("td").get_text() if field.find_next_sibling("td") else "None"
                    
                    elif find_content:
                        tmp["trainContent"] = field.find_next_sibling("td").get_text() if field.find_next_sibling("td") else "None"

                res.append(tmp)
                id += 1

        self.result["trainList"] = res

    
    def regular_private(self):
        """
        身份证号，联系电话等隐私信息
        """
        
        base_info = self.basic_soup.get_text().strip()
        
        find_phone = self.PHONE.search(base_info)
        find_email = self.EMAIL.search(base_info)
        find_qq = self.QQ.search(base_info)
        find_idNum = self.IDNUM.search(base_info)
        
        res = OrderedDict()
        res["phoneNumber"] = find_phone.group(1) if find_phone else "None"
        res["email"] = find_email.group(1) if find_email else "None"
        res["qq"] = find_qq.group(1) if find_qq else "None"
        res["idNumber"] = find_idNum.group(1) if find_idNum else "None"

        self.result["privateInfo"].update(res)



    def regular_other(self):
       
        res = {}

        for field in self.field_list:
            key = field.find("h2").get_text().strip()
            if re.search(u"自我评价|个人简介|自我介绍",key):
                res["selfIntro"] = field.find_next("div").get_text().strip()

            elif re.search(u"校内|校园|社团",key):
                res["schoolExp"] = self.CLEAN_TEXT.sub(" ",field.find_next("div").get_text().strip())
            
            elif re.search(u"实践|实习",key):
                res["stuPractice"] = re.sub("\s+"," ",field.find_next("div").get_text().strip())

            elif re.search(u"论文|著作|作品|奖项|荣誉",key):
                res["pubWork"] = re.sub("\s+"," ",field.find_next("div").get_text().strip())
            
            elif re.search(u"兴趣|爱好|特长",key):
                res["otherHobby"] = field.find_next("div").get_text().strip()
            
            elif re.search(u"附加信息|其他",key):
                res["otherInfo"] = field.find_next("div").get_text().strip()

        top_soup = self.soup.find("body").find("div","resume-preview-title")
        if top_soup:
            find_job_name = re.search(u"应聘职位：.{1,30}<strong>(.+?)</strong>",str(top_soup).decode("utf-8"),re.S)
            find_job_inc = re.search(u"应聘机构：.{1,30}<strong>(.+?)</strong>",str(top_soup).decode("utf-8"),re.S)

            if find_job_name:
                res["jobPositionFor"] = find_job_name.group(1) 
            if find_job_inc:
                res["jobIncNameFor"] = find_job_inc.group(1)

        self.result["others"] = res


    def parser(self,htmlContent=None,fname=None,url=None):
        self.preprocess(htmlContent,fname,url)
        self.regular_basic()
#        self.regular_private()
        self.regular_expect()
        self.regular_educate()
        self.regular_workexp()
        self.regular_skill()
        self.regular_cert()
        self.regular_language()
        self.regular_project()
        self.regular_train()
        self.regular_other()
        return self.result


    
    def output(self):
        res = "\n"
        for k in self.result:
            res += k+":"+"\n"
            if isinstance(self.result[k],dict):
                for kk,vv in self.result[k].iteritems():
                    res += '%1s: %s\n' %( kk,vv )
            elif isinstance(self.result[k],list):
                for i,exp in enumerate(self.result[k]):
                    res+= "%12s\n" % (str(i+1))
                    if isinstance(exp,dict):
                        for kk,vv in exp.iteritems():
                            res += "%22s: %s\n" % (kk,vv)
                    elif isinstance(exp,tuple):
                        for kk in exp:
                            res += '%22s \n'% (kk)
                    res += " "*10+'---'*10+'\n'
            else:
                res += " "*10+"%s\n" % (self.result[k])
        return res




import simplejson as json
from multiprocessing import Pool


if __name__ == "__main__":
    """
    测试
    """
    test = CvParserLiepin()
    path = './test_cvs/cv_liepin/'
    fnames = [ path+fname for fname in os.listdir(path)]
    cnt = 1


    def parse_single(fname):
        global cnt
        htmlContent = codecs.open(fname,"rb","utf-8").read()
        print cnt,"=="*20,fname
        result = test.parser(htmlContent)
        cnt += 1
        print json.dumps(result,ensure_ascii=False,indent=4)
        print ''
        return result

    pool = Pool(10)
    res = pool.map(parse_single,fnames)

