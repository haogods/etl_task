# -*- coding:utf8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ipin.rpc.common.ttypes
import ipin.rpc.edu.commontype.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ProvinceToudangScore(object):
  """
  省份投档线记录

  Attributes:
   - year
   - provinceId
   - eduTypeWenli
   - batch
   - score
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'year', None, None, ), # 1
    (2, TType.STRING, 'provinceId', None, None, ), # 2
    (3, TType.I32, 'eduTypeWenli', None, None, ), # 3
    (4, TType.I32, 'batch', None, None, ), # 4
    (5, TType.I16, 'score', None, None, ), # 5
  )

  def __init__(self, year=None, provinceId=None, eduTypeWenli=None, batch=None, score=None,):
    self.year = year
    self.provinceId = provinceId
    self.eduTypeWenli = eduTypeWenli
    self.batch = batch
    self.score = score

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.year = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.provinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.eduTypeWenli = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.batch = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.score = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProvinceToudangScore')
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.I16, 1)
      oprot.writeI16(self.year)
      oprot.writeFieldEnd()
    if self.provinceId is not None:
      oprot.writeFieldBegin('provinceId', TType.STRING, 2)
      oprot.writeString(self.provinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.eduTypeWenli is not None:
      oprot.writeFieldBegin('eduTypeWenli', TType.I32, 3)
      oprot.writeI32(self.eduTypeWenli)
      oprot.writeFieldEnd()
    if self.batch is not None:
      oprot.writeFieldBegin('batch', TType.I32, 4)
      oprot.writeI32(self.batch)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.I16, 5)
      oprot.writeI16(self.score)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.year)
    value = (value * 31) ^ hash(self.provinceId)
    value = (value * 31) ^ hash(self.eduTypeWenli)
    value = (value * 31) ^ hash(self.batch)
    value = (value * 31) ^ hash(self.score)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProvinceGaokaoStat(object):
  """
  基于考生省份的统计信息

  Attributes:
   - provinceId
   - eduTypeWenli
   - year
   - score
   - peopleCount
   - scoreRank
   - destSchCountMap
   - destMajorCountMap
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'provinceId', None, None, ), # 1
    (2, TType.I32, 'eduTypeWenli', None, None, ), # 2
    (3, TType.I16, 'year', None, None, ), # 3
    (4, TType.I16, 'score', None, None, ), # 4
    (5, TType.I32, 'peopleCount', None, None, ), # 5
    (6, TType.I32, 'scoreRank', None, None, ), # 6
    (7, TType.MAP, 'destSchCountMap', (TType.STRING,None,TType.I32,None), None, ), # 7
    (8, TType.MAP, 'destMajorCountMap', (TType.STRING,None,TType.I32,None), None, ), # 8
  )

  def __init__(self, provinceId=None, eduTypeWenli=None, year=None, score=None, peopleCount=None, scoreRank=None, destSchCountMap=None, destMajorCountMap=None,):
    self.provinceId = provinceId
    self.eduTypeWenli = eduTypeWenli
    self.year = year
    self.score = score
    self.peopleCount = peopleCount
    self.scoreRank = scoreRank
    self.destSchCountMap = destSchCountMap
    self.destMajorCountMap = destMajorCountMap

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.provinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.eduTypeWenli = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.year = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.score = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.peopleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.scoreRank = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.destSchCountMap = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString().decode('utf-8')
            _val6 = iprot.readI32();
            self.destSchCountMap[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.destMajorCountMap = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin()
          for _i11 in xrange(_size7):
            _key12 = iprot.readString().decode('utf-8')
            _val13 = iprot.readI32();
            self.destMajorCountMap[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProvinceGaokaoStat')
    if self.provinceId is not None:
      oprot.writeFieldBegin('provinceId', TType.STRING, 1)
      oprot.writeString(self.provinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.eduTypeWenli is not None:
      oprot.writeFieldBegin('eduTypeWenli', TType.I32, 2)
      oprot.writeI32(self.eduTypeWenli)
      oprot.writeFieldEnd()
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.I16, 3)
      oprot.writeI16(self.year)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.I16, 4)
      oprot.writeI16(self.score)
      oprot.writeFieldEnd()
    if self.peopleCount is not None:
      oprot.writeFieldBegin('peopleCount', TType.I32, 5)
      oprot.writeI32(self.peopleCount)
      oprot.writeFieldEnd()
    if self.scoreRank is not None:
      oprot.writeFieldBegin('scoreRank', TType.I32, 6)
      oprot.writeI32(self.scoreRank)
      oprot.writeFieldEnd()
    if self.destSchCountMap is not None:
      oprot.writeFieldBegin('destSchCountMap', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.destSchCountMap))
      for kiter14,viter15 in self.destSchCountMap.items():
        oprot.writeString(kiter14.encode('utf-8'))
        oprot.writeI32(viter15)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.destMajorCountMap is not None:
      oprot.writeFieldBegin('destMajorCountMap', TType.MAP, 8)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.destMajorCountMap))
      for kiter16,viter17 in self.destMajorCountMap.items():
        oprot.writeString(kiter16.encode('utf-8'))
        oprot.writeI32(viter17)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.provinceId)
    value = (value * 31) ^ hash(self.eduTypeWenli)
    value = (value * 31) ^ hash(self.year)
    value = (value * 31) ^ hash(self.score)
    value = (value * 31) ^ hash(self.peopleCount)
    value = (value * 31) ^ hash(self.scoreRank)
    value = (value * 31) ^ hash(self.destSchCountMap)
    value = (value * 31) ^ hash(self.destMajorCountMap)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GaokaoPeopleCount(object):
  """
  Attributes:
   - provinceId
   - eduTypeWenli
   - year
   - peopleCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'provinceId', None, None, ), # 1
    (2, TType.I32, 'eduTypeWenli', None, None, ), # 2
    (3, TType.I16, 'year', None, None, ), # 3
    (4, TType.I32, 'peopleCount', None, None, ), # 4
  )

  def __init__(self, provinceId=None, eduTypeWenli=None, year=None, peopleCount=None,):
    self.provinceId = provinceId
    self.eduTypeWenli = eduTypeWenli
    self.year = year
    self.peopleCount = peopleCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.provinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.eduTypeWenli = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.year = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.peopleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GaokaoPeopleCount')
    if self.provinceId is not None:
      oprot.writeFieldBegin('provinceId', TType.STRING, 1)
      oprot.writeString(self.provinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.eduTypeWenli is not None:
      oprot.writeFieldBegin('eduTypeWenli', TType.I32, 2)
      oprot.writeI32(self.eduTypeWenli)
      oprot.writeFieldEnd()
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.I16, 3)
      oprot.writeI16(self.year)
      oprot.writeFieldEnd()
    if self.peopleCount is not None:
      oprot.writeFieldBegin('peopleCount', TType.I32, 4)
      oprot.writeI32(self.peopleCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.provinceId)
    value = (value * 31) ^ hash(self.eduTypeWenli)
    value = (value * 31) ^ hash(self.year)
    value = (value * 31) ^ hash(self.peopleCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SchScoreStat(object):
  """
  Attributes:
   - schId
   - eduTypeWenli
   - year
   - batch
   - fromProvinceId
   - minScore
   - maxScore
   - avgScore
   - peopleCount
   - chongBeginScore
   - wenBeginScore
   - baoBeginScore
   - highRank
   - mediumRank
   - safeRank
   - lastRank
   - scoreMap
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'schId', None, None, ), # 1
    (2, TType.I32, 'eduTypeWenli', None, None, ), # 2
    (3, TType.I16, 'year', None, None, ), # 3
    (4, TType.I32, 'batch', None, None, ), # 4
    (5, TType.STRING, 'fromProvinceId', None, None, ), # 5
    (6, TType.I16, 'minScore', None, None, ), # 6
    (7, TType.I16, 'maxScore', None, None, ), # 7
    (8, TType.I16, 'avgScore', None, None, ), # 8
    (9, TType.I32, 'peopleCount', None, None, ), # 9
    (10, TType.I16, 'chongBeginScore', None, None, ), # 10
    (11, TType.I16, 'wenBeginScore', None, None, ), # 11
    (12, TType.I16, 'baoBeginScore', None, None, ), # 12
    (13, TType.I32, 'highRank', None, None, ), # 13
    (14, TType.I32, 'mediumRank', None, None, ), # 14
    (15, TType.I32, 'safeRank', None, None, ), # 15
    (16, TType.I32, 'lastRank', None, None, ), # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.MAP, 'scoreMap', (TType.I16,None,TType.I32,None), None, ), # 20
  )

  def __init__(self, schId=None, eduTypeWenli=None, year=None, batch=None, fromProvinceId=None, minScore=None, maxScore=None, avgScore=None, peopleCount=None, chongBeginScore=None, wenBeginScore=None, baoBeginScore=None, highRank=None, mediumRank=None, safeRank=None, lastRank=None, scoreMap=None,):
    self.schId = schId
    self.eduTypeWenli = eduTypeWenli
    self.year = year
    self.batch = batch
    self.fromProvinceId = fromProvinceId
    self.minScore = minScore
    self.maxScore = maxScore
    self.avgScore = avgScore
    self.peopleCount = peopleCount
    self.chongBeginScore = chongBeginScore
    self.wenBeginScore = wenBeginScore
    self.baoBeginScore = baoBeginScore
    self.highRank = highRank
    self.mediumRank = mediumRank
    self.safeRank = safeRank
    self.lastRank = lastRank
    self.scoreMap = scoreMap

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.eduTypeWenli = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.year = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.batch = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.fromProvinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.minScore = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.maxScore = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.avgScore = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.peopleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I16:
          self.chongBeginScore = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.wenBeginScore = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I16:
          self.baoBeginScore = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.highRank = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.mediumRank = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.safeRank = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.lastRank = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.MAP:
          self.scoreMap = {}
          (_ktype19, _vtype20, _size18 ) = iprot.readMapBegin()
          for _i22 in xrange(_size18):
            _key23 = iprot.readI16();
            _val24 = iprot.readI32();
            self.scoreMap[_key23] = _val24
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SchScoreStat')
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 1)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.eduTypeWenli is not None:
      oprot.writeFieldBegin('eduTypeWenli', TType.I32, 2)
      oprot.writeI32(self.eduTypeWenli)
      oprot.writeFieldEnd()
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.I16, 3)
      oprot.writeI16(self.year)
      oprot.writeFieldEnd()
    if self.batch is not None:
      oprot.writeFieldBegin('batch', TType.I32, 4)
      oprot.writeI32(self.batch)
      oprot.writeFieldEnd()
    if self.fromProvinceId is not None:
      oprot.writeFieldBegin('fromProvinceId', TType.STRING, 5)
      oprot.writeString(self.fromProvinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.minScore is not None:
      oprot.writeFieldBegin('minScore', TType.I16, 6)
      oprot.writeI16(self.minScore)
      oprot.writeFieldEnd()
    if self.maxScore is not None:
      oprot.writeFieldBegin('maxScore', TType.I16, 7)
      oprot.writeI16(self.maxScore)
      oprot.writeFieldEnd()
    if self.avgScore is not None:
      oprot.writeFieldBegin('avgScore', TType.I16, 8)
      oprot.writeI16(self.avgScore)
      oprot.writeFieldEnd()
    if self.peopleCount is not None:
      oprot.writeFieldBegin('peopleCount', TType.I32, 9)
      oprot.writeI32(self.peopleCount)
      oprot.writeFieldEnd()
    if self.chongBeginScore is not None:
      oprot.writeFieldBegin('chongBeginScore', TType.I16, 10)
      oprot.writeI16(self.chongBeginScore)
      oprot.writeFieldEnd()
    if self.wenBeginScore is not None:
      oprot.writeFieldBegin('wenBeginScore', TType.I16, 11)
      oprot.writeI16(self.wenBeginScore)
      oprot.writeFieldEnd()
    if self.baoBeginScore is not None:
      oprot.writeFieldBegin('baoBeginScore', TType.I16, 12)
      oprot.writeI16(self.baoBeginScore)
      oprot.writeFieldEnd()
    if self.highRank is not None:
      oprot.writeFieldBegin('highRank', TType.I32, 13)
      oprot.writeI32(self.highRank)
      oprot.writeFieldEnd()
    if self.mediumRank is not None:
      oprot.writeFieldBegin('mediumRank', TType.I32, 14)
      oprot.writeI32(self.mediumRank)
      oprot.writeFieldEnd()
    if self.safeRank is not None:
      oprot.writeFieldBegin('safeRank', TType.I32, 15)
      oprot.writeI32(self.safeRank)
      oprot.writeFieldEnd()
    if self.lastRank is not None:
      oprot.writeFieldBegin('lastRank', TType.I32, 16)
      oprot.writeI32(self.lastRank)
      oprot.writeFieldEnd()
    if self.scoreMap is not None:
      oprot.writeFieldBegin('scoreMap', TType.MAP, 20)
      oprot.writeMapBegin(TType.I16, TType.I32, len(self.scoreMap))
      for kiter25,viter26 in self.scoreMap.items():
        oprot.writeI16(kiter25)
        oprot.writeI32(viter26)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.eduTypeWenli)
    value = (value * 31) ^ hash(self.year)
    value = (value * 31) ^ hash(self.batch)
    value = (value * 31) ^ hash(self.fromProvinceId)
    value = (value * 31) ^ hash(self.minScore)
    value = (value * 31) ^ hash(self.maxScore)
    value = (value * 31) ^ hash(self.avgScore)
    value = (value * 31) ^ hash(self.peopleCount)
    value = (value * 31) ^ hash(self.chongBeginScore)
    value = (value * 31) ^ hash(self.wenBeginScore)
    value = (value * 31) ^ hash(self.baoBeginScore)
    value = (value * 31) ^ hash(self.highRank)
    value = (value * 31) ^ hash(self.mediumRank)
    value = (value * 31) ^ hash(self.safeRank)
    value = (value * 31) ^ hash(self.lastRank)
    value = (value * 31) ^ hash(self.scoreMap)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SchStat(object):
  """
  Attributes:
   - fromProvinceId
   - eduTypeWenli
   - batch
   - schId
   - highRankMap
   - mediumRankMap
   - safeRankMap
   - lastRankMap
   - avgHighRank
   - avgMediumRank
   - avgSafeRank
   - avgLastRank
   - sizeRange
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fromProvinceId', None, None, ), # 1
    (2, TType.I32, 'eduTypeWenli', None, None, ), # 2
    (3, TType.I32, 'batch', None, None, ), # 3
    (4, TType.STRING, 'schId', None, None, ), # 4
    (5, TType.MAP, 'highRankMap', (TType.I16,None,TType.I32,None), None, ), # 5
    (6, TType.MAP, 'mediumRankMap', (TType.I16,None,TType.I32,None), None, ), # 6
    (7, TType.MAP, 'safeRankMap', (TType.I16,None,TType.I32,None), None, ), # 7
    (8, TType.MAP, 'lastRankMap', (TType.I16,None,TType.I32,None), None, ), # 8
    (9, TType.I32, 'avgHighRank', None, None, ), # 9
    (10, TType.I32, 'avgMediumRank', None, None, ), # 10
    (11, TType.I32, 'avgSafeRank', None, None, ), # 11
    (12, TType.I32, 'avgLastRank', None, None, ), # 12
    (13, TType.STRING, 'sizeRange', None, None, ), # 13
  )

  def __init__(self, fromProvinceId=None, eduTypeWenli=None, batch=None, schId=None, highRankMap=None, mediumRankMap=None, safeRankMap=None, lastRankMap=None, avgHighRank=None, avgMediumRank=None, avgSafeRank=None, avgLastRank=None, sizeRange=None,):
    self.fromProvinceId = fromProvinceId
    self.eduTypeWenli = eduTypeWenli
    self.batch = batch
    self.schId = schId
    self.highRankMap = highRankMap
    self.mediumRankMap = mediumRankMap
    self.safeRankMap = safeRankMap
    self.lastRankMap = lastRankMap
    self.avgHighRank = avgHighRank
    self.avgMediumRank = avgMediumRank
    self.avgSafeRank = avgSafeRank
    self.avgLastRank = avgLastRank
    self.sizeRange = sizeRange

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fromProvinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.eduTypeWenli = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.batch = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.highRankMap = {}
          (_ktype28, _vtype29, _size27 ) = iprot.readMapBegin()
          for _i31 in xrange(_size27):
            _key32 = iprot.readI16();
            _val33 = iprot.readI32();
            self.highRankMap[_key32] = _val33
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.mediumRankMap = {}
          (_ktype35, _vtype36, _size34 ) = iprot.readMapBegin()
          for _i38 in xrange(_size34):
            _key39 = iprot.readI16();
            _val40 = iprot.readI32();
            self.mediumRankMap[_key39] = _val40
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.safeRankMap = {}
          (_ktype42, _vtype43, _size41 ) = iprot.readMapBegin()
          for _i45 in xrange(_size41):
            _key46 = iprot.readI16();
            _val47 = iprot.readI32();
            self.safeRankMap[_key46] = _val47
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.lastRankMap = {}
          (_ktype49, _vtype50, _size48 ) = iprot.readMapBegin()
          for _i52 in xrange(_size48):
            _key53 = iprot.readI16();
            _val54 = iprot.readI32();
            self.lastRankMap[_key53] = _val54
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.avgHighRank = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.avgMediumRank = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.avgSafeRank = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.avgLastRank = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.sizeRange = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SchStat')
    if self.fromProvinceId is not None:
      oprot.writeFieldBegin('fromProvinceId', TType.STRING, 1)
      oprot.writeString(self.fromProvinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.eduTypeWenli is not None:
      oprot.writeFieldBegin('eduTypeWenli', TType.I32, 2)
      oprot.writeI32(self.eduTypeWenli)
      oprot.writeFieldEnd()
    if self.batch is not None:
      oprot.writeFieldBegin('batch', TType.I32, 3)
      oprot.writeI32(self.batch)
      oprot.writeFieldEnd()
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 4)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.highRankMap is not None:
      oprot.writeFieldBegin('highRankMap', TType.MAP, 5)
      oprot.writeMapBegin(TType.I16, TType.I32, len(self.highRankMap))
      for kiter55,viter56 in self.highRankMap.items():
        oprot.writeI16(kiter55)
        oprot.writeI32(viter56)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.mediumRankMap is not None:
      oprot.writeFieldBegin('mediumRankMap', TType.MAP, 6)
      oprot.writeMapBegin(TType.I16, TType.I32, len(self.mediumRankMap))
      for kiter57,viter58 in self.mediumRankMap.items():
        oprot.writeI16(kiter57)
        oprot.writeI32(viter58)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.safeRankMap is not None:
      oprot.writeFieldBegin('safeRankMap', TType.MAP, 7)
      oprot.writeMapBegin(TType.I16, TType.I32, len(self.safeRankMap))
      for kiter59,viter60 in self.safeRankMap.items():
        oprot.writeI16(kiter59)
        oprot.writeI32(viter60)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.lastRankMap is not None:
      oprot.writeFieldBegin('lastRankMap', TType.MAP, 8)
      oprot.writeMapBegin(TType.I16, TType.I32, len(self.lastRankMap))
      for kiter61,viter62 in self.lastRankMap.items():
        oprot.writeI16(kiter61)
        oprot.writeI32(viter62)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.avgHighRank is not None:
      oprot.writeFieldBegin('avgHighRank', TType.I32, 9)
      oprot.writeI32(self.avgHighRank)
      oprot.writeFieldEnd()
    if self.avgMediumRank is not None:
      oprot.writeFieldBegin('avgMediumRank', TType.I32, 10)
      oprot.writeI32(self.avgMediumRank)
      oprot.writeFieldEnd()
    if self.avgSafeRank is not None:
      oprot.writeFieldBegin('avgSafeRank', TType.I32, 11)
      oprot.writeI32(self.avgSafeRank)
      oprot.writeFieldEnd()
    if self.avgLastRank is not None:
      oprot.writeFieldBegin('avgLastRank', TType.I32, 12)
      oprot.writeI32(self.avgLastRank)
      oprot.writeFieldEnd()
    if self.sizeRange is not None:
      oprot.writeFieldBegin('sizeRange', TType.STRING, 13)
      oprot.writeString(self.sizeRange.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fromProvinceId)
    value = (value * 31) ^ hash(self.eduTypeWenli)
    value = (value * 31) ^ hash(self.batch)
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.highRankMap)
    value = (value * 31) ^ hash(self.mediumRankMap)
    value = (value * 31) ^ hash(self.safeRankMap)
    value = (value * 31) ^ hash(self.lastRankMap)
    value = (value * 31) ^ hash(self.avgHighRank)
    value = (value * 31) ^ hash(self.avgMediumRank)
    value = (value * 31) ^ hash(self.avgSafeRank)
    value = (value * 31) ^ hash(self.avgLastRank)
    value = (value * 31) ^ hash(self.sizeRange)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SchCluster(object):
  """
  Attributes:
   - fromProvinceId
   - schoolLocation
   - batch
   - eduTypeWenli
   - sizeRange
   - rankDiffList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fromProvinceId', None, None, ), # 1
    (2, TType.STRING, 'schoolLocation', None, None, ), # 2
    (3, TType.I32, 'batch', None, None, ), # 3
    (4, TType.I32, 'eduTypeWenli', None, None, ), # 4
    (5, TType.STRING, 'sizeRange', None, None, ), # 5
    (6, TType.LIST, 'rankDiffList', (TType.I32,None), None, ), # 6
  )

  def __init__(self, fromProvinceId=None, schoolLocation=None, batch=None, eduTypeWenli=None, sizeRange=None, rankDiffList=None,):
    self.fromProvinceId = fromProvinceId
    self.schoolLocation = schoolLocation
    self.batch = batch
    self.eduTypeWenli = eduTypeWenli
    self.sizeRange = sizeRange
    self.rankDiffList = rankDiffList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fromProvinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.schoolLocation = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.batch = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.eduTypeWenli = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sizeRange = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.rankDiffList = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = iprot.readI32();
            self.rankDiffList.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SchCluster')
    if self.fromProvinceId is not None:
      oprot.writeFieldBegin('fromProvinceId', TType.STRING, 1)
      oprot.writeString(self.fromProvinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schoolLocation is not None:
      oprot.writeFieldBegin('schoolLocation', TType.STRING, 2)
      oprot.writeString(self.schoolLocation.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.batch is not None:
      oprot.writeFieldBegin('batch', TType.I32, 3)
      oprot.writeI32(self.batch)
      oprot.writeFieldEnd()
    if self.eduTypeWenli is not None:
      oprot.writeFieldBegin('eduTypeWenli', TType.I32, 4)
      oprot.writeI32(self.eduTypeWenli)
      oprot.writeFieldEnd()
    if self.sizeRange is not None:
      oprot.writeFieldBegin('sizeRange', TType.STRING, 5)
      oprot.writeString(self.sizeRange.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.rankDiffList is not None:
      oprot.writeFieldBegin('rankDiffList', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.rankDiffList))
      for iter69 in self.rankDiffList:
        oprot.writeI32(iter69)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fromProvinceId)
    value = (value * 31) ^ hash(self.schoolLocation)
    value = (value * 31) ^ hash(self.batch)
    value = (value * 31) ^ hash(self.eduTypeWenli)
    value = (value * 31) ^ hash(self.sizeRange)
    value = (value * 31) ^ hash(self.rankDiffList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SchMajorScoreStat(object):
  """
  Attributes:
   - schId
   - majorId
   - eduTypeWenli
   - year
   - batch
   - fromProvinceId
   - minScore
   - maxScore
   - avgScore
   - peopleCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'schId', None, None, ), # 1
    (2, TType.STRING, 'majorId', None, None, ), # 2
    (3, TType.I32, 'eduTypeWenli', None, None, ), # 3
    (4, TType.I16, 'year', None, None, ), # 4
    (5, TType.I32, 'batch', None, None, ), # 5
    (6, TType.STRING, 'fromProvinceId', None, None, ), # 6
    (7, TType.I16, 'minScore', None, None, ), # 7
    (8, TType.I16, 'maxScore', None, None, ), # 8
    (9, TType.I16, 'avgScore', None, None, ), # 9
    (10, TType.I32, 'peopleCount', None, None, ), # 10
  )

  def __init__(self, schId=None, majorId=None, eduTypeWenli=None, year=None, batch=None, fromProvinceId=None, minScore=None, maxScore=None, avgScore=None, peopleCount=None,):
    self.schId = schId
    self.majorId = majorId
    self.eduTypeWenli = eduTypeWenli
    self.year = year
    self.batch = batch
    self.fromProvinceId = fromProvinceId
    self.minScore = minScore
    self.maxScore = maxScore
    self.avgScore = avgScore
    self.peopleCount = peopleCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.majorId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.eduTypeWenli = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.year = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.batch = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.fromProvinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.minScore = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.maxScore = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.avgScore = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.peopleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SchMajorScoreStat')
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 1)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorId is not None:
      oprot.writeFieldBegin('majorId', TType.STRING, 2)
      oprot.writeString(self.majorId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.eduTypeWenli is not None:
      oprot.writeFieldBegin('eduTypeWenli', TType.I32, 3)
      oprot.writeI32(self.eduTypeWenli)
      oprot.writeFieldEnd()
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.I16, 4)
      oprot.writeI16(self.year)
      oprot.writeFieldEnd()
    if self.batch is not None:
      oprot.writeFieldBegin('batch', TType.I32, 5)
      oprot.writeI32(self.batch)
      oprot.writeFieldEnd()
    if self.fromProvinceId is not None:
      oprot.writeFieldBegin('fromProvinceId', TType.STRING, 6)
      oprot.writeString(self.fromProvinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.minScore is not None:
      oprot.writeFieldBegin('minScore', TType.I16, 7)
      oprot.writeI16(self.minScore)
      oprot.writeFieldEnd()
    if self.maxScore is not None:
      oprot.writeFieldBegin('maxScore', TType.I16, 8)
      oprot.writeI16(self.maxScore)
      oprot.writeFieldEnd()
    if self.avgScore is not None:
      oprot.writeFieldBegin('avgScore', TType.I16, 9)
      oprot.writeI16(self.avgScore)
      oprot.writeFieldEnd()
    if self.peopleCount is not None:
      oprot.writeFieldBegin('peopleCount', TType.I32, 10)
      oprot.writeI32(self.peopleCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.majorId)
    value = (value * 31) ^ hash(self.eduTypeWenli)
    value = (value * 31) ^ hash(self.year)
    value = (value * 31) ^ hash(self.batch)
    value = (value * 31) ^ hash(self.fromProvinceId)
    value = (value * 31) ^ hash(self.minScore)
    value = (value * 31) ^ hash(self.maxScore)
    value = (value * 31) ^ hash(self.avgScore)
    value = (value * 31) ^ hash(self.peopleCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProvinceScoreRank(object):
  """
  Attributes:
   - provinceId
   - year
   - eduTypeWenli
   - score
   - rank
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'provinceId', None, None, ), # 1
    (2, TType.I16, 'year', None, None, ), # 2
    (3, TType.I32, 'eduTypeWenli', None, None, ), # 3
    (4, TType.I16, 'score', None, None, ), # 4
    (5, TType.I32, 'rank', None, None, ), # 5
  )

  def __init__(self, provinceId=None, year=None, eduTypeWenli=None, score=None, rank=None,):
    self.provinceId = provinceId
    self.year = year
    self.eduTypeWenli = eduTypeWenli
    self.score = score
    self.rank = rank

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.provinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.year = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.eduTypeWenli = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.score = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.rank = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProvinceScoreRank')
    if self.provinceId is not None:
      oprot.writeFieldBegin('provinceId', TType.STRING, 1)
      oprot.writeString(self.provinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.I16, 2)
      oprot.writeI16(self.year)
      oprot.writeFieldEnd()
    if self.eduTypeWenli is not None:
      oprot.writeFieldBegin('eduTypeWenli', TType.I32, 3)
      oprot.writeI32(self.eduTypeWenli)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.I16, 4)
      oprot.writeI16(self.score)
      oprot.writeFieldEnd()
    if self.rank is not None:
      oprot.writeFieldBegin('rank', TType.I32, 5)
      oprot.writeI32(self.rank)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.provinceId)
    value = (value * 31) ^ hash(self.year)
    value = (value * 31) ^ hash(self.eduTypeWenli)
    value = (value * 31) ^ hash(self.score)
    value = (value * 31) ^ hash(self.rank)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SchMeanAndStdev(object):
  """
  Attributes:
   - fromProvinceId
   - schId
   - eduTypeWenli
   - batch
   - mean
   - stdev
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fromProvinceId', None, None, ), # 1
    (2, TType.STRING, 'schId', None, None, ), # 2
    (3, TType.I32, 'eduTypeWenli', None, None, ), # 3
    (4, TType.I32, 'batch', None, None, ), # 4
    None, # 5
    (6, TType.DOUBLE, 'mean', None, None, ), # 6
    (7, TType.DOUBLE, 'stdev', None, None, ), # 7
  )

  def __init__(self, fromProvinceId=None, schId=None, eduTypeWenli=None, batch=None, mean=None, stdev=None,):
    self.fromProvinceId = fromProvinceId
    self.schId = schId
    self.eduTypeWenli = eduTypeWenli
    self.batch = batch
    self.mean = mean
    self.stdev = stdev

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fromProvinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.eduTypeWenli = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.batch = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.mean = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.stdev = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SchMeanAndStdev')
    if self.fromProvinceId is not None:
      oprot.writeFieldBegin('fromProvinceId', TType.STRING, 1)
      oprot.writeString(self.fromProvinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 2)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.eduTypeWenli is not None:
      oprot.writeFieldBegin('eduTypeWenli', TType.I32, 3)
      oprot.writeI32(self.eduTypeWenli)
      oprot.writeFieldEnd()
    if self.batch is not None:
      oprot.writeFieldBegin('batch', TType.I32, 4)
      oprot.writeI32(self.batch)
      oprot.writeFieldEnd()
    if self.mean is not None:
      oprot.writeFieldBegin('mean', TType.DOUBLE, 6)
      oprot.writeDouble(self.mean)
      oprot.writeFieldEnd()
    if self.stdev is not None:
      oprot.writeFieldBegin('stdev', TType.DOUBLE, 7)
      oprot.writeDouble(self.stdev)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fromProvinceId)
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.eduTypeWenli)
    value = (value * 31) ^ hash(self.batch)
    value = (value * 31) ^ hash(self.mean)
    value = (value * 31) ^ hash(self.stdev)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SameScoreStat(object):
  """
  Attributes:
   - fromProvinceId
   - year
   - score
   - eduTypeWenli
   - batch
   - schId
   - majorId
   - peopleCnt
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fromProvinceId', None, None, ), # 1
    (2, TType.I16, 'year', None, None, ), # 2
    (3, TType.I16, 'score', None, None, ), # 3
    (4, TType.I32, 'eduTypeWenli', None, None, ), # 4
    (5, TType.I32, 'batch', None, None, ), # 5
    (6, TType.STRING, 'schId', None, None, ), # 6
    (7, TType.STRING, 'majorId', None, None, ), # 7
    (8, TType.I32, 'peopleCnt', None, None, ), # 8
  )

  def __init__(self, fromProvinceId=None, year=None, score=None, eduTypeWenli=None, batch=None, schId=None, majorId=None, peopleCnt=None,):
    self.fromProvinceId = fromProvinceId
    self.year = year
    self.score = score
    self.eduTypeWenli = eduTypeWenli
    self.batch = batch
    self.schId = schId
    self.majorId = majorId
    self.peopleCnt = peopleCnt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fromProvinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.year = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.score = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.eduTypeWenli = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.batch = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.majorId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.peopleCnt = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SameScoreStat')
    if self.fromProvinceId is not None:
      oprot.writeFieldBegin('fromProvinceId', TType.STRING, 1)
      oprot.writeString(self.fromProvinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.I16, 2)
      oprot.writeI16(self.year)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.I16, 3)
      oprot.writeI16(self.score)
      oprot.writeFieldEnd()
    if self.eduTypeWenli is not None:
      oprot.writeFieldBegin('eduTypeWenli', TType.I32, 4)
      oprot.writeI32(self.eduTypeWenli)
      oprot.writeFieldEnd()
    if self.batch is not None:
      oprot.writeFieldBegin('batch', TType.I32, 5)
      oprot.writeI32(self.batch)
      oprot.writeFieldEnd()
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 6)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorId is not None:
      oprot.writeFieldBegin('majorId', TType.STRING, 7)
      oprot.writeString(self.majorId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.peopleCnt is not None:
      oprot.writeFieldBegin('peopleCnt', TType.I32, 8)
      oprot.writeI32(self.peopleCnt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fromProvinceId)
    value = (value * 31) ^ hash(self.year)
    value = (value * 31) ^ hash(self.score)
    value = (value * 31) ^ hash(self.eduTypeWenli)
    value = (value * 31) ^ hash(self.batch)
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.majorId)
    value = (value * 31) ^ hash(self.peopleCnt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
