# -*- coding:utf8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(object):
  def findBkSchId(self, versionName, schName):
    """
    查找本科学校Id

    Parameters:
     - versionName
     - schName
    """
    pass

  def findBkSch(self, versionName, schName):
    """
    查找本科学校

    Parameters:
     - versionName
     - schName
    """
    pass

  def findZkSchId(self, versionName, schName):
    """
    查找专科学校Id

    Parameters:
     - versionName
     - schName
    """
    pass

  def findZkSch(self, versionName, schName):
    """
    查找专科学校

    Parameters:
     - versionName
     - schName
    """
    pass

  def getSchIdInfo(self, versionName, schId):
    """
    根据学校id获取学校信息

    Parameters:
     - versionName
     - schId
    """
    pass

  def listAllSchIdInfo(self, versionName, skipIntro):
    """
    列出所有学校信息

    Parameters:
     - versionName
     - skipIntro
    """
    pass

  def findBkMajorId(self, versionName, majorName):
    """
    查找本科专业Id

    Parameters:
     - versionName
     - majorName
    """
    pass

  def findBkMajor(self, versionName, majorName):
    """
    查找本科专业

    Parameters:
     - versionName
     - majorName
    """
    pass

  def findZkMajorId(self, versionName, majorName):
    """
    查找专科专业Id

    Parameters:
     - versionName
     - majorName
    """
    pass

  def findZkMajor(self, versionName, majorName):
    """
    查找专科专业

    Parameters:
     - versionName
     - majorName
    """
    pass

  def getMajorIdInfo(self, versionName, majorId):
    """
    根据专业id获取专业信息

    Parameters:
     - versionName
     - majorId
    """
    pass

  def listMajorIdInfo(self, versionName, majorIdList):
    """
    列出专业信息

    Parameters:
     - versionName
     - majorIdList
    """
    pass

  def listAllMajorIdInfo(self, versionName, skipIntro):
    """
    列出所有专业信息

    Parameters:
     - versionName
     - skipIntro
    """
    pass

  def getSchMajorIdInfo(self, versionName, schId, majorId):
    """
    获取学校专业信息

    Parameters:
     - versionName
     - schId
     - majorId
    """
    pass

  def listSchBatch(self, versionName, fromProvinceId, schId, diploma, wenliType):
    """
    按 生源地 本专 文理 列出学校批次


    Parameters:
     - versionName
     - fromProvinceId
     - schId
     - diploma
     - wenliType
    """
    pass

  def listProvinceSchBatch(self, versionName, fromProvinceId, diploma, wenliType):
    """
    Parameters:
     - versionName
     - fromProvinceId
     - diploma
     - wenliType
    """
    pass

  def setSchBatch(self, versionName, schBatch):
    """
    Parameters:
     - versionName
     - schBatch
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def findBkSchId(self, versionName, schName):
    """
    查找本科学校Id

    Parameters:
     - versionName
     - schName
    """
    self.send_findBkSchId(versionName, schName)
    return self.recv_findBkSchId()

  def send_findBkSchId(self, versionName, schName):
    self._oprot.writeMessageBegin('findBkSchId', TMessageType.CALL, self._seqid)
    args = findBkSchId_args()
    args.versionName = versionName
    args.schName = schName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findBkSchId(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findBkSchId_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findBkSchId failed: unknown result");

  def findBkSch(self, versionName, schName):
    """
    查找本科学校

    Parameters:
     - versionName
     - schName
    """
    self.send_findBkSch(versionName, schName)
    return self.recv_findBkSch()

  def send_findBkSch(self, versionName, schName):
    self._oprot.writeMessageBegin('findBkSch', TMessageType.CALL, self._seqid)
    args = findBkSch_args()
    args.versionName = versionName
    args.schName = schName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findBkSch(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findBkSch_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findBkSch failed: unknown result");

  def findZkSchId(self, versionName, schName):
    """
    查找专科学校Id

    Parameters:
     - versionName
     - schName
    """
    self.send_findZkSchId(versionName, schName)
    return self.recv_findZkSchId()

  def send_findZkSchId(self, versionName, schName):
    self._oprot.writeMessageBegin('findZkSchId', TMessageType.CALL, self._seqid)
    args = findZkSchId_args()
    args.versionName = versionName
    args.schName = schName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findZkSchId(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findZkSchId_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findZkSchId failed: unknown result");

  def findZkSch(self, versionName, schName):
    """
    查找专科学校

    Parameters:
     - versionName
     - schName
    """
    self.send_findZkSch(versionName, schName)
    return self.recv_findZkSch()

  def send_findZkSch(self, versionName, schName):
    self._oprot.writeMessageBegin('findZkSch', TMessageType.CALL, self._seqid)
    args = findZkSch_args()
    args.versionName = versionName
    args.schName = schName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findZkSch(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findZkSch_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findZkSch failed: unknown result");

  def getSchIdInfo(self, versionName, schId):
    """
    根据学校id获取学校信息

    Parameters:
     - versionName
     - schId
    """
    self.send_getSchIdInfo(versionName, schId)
    return self.recv_getSchIdInfo()

  def send_getSchIdInfo(self, versionName, schId):
    self._oprot.writeMessageBegin('getSchIdInfo', TMessageType.CALL, self._seqid)
    args = getSchIdInfo_args()
    args.versionName = versionName
    args.schId = schId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSchIdInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getSchIdInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSchIdInfo failed: unknown result");

  def listAllSchIdInfo(self, versionName, skipIntro):
    """
    列出所有学校信息

    Parameters:
     - versionName
     - skipIntro
    """
    self.send_listAllSchIdInfo(versionName, skipIntro)
    return self.recv_listAllSchIdInfo()

  def send_listAllSchIdInfo(self, versionName, skipIntro):
    self._oprot.writeMessageBegin('listAllSchIdInfo', TMessageType.CALL, self._seqid)
    args = listAllSchIdInfo_args()
    args.versionName = versionName
    args.skipIntro = skipIntro
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_listAllSchIdInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = listAllSchIdInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "listAllSchIdInfo failed: unknown result");

  def findBkMajorId(self, versionName, majorName):
    """
    查找本科专业Id

    Parameters:
     - versionName
     - majorName
    """
    self.send_findBkMajorId(versionName, majorName)
    return self.recv_findBkMajorId()

  def send_findBkMajorId(self, versionName, majorName):
    self._oprot.writeMessageBegin('findBkMajorId', TMessageType.CALL, self._seqid)
    args = findBkMajorId_args()
    args.versionName = versionName
    args.majorName = majorName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findBkMajorId(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findBkMajorId_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findBkMajorId failed: unknown result");

  def findBkMajor(self, versionName, majorName):
    """
    查找本科专业

    Parameters:
     - versionName
     - majorName
    """
    self.send_findBkMajor(versionName, majorName)
    return self.recv_findBkMajor()

  def send_findBkMajor(self, versionName, majorName):
    self._oprot.writeMessageBegin('findBkMajor', TMessageType.CALL, self._seqid)
    args = findBkMajor_args()
    args.versionName = versionName
    args.majorName = majorName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findBkMajor(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findBkMajor_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findBkMajor failed: unknown result");

  def findZkMajorId(self, versionName, majorName):
    """
    查找专科专业Id

    Parameters:
     - versionName
     - majorName
    """
    self.send_findZkMajorId(versionName, majorName)
    return self.recv_findZkMajorId()

  def send_findZkMajorId(self, versionName, majorName):
    self._oprot.writeMessageBegin('findZkMajorId', TMessageType.CALL, self._seqid)
    args = findZkMajorId_args()
    args.versionName = versionName
    args.majorName = majorName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findZkMajorId(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findZkMajorId_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findZkMajorId failed: unknown result");

  def findZkMajor(self, versionName, majorName):
    """
    查找专科专业

    Parameters:
     - versionName
     - majorName
    """
    self.send_findZkMajor(versionName, majorName)
    return self.recv_findZkMajor()

  def send_findZkMajor(self, versionName, majorName):
    self._oprot.writeMessageBegin('findZkMajor', TMessageType.CALL, self._seqid)
    args = findZkMajor_args()
    args.versionName = versionName
    args.majorName = majorName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findZkMajor(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findZkMajor_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findZkMajor failed: unknown result");

  def getMajorIdInfo(self, versionName, majorId):
    """
    根据专业id获取专业信息

    Parameters:
     - versionName
     - majorId
    """
    self.send_getMajorIdInfo(versionName, majorId)
    return self.recv_getMajorIdInfo()

  def send_getMajorIdInfo(self, versionName, majorId):
    self._oprot.writeMessageBegin('getMajorIdInfo', TMessageType.CALL, self._seqid)
    args = getMajorIdInfo_args()
    args.versionName = versionName
    args.majorId = majorId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getMajorIdInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getMajorIdInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getMajorIdInfo failed: unknown result");

  def listMajorIdInfo(self, versionName, majorIdList):
    """
    列出专业信息

    Parameters:
     - versionName
     - majorIdList
    """
    self.send_listMajorIdInfo(versionName, majorIdList)
    return self.recv_listMajorIdInfo()

  def send_listMajorIdInfo(self, versionName, majorIdList):
    self._oprot.writeMessageBegin('listMajorIdInfo', TMessageType.CALL, self._seqid)
    args = listMajorIdInfo_args()
    args.versionName = versionName
    args.majorIdList = majorIdList
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_listMajorIdInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = listMajorIdInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "listMajorIdInfo failed: unknown result");

  def listAllMajorIdInfo(self, versionName, skipIntro):
    """
    列出所有专业信息

    Parameters:
     - versionName
     - skipIntro
    """
    self.send_listAllMajorIdInfo(versionName, skipIntro)
    return self.recv_listAllMajorIdInfo()

  def send_listAllMajorIdInfo(self, versionName, skipIntro):
    self._oprot.writeMessageBegin('listAllMajorIdInfo', TMessageType.CALL, self._seqid)
    args = listAllMajorIdInfo_args()
    args.versionName = versionName
    args.skipIntro = skipIntro
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_listAllMajorIdInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = listAllMajorIdInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "listAllMajorIdInfo failed: unknown result");

  def getSchMajorIdInfo(self, versionName, schId, majorId):
    """
    获取学校专业信息

    Parameters:
     - versionName
     - schId
     - majorId
    """
    self.send_getSchMajorIdInfo(versionName, schId, majorId)
    return self.recv_getSchMajorIdInfo()

  def send_getSchMajorIdInfo(self, versionName, schId, majorId):
    self._oprot.writeMessageBegin('getSchMajorIdInfo', TMessageType.CALL, self._seqid)
    args = getSchMajorIdInfo_args()
    args.versionName = versionName
    args.schId = schId
    args.majorId = majorId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSchMajorIdInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getSchMajorIdInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSchMajorIdInfo failed: unknown result");

  def listSchBatch(self, versionName, fromProvinceId, schId, diploma, wenliType):
    """
    按 生源地 本专 文理 列出学校批次


    Parameters:
     - versionName
     - fromProvinceId
     - schId
     - diploma
     - wenliType
    """
    self.send_listSchBatch(versionName, fromProvinceId, schId, diploma, wenliType)
    return self.recv_listSchBatch()

  def send_listSchBatch(self, versionName, fromProvinceId, schId, diploma, wenliType):
    self._oprot.writeMessageBegin('listSchBatch', TMessageType.CALL, self._seqid)
    args = listSchBatch_args()
    args.versionName = versionName
    args.fromProvinceId = fromProvinceId
    args.schId = schId
    args.diploma = diploma
    args.wenliType = wenliType
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_listSchBatch(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = listSchBatch_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "listSchBatch failed: unknown result");

  def listProvinceSchBatch(self, versionName, fromProvinceId, diploma, wenliType):
    """
    Parameters:
     - versionName
     - fromProvinceId
     - diploma
     - wenliType
    """
    self.send_listProvinceSchBatch(versionName, fromProvinceId, diploma, wenliType)
    return self.recv_listProvinceSchBatch()

  def send_listProvinceSchBatch(self, versionName, fromProvinceId, diploma, wenliType):
    self._oprot.writeMessageBegin('listProvinceSchBatch', TMessageType.CALL, self._seqid)
    args = listProvinceSchBatch_args()
    args.versionName = versionName
    args.fromProvinceId = fromProvinceId
    args.diploma = diploma
    args.wenliType = wenliType
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_listProvinceSchBatch(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = listProvinceSchBatch_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "listProvinceSchBatch failed: unknown result");

  def setSchBatch(self, versionName, schBatch):
    """
    Parameters:
     - versionName
     - schBatch
    """
    self.send_setSchBatch(versionName, schBatch)
    self.recv_setSchBatch()

  def send_setSchBatch(self, versionName, schBatch):
    self._oprot.writeMessageBegin('setSchBatch', TMessageType.CALL, self._seqid)
    args = setSchBatch_args()
    args.versionName = versionName
    args.schBatch = schBatch
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setSchBatch(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = setSchBatch_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.namedError is not None:
      raise result.namedError
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["findBkSchId"] = Processor.process_findBkSchId
    self._processMap["findBkSch"] = Processor.process_findBkSch
    self._processMap["findZkSchId"] = Processor.process_findZkSchId
    self._processMap["findZkSch"] = Processor.process_findZkSch
    self._processMap["getSchIdInfo"] = Processor.process_getSchIdInfo
    self._processMap["listAllSchIdInfo"] = Processor.process_listAllSchIdInfo
    self._processMap["findBkMajorId"] = Processor.process_findBkMajorId
    self._processMap["findBkMajor"] = Processor.process_findBkMajor
    self._processMap["findZkMajorId"] = Processor.process_findZkMajorId
    self._processMap["findZkMajor"] = Processor.process_findZkMajor
    self._processMap["getMajorIdInfo"] = Processor.process_getMajorIdInfo
    self._processMap["listMajorIdInfo"] = Processor.process_listMajorIdInfo
    self._processMap["listAllMajorIdInfo"] = Processor.process_listAllMajorIdInfo
    self._processMap["getSchMajorIdInfo"] = Processor.process_getSchMajorIdInfo
    self._processMap["listSchBatch"] = Processor.process_listSchBatch
    self._processMap["listProvinceSchBatch"] = Processor.process_listProvinceSchBatch
    self._processMap["setSchBatch"] = Processor.process_setSchBatch

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_findBkSchId(self, seqid, iprot, oprot):
    args = findBkSchId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findBkSchId_result()
    try:
      result.success = self._handler.findBkSchId(args.versionName, args.schName)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("findBkSchId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findBkSch(self, seqid, iprot, oprot):
    args = findBkSch_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findBkSch_result()
    try:
      result.success = self._handler.findBkSch(args.versionName, args.schName)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("findBkSch", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findZkSchId(self, seqid, iprot, oprot):
    args = findZkSchId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findZkSchId_result()
    try:
      result.success = self._handler.findZkSchId(args.versionName, args.schName)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("findZkSchId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findZkSch(self, seqid, iprot, oprot):
    args = findZkSch_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findZkSch_result()
    try:
      result.success = self._handler.findZkSch(args.versionName, args.schName)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("findZkSch", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSchIdInfo(self, seqid, iprot, oprot):
    args = getSchIdInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSchIdInfo_result()
    try:
      result.success = self._handler.getSchIdInfo(args.versionName, args.schId)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("getSchIdInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_listAllSchIdInfo(self, seqid, iprot, oprot):
    args = listAllSchIdInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = listAllSchIdInfo_result()
    try:
      result.success = self._handler.listAllSchIdInfo(args.versionName, args.skipIntro)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("listAllSchIdInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findBkMajorId(self, seqid, iprot, oprot):
    args = findBkMajorId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findBkMajorId_result()
    try:
      result.success = self._handler.findBkMajorId(args.versionName, args.majorName)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("findBkMajorId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findBkMajor(self, seqid, iprot, oprot):
    args = findBkMajor_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findBkMajor_result()
    try:
      result.success = self._handler.findBkMajor(args.versionName, args.majorName)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("findBkMajor", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findZkMajorId(self, seqid, iprot, oprot):
    args = findZkMajorId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findZkMajorId_result()
    try:
      result.success = self._handler.findZkMajorId(args.versionName, args.majorName)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("findZkMajorId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findZkMajor(self, seqid, iprot, oprot):
    args = findZkMajor_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findZkMajor_result()
    try:
      result.success = self._handler.findZkMajor(args.versionName, args.majorName)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("findZkMajor", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getMajorIdInfo(self, seqid, iprot, oprot):
    args = getMajorIdInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getMajorIdInfo_result()
    try:
      result.success = self._handler.getMajorIdInfo(args.versionName, args.majorId)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("getMajorIdInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_listMajorIdInfo(self, seqid, iprot, oprot):
    args = listMajorIdInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = listMajorIdInfo_result()
    try:
      result.success = self._handler.listMajorIdInfo(args.versionName, args.majorIdList)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("listMajorIdInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_listAllMajorIdInfo(self, seqid, iprot, oprot):
    args = listAllMajorIdInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = listAllMajorIdInfo_result()
    try:
      result.success = self._handler.listAllMajorIdInfo(args.versionName, args.skipIntro)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("listAllMajorIdInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSchMajorIdInfo(self, seqid, iprot, oprot):
    args = getSchMajorIdInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSchMajorIdInfo_result()
    try:
      result.success = self._handler.getSchMajorIdInfo(args.versionName, args.schId, args.majorId)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("getSchMajorIdInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_listSchBatch(self, seqid, iprot, oprot):
    args = listSchBatch_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = listSchBatch_result()
    try:
      result.success = self._handler.listSchBatch(args.versionName, args.fromProvinceId, args.schId, args.diploma, args.wenliType)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("listSchBatch", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_listProvinceSchBatch(self, seqid, iprot, oprot):
    args = listProvinceSchBatch_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = listProvinceSchBatch_result()
    try:
      result.success = self._handler.listProvinceSchBatch(args.versionName, args.fromProvinceId, args.diploma, args.wenliType)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("listProvinceSchBatch", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setSchBatch(self, seqid, iprot, oprot):
    args = setSchBatch_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setSchBatch_result()
    try:
      self._handler.setSchBatch(args.versionName, args.schBatch)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("setSchBatch", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class findBkSchId_args(object):
  """
  Attributes:
   - versionName
   - schName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'schName', None, None, ), # 10
  )

  def __init__(self, versionName=None, schName=None,):
    self.versionName = versionName
    self.schName = schName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.schName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findBkSchId_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schName is not None:
      oprot.writeFieldBegin('schName', TType.STRING, 10)
      oprot.writeString(self.schName.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.schName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findBkSchId_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findBkSchId_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findBkSch_args(object):
  """
  Attributes:
   - versionName
   - schName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'schName', None, None, ), # 10
  )

  def __init__(self, versionName=None, schName=None,):
    self.versionName = versionName
    self.schName = schName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.schName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findBkSch_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schName is not None:
      oprot.writeFieldBegin('schName', TType.STRING, 10)
      oprot.writeString(self.schName.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.schName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findBkSch_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (SchIdInfo, SchIdInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = SchIdInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findBkSch_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findZkSchId_args(object):
  """
  Attributes:
   - versionName
   - schName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'schName', None, None, ), # 10
  )

  def __init__(self, versionName=None, schName=None,):
    self.versionName = versionName
    self.schName = schName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.schName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findZkSchId_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schName is not None:
      oprot.writeFieldBegin('schName', TType.STRING, 10)
      oprot.writeString(self.schName.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.schName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findZkSchId_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findZkSchId_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findZkSch_args(object):
  """
  Attributes:
   - versionName
   - schName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'schName', None, None, ), # 10
  )

  def __init__(self, versionName=None, schName=None,):
    self.versionName = versionName
    self.schName = schName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.schName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findZkSch_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schName is not None:
      oprot.writeFieldBegin('schName', TType.STRING, 10)
      oprot.writeString(self.schName.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.schName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findZkSch_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (SchIdInfo, SchIdInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = SchIdInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findZkSch_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSchIdInfo_args(object):
  """
  Attributes:
   - versionName
   - schId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'schId', None, None, ), # 10
  )

  def __init__(self, versionName=None, schId=None,):
    self.versionName = versionName
    self.schId = schId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSchIdInfo_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 10)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.schId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSchIdInfo_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (SchIdInfo, SchIdInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = SchIdInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSchIdInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listAllSchIdInfo_args(object):
  """
  Attributes:
   - versionName
   - skipIntro
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.BOOL, 'skipIntro', None, None, ), # 10
  )

  def __init__(self, versionName=None, skipIntro=None,):
    self.versionName = versionName
    self.skipIntro = skipIntro

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.skipIntro = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listAllSchIdInfo_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.skipIntro is not None:
      oprot.writeFieldBegin('skipIntro', TType.BOOL, 10)
      oprot.writeBool(self.skipIntro)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.skipIntro)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listAllSchIdInfo_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(SchIdInfo, SchIdInfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = SchIdInfo()
            _elem26.read(iprot)
            self.success.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listAllSchIdInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter27 in self.success:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findBkMajorId_args(object):
  """
  Attributes:
   - versionName
   - majorName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'majorName', None, None, ), # 10
  )

  def __init__(self, versionName=None, majorName=None,):
    self.versionName = versionName
    self.majorName = majorName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.majorName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findBkMajorId_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorName is not None:
      oprot.writeFieldBegin('majorName', TType.STRING, 10)
      oprot.writeString(self.majorName.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.majorName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findBkMajorId_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findBkMajorId_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findBkMajor_args(object):
  """
  Attributes:
   - versionName
   - majorName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'majorName', None, None, ), # 10
  )

  def __init__(self, versionName=None, majorName=None,):
    self.versionName = versionName
    self.majorName = majorName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.majorName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findBkMajor_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorName is not None:
      oprot.writeFieldBegin('majorName', TType.STRING, 10)
      oprot.writeString(self.majorName.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.majorName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findBkMajor_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (MajorIdInfo, MajorIdInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = MajorIdInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findBkMajor_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findZkMajorId_args(object):
  """
  Attributes:
   - versionName
   - majorName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'majorName', None, None, ), # 10
  )

  def __init__(self, versionName=None, majorName=None,):
    self.versionName = versionName
    self.majorName = majorName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.majorName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findZkMajorId_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorName is not None:
      oprot.writeFieldBegin('majorName', TType.STRING, 10)
      oprot.writeString(self.majorName.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.majorName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findZkMajorId_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findZkMajorId_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findZkMajor_args(object):
  """
  Attributes:
   - versionName
   - majorName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'majorName', None, None, ), # 10
  )

  def __init__(self, versionName=None, majorName=None,):
    self.versionName = versionName
    self.majorName = majorName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.majorName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findZkMajor_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorName is not None:
      oprot.writeFieldBegin('majorName', TType.STRING, 10)
      oprot.writeString(self.majorName.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.majorName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findZkMajor_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (MajorIdInfo, MajorIdInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = MajorIdInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findZkMajor_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getMajorIdInfo_args(object):
  """
  Attributes:
   - versionName
   - majorId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'majorId', None, None, ), # 10
  )

  def __init__(self, versionName=None, majorId=None,):
    self.versionName = versionName
    self.majorId = majorId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.majorId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getMajorIdInfo_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorId is not None:
      oprot.writeFieldBegin('majorId', TType.STRING, 10)
      oprot.writeString(self.majorId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.majorId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getMajorIdInfo_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (MajorIdInfo, MajorIdInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = MajorIdInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getMajorIdInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listMajorIdInfo_args(object):
  """
  Attributes:
   - versionName
   - majorIdList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.LIST, 'majorIdList', (TType.STRING,None), None, ), # 10
  )

  def __init__(self, versionName=None, majorIdList=None,):
    self.versionName = versionName
    self.majorIdList = majorIdList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.majorIdList = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readString().decode('utf-8')
            self.majorIdList.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listMajorIdInfo_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorIdList is not None:
      oprot.writeFieldBegin('majorIdList', TType.LIST, 10)
      oprot.writeListBegin(TType.STRING, len(self.majorIdList))
      for iter34 in self.majorIdList:
        oprot.writeString(iter34.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.majorIdList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listMajorIdInfo_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(MajorIdInfo, MajorIdInfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = MajorIdInfo()
            _elem40.read(iprot)
            self.success.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listMajorIdInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter41 in self.success:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listAllMajorIdInfo_args(object):
  """
  Attributes:
   - versionName
   - skipIntro
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.BOOL, 'skipIntro', None, None, ), # 10
  )

  def __init__(self, versionName=None, skipIntro=None,):
    self.versionName = versionName
    self.skipIntro = skipIntro

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.skipIntro = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listAllMajorIdInfo_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.skipIntro is not None:
      oprot.writeFieldBegin('skipIntro', TType.BOOL, 10)
      oprot.writeBool(self.skipIntro)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.skipIntro)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listAllMajorIdInfo_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(MajorIdInfo, MajorIdInfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = MajorIdInfo()
            _elem47.read(iprot)
            self.success.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listAllMajorIdInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter48 in self.success:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSchMajorIdInfo_args(object):
  """
  Attributes:
   - versionName
   - schId
   - majorId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'schId', None, None, ), # 10
    (11, TType.STRING, 'majorId', None, None, ), # 11
  )

  def __init__(self, versionName=None, schId=None, majorId=None,):
    self.versionName = versionName
    self.schId = schId
    self.majorId = majorId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.majorId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSchMajorIdInfo_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 10)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorId is not None:
      oprot.writeFieldBegin('majorId', TType.STRING, 11)
      oprot.writeString(self.majorId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.majorId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSchMajorIdInfo_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (SchMajorIdInfo, SchMajorIdInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = SchMajorIdInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSchMajorIdInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listSchBatch_args(object):
  """
  Attributes:
   - versionName
   - fromProvinceId
   - schId
   - diploma
   - wenliType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'fromProvinceId', None, None, ), # 10
    (11, TType.STRING, 'schId', None, None, ), # 11
    (12, TType.I32, 'diploma', None, None, ), # 12
    (13, TType.I32, 'wenliType', None, None, ), # 13
  )

  def __init__(self, versionName=None, fromProvinceId=None, schId=None, diploma=None, wenliType=None,):
    self.versionName = versionName
    self.fromProvinceId = fromProvinceId
    self.schId = schId
    self.diploma = diploma
    self.wenliType = wenliType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.fromProvinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.diploma = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.wenliType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listSchBatch_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.fromProvinceId is not None:
      oprot.writeFieldBegin('fromProvinceId', TType.STRING, 10)
      oprot.writeString(self.fromProvinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 11)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.diploma is not None:
      oprot.writeFieldBegin('diploma', TType.I32, 12)
      oprot.writeI32(self.diploma)
      oprot.writeFieldEnd()
    if self.wenliType is not None:
      oprot.writeFieldBegin('wenliType', TType.I32, 13)
      oprot.writeI32(self.wenliType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.fromProvinceId)
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.diploma)
    value = (value * 31) ^ hash(self.wenliType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listSchBatch_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(SchBatch, SchBatch.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = SchBatch()
            _elem54.read(iprot)
            self.success.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listSchBatch_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter55 in self.success:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listProvinceSchBatch_args(object):
  """
  Attributes:
   - versionName
   - fromProvinceId
   - diploma
   - wenliType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'fromProvinceId', None, None, ), # 10
    (11, TType.I32, 'diploma', None, None, ), # 11
    (12, TType.I32, 'wenliType', None, None, ), # 12
  )

  def __init__(self, versionName=None, fromProvinceId=None, diploma=None, wenliType=None,):
    self.versionName = versionName
    self.fromProvinceId = fromProvinceId
    self.diploma = diploma
    self.wenliType = wenliType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.fromProvinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.diploma = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.wenliType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listProvinceSchBatch_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.fromProvinceId is not None:
      oprot.writeFieldBegin('fromProvinceId', TType.STRING, 10)
      oprot.writeString(self.fromProvinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.diploma is not None:
      oprot.writeFieldBegin('diploma', TType.I32, 11)
      oprot.writeI32(self.diploma)
      oprot.writeFieldEnd()
    if self.wenliType is not None:
      oprot.writeFieldBegin('wenliType', TType.I32, 12)
      oprot.writeI32(self.wenliType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.fromProvinceId)
    value = (value * 31) ^ hash(self.diploma)
    value = (value * 31) ^ hash(self.wenliType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listProvinceSchBatch_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(SchBatch, SchBatch.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = SchBatch()
            _elem61.read(iprot)
            self.success.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listProvinceSchBatch_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter62 in self.success:
        iter62.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setSchBatch_args(object):
  """
  Attributes:
   - versionName
   - schBatch
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'schBatch', (SchBatch, SchBatch.thrift_spec), None, ), # 10
  )

  def __init__(self, versionName=None, schBatch=None,):
    self.versionName = versionName
    self.schBatch = schBatch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.schBatch = SchBatch()
          self.schBatch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setSchBatch_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schBatch is not None:
      oprot.writeFieldBegin('schBatch', TType.STRUCT, 10)
      self.schBatch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.schBatch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setSchBatch_result(object):
  """
  Attributes:
   - namedError
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, namedError=None,):
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setSchBatch_result')
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
