# -*- coding:utf8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ipin.rpc.common.ttypes
import ipin.rpc.edu.commontype.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class SchIdInfo(object):
  """
  Attributes:
   - schId
   - schName
   - provinceId
   - cityId
   - intro
   - schType
   - is985
   - is211
   - schDiplomaNameList
   - diplomaList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'schId', None, None, ), # 1
    (2, TType.STRING, 'schName', None, None, ), # 2
    (3, TType.STRING, 'provinceId', None, None, ), # 3
    (4, TType.STRING, 'cityId', None, None, ), # 4
    (5, TType.STRING, 'intro', None, None, ), # 5
    (6, TType.STRING, 'schType', None, None, ), # 6
    (7, TType.BOOL, 'is985', None, None, ), # 7
    (8, TType.BOOL, 'is211', None, None, ), # 8
    (9, TType.LIST, 'schDiplomaNameList', (TType.STRING,None), None, ), # 9
    (10, TType.LIST, 'diplomaList', (TType.I32,None), None, ), # 10
  )

  def __init__(self, schId=None, schName=None, provinceId=None, cityId=None, intro=None, schType=None, is985=None, is211=None, schDiplomaNameList=None, diplomaList=None,):
    self.schId = schId
    self.schName = schName
    self.provinceId = provinceId
    self.cityId = cityId
    self.intro = intro
    self.schType = schType
    self.is985 = is985
    self.is211 = is211
    self.schDiplomaNameList = schDiplomaNameList
    self.diplomaList = diplomaList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.schName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.provinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.cityId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.intro = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.schType = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.is985 = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.is211 = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.schDiplomaNameList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString().decode('utf-8')
            self.schDiplomaNameList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.diplomaList = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI32();
            self.diplomaList.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SchIdInfo')
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 1)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schName is not None:
      oprot.writeFieldBegin('schName', TType.STRING, 2)
      oprot.writeString(self.schName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.provinceId is not None:
      oprot.writeFieldBegin('provinceId', TType.STRING, 3)
      oprot.writeString(self.provinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cityId is not None:
      oprot.writeFieldBegin('cityId', TType.STRING, 4)
      oprot.writeString(self.cityId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.intro is not None:
      oprot.writeFieldBegin('intro', TType.STRING, 5)
      oprot.writeString(self.intro.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schType is not None:
      oprot.writeFieldBegin('schType', TType.STRING, 6)
      oprot.writeString(self.schType.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.is985 is not None:
      oprot.writeFieldBegin('is985', TType.BOOL, 7)
      oprot.writeBool(self.is985)
      oprot.writeFieldEnd()
    if self.is211 is not None:
      oprot.writeFieldBegin('is211', TType.BOOL, 8)
      oprot.writeBool(self.is211)
      oprot.writeFieldEnd()
    if self.schDiplomaNameList is not None:
      oprot.writeFieldBegin('schDiplomaNameList', TType.LIST, 9)
      oprot.writeListBegin(TType.STRING, len(self.schDiplomaNameList))
      for iter12 in self.schDiplomaNameList:
        oprot.writeString(iter12.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.diplomaList is not None:
      oprot.writeFieldBegin('diplomaList', TType.LIST, 10)
      oprot.writeListBegin(TType.I32, len(self.diplomaList))
      for iter13 in self.diplomaList:
        oprot.writeI32(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.schName)
    value = (value * 31) ^ hash(self.provinceId)
    value = (value * 31) ^ hash(self.cityId)
    value = (value * 31) ^ hash(self.intro)
    value = (value * 31) ^ hash(self.schType)
    value = (value * 31) ^ hash(self.is985)
    value = (value * 31) ^ hash(self.is211)
    value = (value * 31) ^ hash(self.schDiplomaNameList)
    value = (value * 31) ^ hash(self.diplomaList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MajorIdInfo(object):
  """
  Attributes:
   - majorId
   - majorName
   - majorCate
   - majorSecondCate
   - majorIntro
   - majorCode
   - diploma
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'majorId', None, None, ), # 1
    (2, TType.STRING, 'majorName', None, None, ), # 2
    (3, TType.STRING, 'majorCate', None, None, ), # 3
    (4, TType.STRING, 'majorSecondCate', None, None, ), # 4
    (5, TType.STRING, 'majorIntro', None, None, ), # 5
    (6, TType.STRING, 'majorCode', None, None, ), # 6
    (7, TType.I32, 'diploma', None, None, ), # 7
  )

  def __init__(self, majorId=None, majorName=None, majorCate=None, majorSecondCate=None, majorIntro=None, majorCode=None, diploma=None,):
    self.majorId = majorId
    self.majorName = majorName
    self.majorCate = majorCate
    self.majorSecondCate = majorSecondCate
    self.majorIntro = majorIntro
    self.majorCode = majorCode
    self.diploma = diploma

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.majorId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.majorName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.majorCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.majorSecondCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.majorIntro = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.majorCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.diploma = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MajorIdInfo')
    if self.majorId is not None:
      oprot.writeFieldBegin('majorId', TType.STRING, 1)
      oprot.writeString(self.majorId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorName is not None:
      oprot.writeFieldBegin('majorName', TType.STRING, 2)
      oprot.writeString(self.majorName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorCate is not None:
      oprot.writeFieldBegin('majorCate', TType.STRING, 3)
      oprot.writeString(self.majorCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorSecondCate is not None:
      oprot.writeFieldBegin('majorSecondCate', TType.STRING, 4)
      oprot.writeString(self.majorSecondCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorIntro is not None:
      oprot.writeFieldBegin('majorIntro', TType.STRING, 5)
      oprot.writeString(self.majorIntro.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorCode is not None:
      oprot.writeFieldBegin('majorCode', TType.STRING, 6)
      oprot.writeString(self.majorCode.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.diploma is not None:
      oprot.writeFieldBegin('diploma', TType.I32, 7)
      oprot.writeI32(self.diploma)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.majorId)
    value = (value * 31) ^ hash(self.majorName)
    value = (value * 31) ^ hash(self.majorCate)
    value = (value * 31) ^ hash(self.majorSecondCate)
    value = (value * 31) ^ hash(self.majorIntro)
    value = (value * 31) ^ hash(self.majorCode)
    value = (value * 31) ^ hash(self.diploma)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SchMajorIdInfo(object):
  """
  Attributes:
   - schId
   - majorId
   - intro
   - courseList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'schId', None, None, ), # 1
    (2, TType.STRING, 'majorId', None, None, ), # 2
    (3, TType.STRING, 'intro', None, None, ), # 3
    (4, TType.LIST, 'courseList', (TType.STRING,None), None, ), # 4
  )

  def __init__(self, schId=None, majorId=None, intro=None, courseList=None,):
    self.schId = schId
    self.majorId = majorId
    self.intro = intro
    self.courseList = courseList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.majorId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.intro = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.courseList = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString().decode('utf-8')
            self.courseList.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SchMajorIdInfo')
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 1)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorId is not None:
      oprot.writeFieldBegin('majorId', TType.STRING, 2)
      oprot.writeString(self.majorId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.intro is not None:
      oprot.writeFieldBegin('intro', TType.STRING, 3)
      oprot.writeString(self.intro.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.courseList is not None:
      oprot.writeFieldBegin('courseList', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.courseList))
      for iter20 in self.courseList:
        oprot.writeString(iter20.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.majorId)
    value = (value * 31) ^ hash(self.intro)
    value = (value * 31) ^ hash(self.courseList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SchBatch(object):
  """
  Attributes:
   - fromProvinceId
   - schId
   - diploma
   - wenliType
   - batch
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fromProvinceId', None, None, ), # 1
    (2, TType.STRING, 'schId', None, None, ), # 2
    (3, TType.I32, 'diploma', None, None, ), # 3
    (4, TType.I32, 'wenliType', None, None, ), # 4
    (5, TType.I32, 'batch', None, None, ), # 5
  )

  def __init__(self, fromProvinceId=None, schId=None, diploma=None, wenliType=None, batch=None,):
    self.fromProvinceId = fromProvinceId
    self.schId = schId
    self.diploma = diploma
    self.wenliType = wenliType
    self.batch = batch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fromProvinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.diploma = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.wenliType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.batch = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SchBatch')
    if self.fromProvinceId is not None:
      oprot.writeFieldBegin('fromProvinceId', TType.STRING, 1)
      oprot.writeString(self.fromProvinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 2)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.diploma is not None:
      oprot.writeFieldBegin('diploma', TType.I32, 3)
      oprot.writeI32(self.diploma)
      oprot.writeFieldEnd()
    if self.wenliType is not None:
      oprot.writeFieldBegin('wenliType', TType.I32, 4)
      oprot.writeI32(self.wenliType)
      oprot.writeFieldEnd()
    if self.batch is not None:
      oprot.writeFieldBegin('batch', TType.I32, 5)
      oprot.writeI32(self.batch)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fromProvinceId)
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.diploma)
    value = (value * 31) ^ hash(self.wenliType)
    value = (value * 31) ^ hash(self.batch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
