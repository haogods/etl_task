# -*- coding:utf8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ipin.rpc.common.ttypes
import ipin.rpc.edu.commontype.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class SchStatRankInfo(object):
  """
  Attributes:
   - totalRankName
   - totalRankRatio
   - totalRankIndex
   - salaryRankRatio
   - salaryRankIndex
   - popularityRankRatio
   - popularityRankIndex
   - workStableRank
   - salary5Year
   - salary5YearSampleCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'totalRankName', None, None, ), # 1
    (2, TType.DOUBLE, 'totalRankRatio', None, None, ), # 2
    (3, TType.I32, 'totalRankIndex', None, None, ), # 3
    (4, TType.DOUBLE, 'salaryRankRatio', None, None, ), # 4
    (5, TType.I32, 'salaryRankIndex', None, None, ), # 5
    (6, TType.DOUBLE, 'popularityRankRatio', None, None, ), # 6
    (7, TType.I32, 'popularityRankIndex', None, None, ), # 7
    (8, TType.DOUBLE, 'workStableRank', None, None, ), # 8
    (9, TType.I32, 'salary5Year', None, None, ), # 9
    (10, TType.I32, 'salary5YearSampleCount', None, None, ), # 10
  )

  def __init__(self, totalRankName=None, totalRankRatio=None, totalRankIndex=None, salaryRankRatio=None, salaryRankIndex=None, popularityRankRatio=None, popularityRankIndex=None, workStableRank=None, salary5Year=None, salary5YearSampleCount=None,):
    self.totalRankName = totalRankName
    self.totalRankRatio = totalRankRatio
    self.totalRankIndex = totalRankIndex
    self.salaryRankRatio = salaryRankRatio
    self.salaryRankIndex = salaryRankIndex
    self.popularityRankRatio = popularityRankRatio
    self.popularityRankIndex = popularityRankIndex
    self.workStableRank = workStableRank
    self.salary5Year = salary5Year
    self.salary5YearSampleCount = salary5YearSampleCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.totalRankName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.totalRankRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.totalRankIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.salaryRankRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.salaryRankIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.popularityRankRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.popularityRankIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.workStableRank = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.salary5Year = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.salary5YearSampleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SchStatRankInfo')
    if self.totalRankName is not None:
      oprot.writeFieldBegin('totalRankName', TType.STRING, 1)
      oprot.writeString(self.totalRankName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.totalRankRatio is not None:
      oprot.writeFieldBegin('totalRankRatio', TType.DOUBLE, 2)
      oprot.writeDouble(self.totalRankRatio)
      oprot.writeFieldEnd()
    if self.totalRankIndex is not None:
      oprot.writeFieldBegin('totalRankIndex', TType.I32, 3)
      oprot.writeI32(self.totalRankIndex)
      oprot.writeFieldEnd()
    if self.salaryRankRatio is not None:
      oprot.writeFieldBegin('salaryRankRatio', TType.DOUBLE, 4)
      oprot.writeDouble(self.salaryRankRatio)
      oprot.writeFieldEnd()
    if self.salaryRankIndex is not None:
      oprot.writeFieldBegin('salaryRankIndex', TType.I32, 5)
      oprot.writeI32(self.salaryRankIndex)
      oprot.writeFieldEnd()
    if self.popularityRankRatio is not None:
      oprot.writeFieldBegin('popularityRankRatio', TType.DOUBLE, 6)
      oprot.writeDouble(self.popularityRankRatio)
      oprot.writeFieldEnd()
    if self.popularityRankIndex is not None:
      oprot.writeFieldBegin('popularityRankIndex', TType.I32, 7)
      oprot.writeI32(self.popularityRankIndex)
      oprot.writeFieldEnd()
    if self.workStableRank is not None:
      oprot.writeFieldBegin('workStableRank', TType.DOUBLE, 8)
      oprot.writeDouble(self.workStableRank)
      oprot.writeFieldEnd()
    if self.salary5Year is not None:
      oprot.writeFieldBegin('salary5Year', TType.I32, 9)
      oprot.writeI32(self.salary5Year)
      oprot.writeFieldEnd()
    if self.salary5YearSampleCount is not None:
      oprot.writeFieldBegin('salary5YearSampleCount', TType.I32, 10)
      oprot.writeI32(self.salary5YearSampleCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.totalRankName)
    value = (value * 31) ^ hash(self.totalRankRatio)
    value = (value * 31) ^ hash(self.totalRankIndex)
    value = (value * 31) ^ hash(self.salaryRankRatio)
    value = (value * 31) ^ hash(self.salaryRankIndex)
    value = (value * 31) ^ hash(self.popularityRankRatio)
    value = (value * 31) ^ hash(self.popularityRankIndex)
    value = (value * 31) ^ hash(self.workStableRank)
    value = (value * 31) ^ hash(self.salary5Year)
    value = (value * 31) ^ hash(self.salary5YearSampleCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SchMajorStatRankInfo(object):
  """
  Attributes:
   - salaryRankRatio
   - workStableRank
   - industryGiniRankRatio
   - jobCateGiniRankRatio
   - salary5Year
   - salary5YearSampleCount
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    (8, TType.DOUBLE, 'salaryRankRatio', None, None, ), # 8
    (9, TType.DOUBLE, 'workStableRank', None, None, ), # 9
    (10, TType.DOUBLE, 'industryGiniRankRatio', None, None, ), # 10
    (11, TType.DOUBLE, 'jobCateGiniRankRatio', None, None, ), # 11
    (12, TType.I32, 'salary5Year', None, None, ), # 12
    (13, TType.I32, 'salary5YearSampleCount', None, None, ), # 13
  )

  def __init__(self, salaryRankRatio=None, workStableRank=None, industryGiniRankRatio=None, jobCateGiniRankRatio=None, salary5Year=None, salary5YearSampleCount=None,):
    self.salaryRankRatio = salaryRankRatio
    self.workStableRank = workStableRank
    self.industryGiniRankRatio = industryGiniRankRatio
    self.jobCateGiniRankRatio = jobCateGiniRankRatio
    self.salary5Year = salary5Year
    self.salary5YearSampleCount = salary5YearSampleCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 8:
        if ftype == TType.DOUBLE:
          self.salaryRankRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.workStableRank = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.industryGiniRankRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.jobCateGiniRankRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.salary5Year = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.salary5YearSampleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SchMajorStatRankInfo')
    if self.salaryRankRatio is not None:
      oprot.writeFieldBegin('salaryRankRatio', TType.DOUBLE, 8)
      oprot.writeDouble(self.salaryRankRatio)
      oprot.writeFieldEnd()
    if self.workStableRank is not None:
      oprot.writeFieldBegin('workStableRank', TType.DOUBLE, 9)
      oprot.writeDouble(self.workStableRank)
      oprot.writeFieldEnd()
    if self.industryGiniRankRatio is not None:
      oprot.writeFieldBegin('industryGiniRankRatio', TType.DOUBLE, 10)
      oprot.writeDouble(self.industryGiniRankRatio)
      oprot.writeFieldEnd()
    if self.jobCateGiniRankRatio is not None:
      oprot.writeFieldBegin('jobCateGiniRankRatio', TType.DOUBLE, 11)
      oprot.writeDouble(self.jobCateGiniRankRatio)
      oprot.writeFieldEnd()
    if self.salary5Year is not None:
      oprot.writeFieldBegin('salary5Year', TType.I32, 12)
      oprot.writeI32(self.salary5Year)
      oprot.writeFieldEnd()
    if self.salary5YearSampleCount is not None:
      oprot.writeFieldBegin('salary5YearSampleCount', TType.I32, 13)
      oprot.writeI32(self.salary5YearSampleCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.salaryRankRatio)
    value = (value * 31) ^ hash(self.workStableRank)
    value = (value * 31) ^ hash(self.industryGiniRankRatio)
    value = (value * 31) ^ hash(self.jobCateGiniRankRatio)
    value = (value * 31) ^ hash(self.salary5Year)
    value = (value * 31) ^ hash(self.salary5YearSampleCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MajorRankInfo(object):
  """
  Attributes:
   - salaryRankRatio
   - workStableRank
   - industryGiniRankRatio
   - jobCateGiniRankRatio
   - salary5Year
   - salary5YearSampleCount
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    (8, TType.DOUBLE, 'salaryRankRatio', None, None, ), # 8
    (9, TType.DOUBLE, 'workStableRank', None, None, ), # 9
    (10, TType.DOUBLE, 'industryGiniRankRatio', None, None, ), # 10
    (11, TType.DOUBLE, 'jobCateGiniRankRatio', None, None, ), # 11
    (12, TType.I32, 'salary5Year', None, None, ), # 12
    (13, TType.I32, 'salary5YearSampleCount', None, None, ), # 13
  )

  def __init__(self, salaryRankRatio=None, workStableRank=None, industryGiniRankRatio=None, jobCateGiniRankRatio=None, salary5Year=None, salary5YearSampleCount=None,):
    self.salaryRankRatio = salaryRankRatio
    self.workStableRank = workStableRank
    self.industryGiniRankRatio = industryGiniRankRatio
    self.jobCateGiniRankRatio = jobCateGiniRankRatio
    self.salary5Year = salary5Year
    self.salary5YearSampleCount = salary5YearSampleCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 8:
        if ftype == TType.DOUBLE:
          self.salaryRankRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.workStableRank = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.industryGiniRankRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.jobCateGiniRankRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.salary5Year = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.salary5YearSampleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MajorRankInfo')
    if self.salaryRankRatio is not None:
      oprot.writeFieldBegin('salaryRankRatio', TType.DOUBLE, 8)
      oprot.writeDouble(self.salaryRankRatio)
      oprot.writeFieldEnd()
    if self.workStableRank is not None:
      oprot.writeFieldBegin('workStableRank', TType.DOUBLE, 9)
      oprot.writeDouble(self.workStableRank)
      oprot.writeFieldEnd()
    if self.industryGiniRankRatio is not None:
      oprot.writeFieldBegin('industryGiniRankRatio', TType.DOUBLE, 10)
      oprot.writeDouble(self.industryGiniRankRatio)
      oprot.writeFieldEnd()
    if self.jobCateGiniRankRatio is not None:
      oprot.writeFieldBegin('jobCateGiniRankRatio', TType.DOUBLE, 11)
      oprot.writeDouble(self.jobCateGiniRankRatio)
      oprot.writeFieldEnd()
    if self.salary5Year is not None:
      oprot.writeFieldBegin('salary5Year', TType.I32, 12)
      oprot.writeI32(self.salary5Year)
      oprot.writeFieldEnd()
    if self.salary5YearSampleCount is not None:
      oprot.writeFieldBegin('salary5YearSampleCount', TType.I32, 13)
      oprot.writeI32(self.salary5YearSampleCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.salaryRankRatio)
    value = (value * 31) ^ hash(self.workStableRank)
    value = (value * 31) ^ hash(self.industryGiniRankRatio)
    value = (value * 31) ^ hash(self.jobCateGiniRankRatio)
    value = (value * 31) ^ hash(self.salary5Year)
    value = (value * 31) ^ hash(self.salary5YearSampleCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GenderInfo(object):
  """
  Attributes:
   - maleSampleCount
   - femaleSampleCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'maleSampleCount', None, None, ), # 1
    (2, TType.I32, 'femaleSampleCount', None, None, ), # 2
  )

  def __init__(self, maleSampleCount=None, femaleSampleCount=None,):
    self.maleSampleCount = maleSampleCount
    self.femaleSampleCount = femaleSampleCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.maleSampleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.femaleSampleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GenderInfo')
    if self.maleSampleCount is not None:
      oprot.writeFieldBegin('maleSampleCount', TType.I32, 1)
      oprot.writeI32(self.maleSampleCount)
      oprot.writeFieldEnd()
    if self.femaleSampleCount is not None:
      oprot.writeFieldBegin('femaleSampleCount', TType.I32, 2)
      oprot.writeI32(self.femaleSampleCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.maleSampleCount)
    value = (value * 31) ^ hash(self.femaleSampleCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IndustryDistInfo(object):
  """
  Attributes:
   - industryId
   - sampleCount
   - ratio
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'industryId', None, None, ), # 1
    (2, TType.I32, 'sampleCount', None, None, ), # 2
    (3, TType.DOUBLE, 'ratio', None, None, ), # 3
  )

  def __init__(self, industryId=None, sampleCount=None, ratio=None,):
    self.industryId = industryId
    self.sampleCount = sampleCount
    self.ratio = ratio

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.industryId = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sampleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.ratio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IndustryDistInfo')
    if self.industryId is not None:
      oprot.writeFieldBegin('industryId', TType.I16, 1)
      oprot.writeI16(self.industryId)
      oprot.writeFieldEnd()
    if self.sampleCount is not None:
      oprot.writeFieldBegin('sampleCount', TType.I32, 2)
      oprot.writeI32(self.sampleCount)
      oprot.writeFieldEnd()
    if self.ratio is not None:
      oprot.writeFieldBegin('ratio', TType.DOUBLE, 3)
      oprot.writeDouble(self.ratio)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.industryId)
    value = (value * 31) ^ hash(self.sampleCount)
    value = (value * 31) ^ hash(self.ratio)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SalaryDetailInfo(object):
  """
  Attributes:
   - yearAfterGraduate
   - salary
   - virtualSalary
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'yearAfterGraduate', None, None, ), # 1
    (2, TType.I32, 'salary', None, None, ), # 2
    (3, TType.BOOL, 'virtualSalary', None, None, ), # 3
  )

  def __init__(self, yearAfterGraduate=None, salary=None, virtualSalary=None,):
    self.yearAfterGraduate = yearAfterGraduate
    self.salary = salary
    self.virtualSalary = virtualSalary

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.yearAfterGraduate = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.salary = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.virtualSalary = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SalaryDetailInfo')
    if self.yearAfterGraduate is not None:
      oprot.writeFieldBegin('yearAfterGraduate', TType.I32, 1)
      oprot.writeI32(self.yearAfterGraduate)
      oprot.writeFieldEnd()
    if self.salary is not None:
      oprot.writeFieldBegin('salary', TType.I32, 2)
      oprot.writeI32(self.salary)
      oprot.writeFieldEnd()
    if self.virtualSalary is not None:
      oprot.writeFieldBegin('virtualSalary', TType.BOOL, 3)
      oprot.writeBool(self.virtualSalary)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.yearAfterGraduate)
    value = (value * 31) ^ hash(self.salary)
    value = (value * 31) ^ hash(self.virtualSalary)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CityDistInfo(object):
  """
  Attributes:
   - cityId
   - sampleCount
   - ratio
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cityId', None, None, ), # 1
    (2, TType.I32, 'sampleCount', None, None, ), # 2
    (3, TType.DOUBLE, 'ratio', None, None, ), # 3
  )

  def __init__(self, cityId=None, sampleCount=None, ratio=None,):
    self.cityId = cityId
    self.sampleCount = sampleCount
    self.ratio = ratio

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cityId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sampleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.ratio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CityDistInfo')
    if self.cityId is not None:
      oprot.writeFieldBegin('cityId', TType.STRING, 1)
      oprot.writeString(self.cityId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sampleCount is not None:
      oprot.writeFieldBegin('sampleCount', TType.I32, 2)
      oprot.writeI32(self.sampleCount)
      oprot.writeFieldEnd()
    if self.ratio is not None:
      oprot.writeFieldBegin('ratio', TType.DOUBLE, 3)
      oprot.writeDouble(self.ratio)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cityId)
    value = (value * 31) ^ hash(self.sampleCount)
    value = (value * 31) ^ hash(self.ratio)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JobSecondCateInfo(object):
  """
  Attributes:
   - jobSecondCate
   - sampleCount
   - ratio
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobSecondCate', None, None, ), # 1
    (2, TType.I32, 'sampleCount', None, None, ), # 2
    (3, TType.DOUBLE, 'ratio', None, None, ), # 3
  )

  def __init__(self, jobSecondCate=None, sampleCount=None, ratio=None,):
    self.jobSecondCate = jobSecondCate
    self.sampleCount = sampleCount
    self.ratio = ratio

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobSecondCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sampleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.ratio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JobSecondCateInfo')
    if self.jobSecondCate is not None:
      oprot.writeFieldBegin('jobSecondCate', TType.STRING, 1)
      oprot.writeString(self.jobSecondCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sampleCount is not None:
      oprot.writeFieldBegin('sampleCount', TType.I32, 2)
      oprot.writeI32(self.sampleCount)
      oprot.writeFieldEnd()
    if self.ratio is not None:
      oprot.writeFieldBegin('ratio', TType.DOUBLE, 3)
      oprot.writeDouble(self.ratio)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobSecondCate)
    value = (value * 31) ^ hash(self.sampleCount)
    value = (value * 31) ^ hash(self.ratio)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SchStat(object):
  """
  Attributes:
   - schId
   - sampleCount
   - rankInfo
   - genderInfo
   - industryDistList
   - salaryList
   - cityDistList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'schId', None, None, ), # 1
    (2, TType.I32, 'sampleCount', None, None, ), # 2
    None, # 3
    None, # 4
    (5, TType.STRUCT, 'rankInfo', (SchStatRankInfo, SchStatRankInfo.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'genderInfo', (GenderInfo, GenderInfo.thrift_spec), None, ), # 6
    (7, TType.LIST, 'industryDistList', (TType.STRUCT,(IndustryDistInfo, IndustryDistInfo.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'salaryList', (TType.STRUCT,(SalaryDetailInfo, SalaryDetailInfo.thrift_spec)), None, ), # 8
    (9, TType.LIST, 'cityDistList', (TType.STRUCT,(CityDistInfo, CityDistInfo.thrift_spec)), None, ), # 9
  )

  def __init__(self, schId=None, sampleCount=None, rankInfo=None, genderInfo=None, industryDistList=None, salaryList=None, cityDistList=None,):
    self.schId = schId
    self.sampleCount = sampleCount
    self.rankInfo = rankInfo
    self.genderInfo = genderInfo
    self.industryDistList = industryDistList
    self.salaryList = salaryList
    self.cityDistList = cityDistList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sampleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.rankInfo = SchStatRankInfo()
          self.rankInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.genderInfo = GenderInfo()
          self.genderInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.industryDistList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = IndustryDistInfo()
            _elem5.read(iprot)
            self.industryDistList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.salaryList = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = SalaryDetailInfo()
            _elem11.read(iprot)
            self.salaryList.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.cityDistList = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = CityDistInfo()
            _elem17.read(iprot)
            self.cityDistList.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SchStat')
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 1)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sampleCount is not None:
      oprot.writeFieldBegin('sampleCount', TType.I32, 2)
      oprot.writeI32(self.sampleCount)
      oprot.writeFieldEnd()
    if self.rankInfo is not None:
      oprot.writeFieldBegin('rankInfo', TType.STRUCT, 5)
      self.rankInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.genderInfo is not None:
      oprot.writeFieldBegin('genderInfo', TType.STRUCT, 6)
      self.genderInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.industryDistList is not None:
      oprot.writeFieldBegin('industryDistList', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.industryDistList))
      for iter18 in self.industryDistList:
        iter18.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.salaryList is not None:
      oprot.writeFieldBegin('salaryList', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.salaryList))
      for iter19 in self.salaryList:
        iter19.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cityDistList is not None:
      oprot.writeFieldBegin('cityDistList', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.cityDistList))
      for iter20 in self.cityDistList:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.sampleCount)
    value = (value * 31) ^ hash(self.rankInfo)
    value = (value * 31) ^ hash(self.genderInfo)
    value = (value * 31) ^ hash(self.industryDistList)
    value = (value * 31) ^ hash(self.salaryList)
    value = (value * 31) ^ hash(self.cityDistList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MajorStat(object):
  """
  Attributes:
   - majorId
   - sampleCount
   - rankInfo
   - genderInfo
   - industryDistList
   - salaryList
   - cityDistList
   - jobSecondCateList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'majorId', None, None, ), # 1
    (2, TType.I32, 'sampleCount', None, None, ), # 2
    None, # 3
    None, # 4
    (5, TType.STRUCT, 'rankInfo', (MajorRankInfo, MajorRankInfo.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'genderInfo', (GenderInfo, GenderInfo.thrift_spec), None, ), # 6
    (7, TType.LIST, 'industryDistList', (TType.STRUCT,(IndustryDistInfo, IndustryDistInfo.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'salaryList', (TType.STRUCT,(SalaryDetailInfo, SalaryDetailInfo.thrift_spec)), None, ), # 8
    (9, TType.LIST, 'cityDistList', (TType.STRUCT,(CityDistInfo, CityDistInfo.thrift_spec)), None, ), # 9
    (10, TType.LIST, 'jobSecondCateList', (TType.STRUCT,(JobSecondCateInfo, JobSecondCateInfo.thrift_spec)), None, ), # 10
  )

  def __init__(self, majorId=None, sampleCount=None, rankInfo=None, genderInfo=None, industryDistList=None, salaryList=None, cityDistList=None, jobSecondCateList=None,):
    self.majorId = majorId
    self.sampleCount = sampleCount
    self.rankInfo = rankInfo
    self.genderInfo = genderInfo
    self.industryDistList = industryDistList
    self.salaryList = salaryList
    self.cityDistList = cityDistList
    self.jobSecondCateList = jobSecondCateList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.majorId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sampleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.rankInfo = MajorRankInfo()
          self.rankInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.genderInfo = GenderInfo()
          self.genderInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.industryDistList = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = IndustryDistInfo()
            _elem26.read(iprot)
            self.industryDistList.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.salaryList = []
          (_etype30, _size27) = iprot.readListBegin()
          for _i31 in xrange(_size27):
            _elem32 = SalaryDetailInfo()
            _elem32.read(iprot)
            self.salaryList.append(_elem32)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.cityDistList = []
          (_etype36, _size33) = iprot.readListBegin()
          for _i37 in xrange(_size33):
            _elem38 = CityDistInfo()
            _elem38.read(iprot)
            self.cityDistList.append(_elem38)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.jobSecondCateList = []
          (_etype42, _size39) = iprot.readListBegin()
          for _i43 in xrange(_size39):
            _elem44 = JobSecondCateInfo()
            _elem44.read(iprot)
            self.jobSecondCateList.append(_elem44)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MajorStat')
    if self.majorId is not None:
      oprot.writeFieldBegin('majorId', TType.STRING, 1)
      oprot.writeString(self.majorId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sampleCount is not None:
      oprot.writeFieldBegin('sampleCount', TType.I32, 2)
      oprot.writeI32(self.sampleCount)
      oprot.writeFieldEnd()
    if self.rankInfo is not None:
      oprot.writeFieldBegin('rankInfo', TType.STRUCT, 5)
      self.rankInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.genderInfo is not None:
      oprot.writeFieldBegin('genderInfo', TType.STRUCT, 6)
      self.genderInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.industryDistList is not None:
      oprot.writeFieldBegin('industryDistList', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.industryDistList))
      for iter45 in self.industryDistList:
        iter45.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.salaryList is not None:
      oprot.writeFieldBegin('salaryList', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.salaryList))
      for iter46 in self.salaryList:
        iter46.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cityDistList is not None:
      oprot.writeFieldBegin('cityDistList', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.cityDistList))
      for iter47 in self.cityDistList:
        iter47.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.jobSecondCateList is not None:
      oprot.writeFieldBegin('jobSecondCateList', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.jobSecondCateList))
      for iter48 in self.jobSecondCateList:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.majorId)
    value = (value * 31) ^ hash(self.sampleCount)
    value = (value * 31) ^ hash(self.rankInfo)
    value = (value * 31) ^ hash(self.genderInfo)
    value = (value * 31) ^ hash(self.industryDistList)
    value = (value * 31) ^ hash(self.salaryList)
    value = (value * 31) ^ hash(self.cityDistList)
    value = (value * 31) ^ hash(self.jobSecondCateList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MajorSecondCateStat(object):
  """
  Attributes:
   - majorSecondCate
   - sampleCount
   - rankInfo
   - genderInfo
   - industryDistList
   - salaryList
   - cityDistList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'majorSecondCate', None, None, ), # 1
    (2, TType.I32, 'sampleCount', None, None, ), # 2
    None, # 3
    None, # 4
    (5, TType.STRUCT, 'rankInfo', (MajorRankInfo, MajorRankInfo.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'genderInfo', (GenderInfo, GenderInfo.thrift_spec), None, ), # 6
    (7, TType.LIST, 'industryDistList', (TType.STRUCT,(IndustryDistInfo, IndustryDistInfo.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'salaryList', (TType.STRUCT,(SalaryDetailInfo, SalaryDetailInfo.thrift_spec)), None, ), # 8
    (9, TType.LIST, 'cityDistList', (TType.STRUCT,(CityDistInfo, CityDistInfo.thrift_spec)), None, ), # 9
  )

  def __init__(self, majorSecondCate=None, sampleCount=None, rankInfo=None, genderInfo=None, industryDistList=None, salaryList=None, cityDistList=None,):
    self.majorSecondCate = majorSecondCate
    self.sampleCount = sampleCount
    self.rankInfo = rankInfo
    self.genderInfo = genderInfo
    self.industryDistList = industryDistList
    self.salaryList = salaryList
    self.cityDistList = cityDistList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.majorSecondCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sampleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.rankInfo = MajorRankInfo()
          self.rankInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.genderInfo = GenderInfo()
          self.genderInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.industryDistList = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = IndustryDistInfo()
            _elem54.read(iprot)
            self.industryDistList.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.salaryList = []
          (_etype58, _size55) = iprot.readListBegin()
          for _i59 in xrange(_size55):
            _elem60 = SalaryDetailInfo()
            _elem60.read(iprot)
            self.salaryList.append(_elem60)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.cityDistList = []
          (_etype64, _size61) = iprot.readListBegin()
          for _i65 in xrange(_size61):
            _elem66 = CityDistInfo()
            _elem66.read(iprot)
            self.cityDistList.append(_elem66)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MajorSecondCateStat')
    if self.majorSecondCate is not None:
      oprot.writeFieldBegin('majorSecondCate', TType.STRING, 1)
      oprot.writeString(self.majorSecondCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sampleCount is not None:
      oprot.writeFieldBegin('sampleCount', TType.I32, 2)
      oprot.writeI32(self.sampleCount)
      oprot.writeFieldEnd()
    if self.rankInfo is not None:
      oprot.writeFieldBegin('rankInfo', TType.STRUCT, 5)
      self.rankInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.genderInfo is not None:
      oprot.writeFieldBegin('genderInfo', TType.STRUCT, 6)
      self.genderInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.industryDistList is not None:
      oprot.writeFieldBegin('industryDistList', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.industryDistList))
      for iter67 in self.industryDistList:
        iter67.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.salaryList is not None:
      oprot.writeFieldBegin('salaryList', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.salaryList))
      for iter68 in self.salaryList:
        iter68.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cityDistList is not None:
      oprot.writeFieldBegin('cityDistList', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.cityDistList))
      for iter69 in self.cityDistList:
        iter69.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.majorSecondCate)
    value = (value * 31) ^ hash(self.sampleCount)
    value = (value * 31) ^ hash(self.rankInfo)
    value = (value * 31) ^ hash(self.genderInfo)
    value = (value * 31) ^ hash(self.industryDistList)
    value = (value * 31) ^ hash(self.salaryList)
    value = (value * 31) ^ hash(self.cityDistList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SchMajorStat(object):
  """
  Attributes:
   - schId
   - majorId
   - sampleCount
   - rankInfo
   - genderInfo
   - industryDistList
   - salaryList
   - cityDistList
   - jobSecondCateList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'schId', None, None, ), # 1
    (2, TType.STRING, 'majorId', None, None, ), # 2
    (3, TType.I32, 'sampleCount', None, None, ), # 3
    None, # 4
    (5, TType.STRUCT, 'rankInfo', (SchMajorStatRankInfo, SchMajorStatRankInfo.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'genderInfo', (GenderInfo, GenderInfo.thrift_spec), None, ), # 6
    (7, TType.LIST, 'industryDistList', (TType.STRUCT,(IndustryDistInfo, IndustryDistInfo.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'salaryList', (TType.STRUCT,(SalaryDetailInfo, SalaryDetailInfo.thrift_spec)), None, ), # 8
    (9, TType.LIST, 'cityDistList', (TType.STRUCT,(CityDistInfo, CityDistInfo.thrift_spec)), None, ), # 9
    (10, TType.LIST, 'jobSecondCateList', (TType.STRUCT,(JobSecondCateInfo, JobSecondCateInfo.thrift_spec)), None, ), # 10
  )

  def __init__(self, schId=None, majorId=None, sampleCount=None, rankInfo=None, genderInfo=None, industryDistList=None, salaryList=None, cityDistList=None, jobSecondCateList=None,):
    self.schId = schId
    self.majorId = majorId
    self.sampleCount = sampleCount
    self.rankInfo = rankInfo
    self.genderInfo = genderInfo
    self.industryDistList = industryDistList
    self.salaryList = salaryList
    self.cityDistList = cityDistList
    self.jobSecondCateList = jobSecondCateList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.majorId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sampleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.rankInfo = SchMajorStatRankInfo()
          self.rankInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.genderInfo = GenderInfo()
          self.genderInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.industryDistList = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = IndustryDistInfo()
            _elem75.read(iprot)
            self.industryDistList.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.salaryList = []
          (_etype79, _size76) = iprot.readListBegin()
          for _i80 in xrange(_size76):
            _elem81 = SalaryDetailInfo()
            _elem81.read(iprot)
            self.salaryList.append(_elem81)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.cityDistList = []
          (_etype85, _size82) = iprot.readListBegin()
          for _i86 in xrange(_size82):
            _elem87 = CityDistInfo()
            _elem87.read(iprot)
            self.cityDistList.append(_elem87)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.jobSecondCateList = []
          (_etype91, _size88) = iprot.readListBegin()
          for _i92 in xrange(_size88):
            _elem93 = JobSecondCateInfo()
            _elem93.read(iprot)
            self.jobSecondCateList.append(_elem93)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SchMajorStat')
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 1)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorId is not None:
      oprot.writeFieldBegin('majorId', TType.STRING, 2)
      oprot.writeString(self.majorId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sampleCount is not None:
      oprot.writeFieldBegin('sampleCount', TType.I32, 3)
      oprot.writeI32(self.sampleCount)
      oprot.writeFieldEnd()
    if self.rankInfo is not None:
      oprot.writeFieldBegin('rankInfo', TType.STRUCT, 5)
      self.rankInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.genderInfo is not None:
      oprot.writeFieldBegin('genderInfo', TType.STRUCT, 6)
      self.genderInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.industryDistList is not None:
      oprot.writeFieldBegin('industryDistList', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.industryDistList))
      for iter94 in self.industryDistList:
        iter94.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.salaryList is not None:
      oprot.writeFieldBegin('salaryList', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.salaryList))
      for iter95 in self.salaryList:
        iter95.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cityDistList is not None:
      oprot.writeFieldBegin('cityDistList', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.cityDistList))
      for iter96 in self.cityDistList:
        iter96.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.jobSecondCateList is not None:
      oprot.writeFieldBegin('jobSecondCateList', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.jobSecondCateList))
      for iter97 in self.jobSecondCateList:
        iter97.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.majorId)
    value = (value * 31) ^ hash(self.sampleCount)
    value = (value * 31) ^ hash(self.rankInfo)
    value = (value * 31) ^ hash(self.genderInfo)
    value = (value * 31) ^ hash(self.industryDistList)
    value = (value * 31) ^ hash(self.salaryList)
    value = (value * 31) ^ hash(self.cityDistList)
    value = (value * 31) ^ hash(self.jobSecondCateList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SchAreaStat(object):
  """
  Attributes:
   - locId
   - sampleCount
   - salaryList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'locId', None, None, ), # 1
    (2, TType.I32, 'sampleCount', None, None, ), # 2
    (3, TType.LIST, 'salaryList', (TType.STRUCT,(SalaryDetailInfo, SalaryDetailInfo.thrift_spec)), None, ), # 3
  )

  def __init__(self, locId=None, sampleCount=None, salaryList=None,):
    self.locId = locId
    self.sampleCount = sampleCount
    self.salaryList = salaryList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.locId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sampleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.salaryList = []
          (_etype101, _size98) = iprot.readListBegin()
          for _i102 in xrange(_size98):
            _elem103 = SalaryDetailInfo()
            _elem103.read(iprot)
            self.salaryList.append(_elem103)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SchAreaStat')
    if self.locId is not None:
      oprot.writeFieldBegin('locId', TType.STRING, 1)
      oprot.writeString(self.locId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sampleCount is not None:
      oprot.writeFieldBegin('sampleCount', TType.I32, 2)
      oprot.writeI32(self.sampleCount)
      oprot.writeFieldEnd()
    if self.salaryList is not None:
      oprot.writeFieldBegin('salaryList', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.salaryList))
      for iter104 in self.salaryList:
        iter104.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.locId)
    value = (value * 31) ^ hash(self.sampleCount)
    value = (value * 31) ^ hash(self.salaryList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
