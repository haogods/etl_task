# -*- coding:utf8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ipin.rpc.common.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class IncSegSource(object):
  FROM_JD = 1
  FROM_CV = 2

  _VALUES_TO_NAMES = {
    1: "FROM_JD",
    2: "FROM_CV",
  }

  _NAMES_TO_VALUES = {
    "FROM_JD": 1,
    "FROM_CV": 2,
  }

class IncIdType(object):
  INC_ID_INC = 1
  INC_ID_ALIAS = 2
  INC_ID_BLOC = 3

  _VALUES_TO_NAMES = {
    1: "INC_ID_INC",
    2: "INC_ID_ALIAS",
    3: "INC_ID_BLOC",
  }

  _NAMES_TO_VALUES = {
    "INC_ID_INC": 1,
    "INC_ID_ALIAS": 2,
    "INC_ID_BLOC": 3,
  }


class IncSegIdInfo(object):
  """
  Attributes:
   - incSegId
   - incSegName
   - incSegIndustryId
   - incSegSource
   - incSegType
   - incSegLoc
   - incSegWorkLoc
   - incSegFirm
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'incSegId', None, None, ), # 1
    (2, TType.STRING, 'incSegName', None, None, ), # 2
    (3, TType.I16, 'incSegIndustryId', None, None, ), # 3
    (4, TType.I32, 'incSegSource', None, None, ), # 4
    (5, TType.I16, 'incSegType', None, None, ), # 5
    (6, TType.STRING, 'incSegLoc', None, None, ), # 6
    (7, TType.STRING, 'incSegWorkLoc', None, None, ), # 7
    (8, TType.STRING, 'incSegFirm', None, None, ), # 8
  )

  def __init__(self, incSegId=None, incSegName=None, incSegIndustryId=None, incSegSource=None, incSegType=None, incSegLoc=None, incSegWorkLoc=None, incSegFirm=None,):
    self.incSegId = incSegId
    self.incSegName = incSegName
    self.incSegIndustryId = incSegIndustryId
    self.incSegSource = incSegSource
    self.incSegType = incSegType
    self.incSegLoc = incSegLoc
    self.incSegWorkLoc = incSegWorkLoc
    self.incSegFirm = incSegFirm

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.incSegId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.incSegName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.incSegIndustryId = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.incSegSource = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.incSegType = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.incSegLoc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.incSegWorkLoc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.incSegFirm = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IncSegIdInfo')
    if self.incSegId is not None:
      oprot.writeFieldBegin('incSegId', TType.STRING, 1)
      oprot.writeString(self.incSegId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incSegName is not None:
      oprot.writeFieldBegin('incSegName', TType.STRING, 2)
      oprot.writeString(self.incSegName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incSegIndustryId is not None:
      oprot.writeFieldBegin('incSegIndustryId', TType.I16, 3)
      oprot.writeI16(self.incSegIndustryId)
      oprot.writeFieldEnd()
    if self.incSegSource is not None:
      oprot.writeFieldBegin('incSegSource', TType.I32, 4)
      oprot.writeI32(self.incSegSource)
      oprot.writeFieldEnd()
    if self.incSegType is not None:
      oprot.writeFieldBegin('incSegType', TType.I16, 5)
      oprot.writeI16(self.incSegType)
      oprot.writeFieldEnd()
    if self.incSegLoc is not None:
      oprot.writeFieldBegin('incSegLoc', TType.STRING, 6)
      oprot.writeString(self.incSegLoc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incSegWorkLoc is not None:
      oprot.writeFieldBegin('incSegWorkLoc', TType.STRING, 7)
      oprot.writeString(self.incSegWorkLoc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incSegFirm is not None:
      oprot.writeFieldBegin('incSegFirm', TType.STRING, 8)
      oprot.writeString(self.incSegFirm.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.incSegId)
    value = (value * 31) ^ hash(self.incSegName)
    value = (value * 31) ^ hash(self.incSegIndustryId)
    value = (value * 31) ^ hash(self.incSegSource)
    value = (value * 31) ^ hash(self.incSegType)
    value = (value * 31) ^ hash(self.incSegLoc)
    value = (value * 31) ^ hash(self.incSegWorkLoc)
    value = (value * 31) ^ hash(self.incSegFirm)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IncIdInfo(object):
  """
  Attributes:
   - incId
   - incName
   - incIndustryId
   - incType
   - incLoc
   - incWorkLoc
   - incIdType
   - incFirm
   - incAliasId
   - incBlocId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'incId', None, None, ), # 1
    (2, TType.STRING, 'incName', None, None, ), # 2
    (3, TType.I16, 'incIndustryId', None, None, ), # 3
    (4, TType.I16, 'incType', None, None, ), # 4
    (5, TType.STRING, 'incLoc', None, None, ), # 5
    (6, TType.STRING, 'incWorkLoc', None, None, ), # 6
    (7, TType.I32, 'incIdType', None, None, ), # 7
    (8, TType.STRING, 'incFirm', None, None, ), # 8
    None, # 9
    (10, TType.STRING, 'incAliasId', None, None, ), # 10
    (11, TType.STRING, 'incBlocId', None, None, ), # 11
  )

  def __init__(self, incId=None, incName=None, incIndustryId=None, incType=None, incLoc=None, incWorkLoc=None, incIdType=None, incFirm=None, incAliasId=None, incBlocId=None,):
    self.incId = incId
    self.incName = incName
    self.incIndustryId = incIndustryId
    self.incType = incType
    self.incLoc = incLoc
    self.incWorkLoc = incWorkLoc
    self.incIdType = incIdType
    self.incFirm = incFirm
    self.incAliasId = incAliasId
    self.incBlocId = incBlocId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.incId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.incName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.incIndustryId = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.incType = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.incLoc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.incWorkLoc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.incIdType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.incFirm = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.incAliasId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.incBlocId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IncIdInfo')
    if self.incId is not None:
      oprot.writeFieldBegin('incId', TType.STRING, 1)
      oprot.writeString(self.incId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incName is not None:
      oprot.writeFieldBegin('incName', TType.STRING, 2)
      oprot.writeString(self.incName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incIndustryId is not None:
      oprot.writeFieldBegin('incIndustryId', TType.I16, 3)
      oprot.writeI16(self.incIndustryId)
      oprot.writeFieldEnd()
    if self.incType is not None:
      oprot.writeFieldBegin('incType', TType.I16, 4)
      oprot.writeI16(self.incType)
      oprot.writeFieldEnd()
    if self.incLoc is not None:
      oprot.writeFieldBegin('incLoc', TType.STRING, 5)
      oprot.writeString(self.incLoc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incWorkLoc is not None:
      oprot.writeFieldBegin('incWorkLoc', TType.STRING, 6)
      oprot.writeString(self.incWorkLoc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incIdType is not None:
      oprot.writeFieldBegin('incIdType', TType.I32, 7)
      oprot.writeI32(self.incIdType)
      oprot.writeFieldEnd()
    if self.incFirm is not None:
      oprot.writeFieldBegin('incFirm', TType.STRING, 8)
      oprot.writeString(self.incFirm.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incAliasId is not None:
      oprot.writeFieldBegin('incAliasId', TType.STRING, 10)
      oprot.writeString(self.incAliasId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incBlocId is not None:
      oprot.writeFieldBegin('incBlocId', TType.STRING, 11)
      oprot.writeString(self.incBlocId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.incId)
    value = (value * 31) ^ hash(self.incName)
    value = (value * 31) ^ hash(self.incIndustryId)
    value = (value * 31) ^ hash(self.incType)
    value = (value * 31) ^ hash(self.incLoc)
    value = (value * 31) ^ hash(self.incWorkLoc)
    value = (value * 31) ^ hash(self.incIdType)
    value = (value * 31) ^ hash(self.incFirm)
    value = (value * 31) ^ hash(self.incAliasId)
    value = (value * 31) ^ hash(self.incBlocId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
