#!/usr/bin/env python
# coding=utf-8

import sys,re,codecs
from bs4 import BeautifulSoup
from urllib2 import urlopen
from collections import OrderedDict
from base import CvTopParser
import os
reload(sys)
sys.setdefaultencoding('utf-8')


class CvParserZhiLian(CvTopParser):
    """
    对智联的简历进行解析
    """
    def __init__(self):

        CvTopParser.__init__(self)

        self.PAY = re.compile(u"(\d+[\s\-])?\d+元")
        self.UPDATETIME = re.compile("更新日期[:：\s](\d+年\d+月\d+日)")
        #self.ADDR = re.compile(u"现居住地[：:\s](\S+)")
        self.ADDR=re.compile(u"现居住地[：:\s]([^|]+)")



    def preprocess(self,htmlContent=None,fname=None,url=None):
        if url!=None:
            self.html= urlopen(url).read().decode('utf-8')
        elif htmlContent:
            self.html = htmlContent
        elif fname:
            self.html = codecs.open(fname,'rb','utf-8').read()
        else:
            raise Exception("input error")

        if re.search(u"已被(求职者)?删除|无法查看",self.html):
            raise Exception("error: input illegal cv ")

        self.soup = BeautifulSoup(self.html,"lxml")

        self.resume = self.soup.find('div',{"id":"resumeContentBody"})
        self.NONAME = 1
        self.jd_type = 0  # 第一种情况

        if not self.resume:
            self.resume = self.soup.find("div","resume-body-left")
            self.NONAME = 0
            self.jd_type = 1 # 第二种情况


        if not self.resume:
            # 针对简历预览例子－智联社招－王大力　直接网页保存的格式
            self.resume = self.soup.find("div","resumeBody")
            self.field_list = self.resume.find_all("h5")
            self.jd_type = 3   # 第三种情况

        else:
            self.field_list = self.resume.find_all("div","resume-preview-all")
            self.content = self.resume.get_text().strip()

        self.refresh()
        self.result["cvFrom"] = "zhilian"



    # 解析基本信息
    def regular_basic(self):

        res = OrderedDict()

        find_update_time = self.soup.find("strong",{"id":"resumeUpdateTime"})
        self.result["baseInfo"]["updateTime"] = find_update_time.get_text().strip() if find_update_time else ""

        find_cv_id = self.soup.find("div","resume-left-tips").find("span","resume-left-tips-id") if self.soup.find("div","resume-left-tips") else ""
        self.result["baseInfo"]["cvId"] = find_cv_id.get_text().strip()[3:] if find_cv_id else "None"

        if self.resume.find("div","summary-top"):
            base_info = self.resume.find("div","summary-top").get_text()
        else:
            base_info = self.resume.find("div","summary").get_text()

        self.base_html = base_info.strip()

        find_sex = self.SEX.search(base_info)
        self.result["baseInfo"]["gender"]= find_sex.group() if find_sex else ""

        find_age =  self.AGE.search(base_info)
        self.result["baseInfo"]["age"] = find_age.group() if find_age else ""

        find_dob = self.DOB.search(base_info)
        self.result["baseInfo"]["dob"] = find_dob.group(1) if find_dob else ""

        find_exp = self.EXP.search(base_info)
        self.result["baseInfo"]["nowWorkAge"] = find_exp.group() if find_exp else ""

        find_degree = self.DEGREE.search(base_info)
        self.result["baseInfo"]["nowDiploma"] = find_degree.group() if find_degree else ""

        find_marriage = self.MARRIAGE.search(base_info)
        self.result["baseInfo"]["marriage"] = find_marriage.group() if find_marriage else ""

        find_addr = self.ADDR.search(base_info)
        self.result["baseInfo"]["nowAddress"] = find_addr.group(1).strip() if find_addr else ""

        find_politic = self.POLITIC.search(base_info)
        self.result["baseInfo"]["nowPoliStatus"] = find_politic.group() if find_politic else u""

        find_hukou = self.HUKOU.search(base_info)
        self.result["baseInfo"]["nowHukou"] = find_hukou.group(1) if find_hukou else ""

        find_height = self.HEIGHT.search(base_info)
        self.result["baseInfo"]["height"] = find_height.group(1) if find_height else ""

        find_oversea = self.OVER_SEA.search(base_info)
        self.result["baseInfo"]["overSea"] = "1" if find_oversea else "0"





    # 求职意向
    def regular_expect(self):
        expsoup = ""
        for field in self.field_list:
            if field.find("h3") and re.search(u"求职意向",field.find("h3").get_text()):
                expsoup = field
                break
        self.expect_html = expsoup.get_text().strip() if expsoup else ""
        if expsoup:
            rows = expsoup.find_all("tr")
            for item in rows:
                if re.search(u"期望工作地",item.find("td").get_text()):
                    self.result["jobExp"]["expLocations"] = item.find("td").find_next().get_text()

                elif re.search(u"月薪|薪资|工资|薪酬",item.find("td").get_text()):
                    self.result["jobExp"]["expSalary"] = item.find("td").find_next().get_text()

                elif re.search(u"目前状况",item.find("td").get_text()):
                    self.result["jobExp"]["workStatus"] = item.find("td").find_next().get_text()

                elif re.search(u"期望工作性",item.find("td").get_text()):
                    self.result["jobExp"]["expJobTypes"] = item.find("td").find_next().get_text()

                elif re.search(u"期望(从事)?行业",item.find("td").get_text()):
                    self.result["jobExp"]["expIndustrys"] = item.find("td").find_next().get_text()

                elif re.search(u"期望(从事)?职[业位]",item.find("td").get_text()):
                    self.result["jobExp"]["expJobCates"] = item.find("td").find_next().get_text()

                elif re.search(u"到岗时间",item.find("td").get_text()):
                    self.result["jobExp"]["dutyTime"] = item.find("td").find_next().get_text().strip()

                elif re.search(u"勿推荐|不要推荐",item.find("td").get_text()):
                    self.result["jobExp"]["ignoreIncs"] = item.find("td").find_next().get_text().strip()

                elif re.search(u"期望职能",item.find("td").get_text()):
                    self.result["jobExp"]["expJobCates"] = item.find("td").find_next().get_text().strip()

        if not expsoup and self.jd_type==3:
            for field in self.field_list:
                if re.search(u"求职意向",field.get_text()):
                    expsoup = field.find_next("dd")
                    items = expsoup.find_all("li")
                    for item in items:
                        if re.search(u"工作性质",item.get_text()):
                            self.result["jobExp"]["expJobTypes"] = item.get_text("|",strip=True).split("|")[-1]

                        if re.search(u"期望职业",item.get_text()):
                            self.result["jobExp"]["expJobCates"] = item.get_text("|",strip=True).split("|")[-1]

                        if re.search(u"期望行业",item.get_text()):
                            self.result["jobExp"]["expIndustrys"] = item.get_text("|",strip=True).split("|")[-1]

                        if re.search(u"工作地区",item.get_text()):
                            self.result["jobExp"]["expLocations"] = item.get_text("|",strip=True).split("|")[-1]

                        if re.search(u"期望月薪",item.get_text()):
                            self.result["jobExp"]["expSalary"] = item.get_text("|",strip=True).split("|")[-1]

                        if re.search(u"目前状况",item.get_text()):
                            self.result["jobExp"]["workStatus"] = item.get_text("|",strip=True).split("|")[-1]

                        if re.search(u"到岗时间",item.get_text()):
                            self.result["jobExp"]["dutyTime"] = item.get_text("|",strip=True).split("|")[-1]
                    break





    # 教育经历
    def regular_educate(self):

        edusoup = ""
        for field in self.field_list:
            if field.find("h3") and re.search(u"教育经历",field.find("h3").get_text()):
                edusoup = field
                break
        res = []
        self.edu_html = edusoup.get_text().strip() if edusoup else ""
        if edusoup:
            rows = edusoup.find("div","resume-preview-dl").get_text().split("\n")
            id = 1
            for item in rows:
                tokens = item.split()
                # print len(tokens)
                tmp = self.get_eduDict()
                if len(tokens)==6:
                    # print 6
                    tmp["itemId"] = str(id)
                    tmp["eduStart"] = self.clean_edu_time(tokens[0])
                    tmp["eduEnd"] = self.clean_edu_time(tokens[2])
                    tmp["schName"] = tokens[3]
                    tmp["majorName"] = tokens[4]
                    tmp["eduDiploma"] = tokens[5]
                    id += 1
                    res.append(tmp)
                elif len(tokens) == 8:
                    # print 8
                    tmp["itemId"] = str(id)
                    tmp["eduStart"] = self.clean_edu_time(tokens[0])
                    tmp["eduEnd"] = self.clean_edu_time(tokens[2])
                    tmp_schName = ' '.join(tokens[3:6])
                    if tmp_schName == "University of Auckland":
                        tmp["schName"] = tmp_schName
                        tmp["majorName"] = tokens[-2]
                    else:
                        tmp["schName"] = ' '.join(tokens[3:5])
                        tmp["majorName"] = ' '.join(tokens[5:7])
                    tmp["eduDiploma"] = tokens[-1]
                    id += 1
                    res.append(tmp)

                elif len(tokens) == 9:
                    # print 9
                    tmp["itemId"] = str(id)
                    tmp["eduStart"] = self.clean_edu_time(tokens[0])
                    tmp["eduEnd"] = self.clean_edu_time(tokens[2])
                    # tmp["schName"] = tokens[3]
                    # tmp["majorName"] = ' '.join(tokens[4:-1])
                    tmp["schName"] = ' '.join(tokens[3:-2])
                    tmp["majorName"] = tokens[-2]
                    tmp["eduDiploma"] = tokens[-1]
                    id += 1
                    res.append(tmp)

                elif len(tokens) == 13:
                    # print 13
                    tmp["itemId"] = str(id)
                    tmp["eduStart"] = self.clean_edu_time(tokens[0])
                    tmp["eduEnd"] = self.clean_edu_time(tokens[2])
                    tmp["schName"] = ' '.join(tokens[3:8])
                    tmp["majorName"] = ' '.join(tokens[8:-1])
                    tmp["eduDiploma"] = tokens[-1]
                    id += 1
                    res.append(tmp)



        if not edusoup and self.jd_type==3:
            for field in self.field_list:
                if re.search(u"教育经历",field.get_text()):
                    edusoup = field.find_next("dd")
                    items = edusoup.find_all("div","education-background")
                    id = 1
                    for item in items:
                        if item.find("p") and item.find("h6"):
                            tmp = self.get_eduDict()
                            tokens = item.find("p").get_text().split("--")

                            tmp["itemId"] = str(id)
                            tmp["eduStart"] = self.clean_edu_time(tokens[0])
                            tmp["eduEnd"] = self.clean_edu_time(tokens[1])
                            tmp["schName"],tmp["majorName"],tmp["eduDiploma"] = filter(lambda x: len(x)>1,item.find("h6").get_text(";",strip=True).split(";") )[:3]
                            id += 1
                            res.append(tmp)
                    break

        if res:
            # 基本信息中的最高学历学校，专业
            self.result["baseInfo"]["recentSchName"] = res[0]["schName"]
            self.result["baseInfo"]["recentMajorName"] = res[0]["majorName"]

        self.result['eduList'] = res




    #　工作经历
    def regular_workexp(self):

        worksoup = ""
        for field in self.field_list:
            if field.find("h3") and re.search(u"工作经历",field.find("h3").get_text()):
                worksoup = field
                break

        res = []
        self.work_html = worksoup.get_text().strip() if worksoup else ""
        if worksoup:
            rows = worksoup.find_all("h2")
            id = 1
            for item in rows:
                tokens = item.get_text().split()
                tmp = self.get_jobDict()
                # print tmp

                if len(tokens)==5:
                    tmp["itemId"] = str(id)
                    tmp["jobStart"] = self.clean_edu_time(tokens[0])
                    tmp["jobEnd"] = self.clean_edu_time(tokens[2].strip())
                    tmp["incName"] = tokens[3].strip()
                    tmp["jobDuration"] = tokens[4].strip()[1:-1]

                elif len(tokens)>5:
                    tmp["itemId"] = str(id)
                    tmp["jobStart"] = self.clean_edu_time(tokens[0])
                    tmp["jobEnd"] = self.clean_edu_time(tokens[2].strip())
                    tmp["incName"] = ''.join(tokens[3:-1]).strip()
                    tmp["jobDuration"] = tokens[-1].strip()[1:-1]

                #没有工作时间的情况  zhangzq@2016.03.10
                elif len(tokens)==4:
                    tmp["itemId"] = str(id)
                    tmp["jobStart"] = self.clean_edu_time(tokens[0])
                    tmp["jobEnd"] = self.clean_edu_time(tokens[2].strip())
                    tmp["incName"] = ''.join(tokens[3]).strip()

                else:
                    continue
                jobTagItem = item.find_next("h5").get_text().split('|')

                if len(jobTagItem)==1:
                    tmp["jobPosition"] = jobTagItem[0].strip()
                elif len(jobTagItem)==2:
                    if re.search(u'\d',jobTagItem[1].strip()):
                        tmp["jobPosition"] = jobTagItem[0].strip()
                        tmp["jobSalary"] = jobTagItem[1].strip()
                    else:
                        tmp["jobDepartment"] = jobTagItem[0].strip()
                        tmp["jobPosition"] = jobTagItem[1].strip()

                elif len(jobTagItem)==3:
                    tmp["jobDepartment"] = jobTagItem[0].strip()
                    tmp["jobPosition"] = jobTagItem[1].strip()
                    tmp["jobSalary"] = jobTagItem[2].strip()


                incTagItem = item.find_next("div","resume-preview-dl")

                #管理经验，工作描述
                jobDescItem = incTagItem.find_next("div","resume-preview-dl")
                incTagItem = incTagItem.get_text().split("|")


                if len(incTagItem)==1:
                    tmp["incIndustrys"] = incTagItem[0].strip()

                elif len(incTagItem)==2:
                    tmp["incIndustrys"] = incTagItem[0].strip()
                    if re.search(u'企业性质',incTagItem[1]):
                        tmp["incType"] = incTagItem[1].strip()[5:]
                    else:
                        tmp["incEmployee"] = incTagItem[1].strip()[3:]

                elif len(incTagItem)==3:
                    tmp["incIndustrys"] = incTagItem[0].strip()
                    tmp["incType"] = incTagItem[1].strip()[5:]
                    tmp["incEmployee"] = incTagItem[2].strip()[3:]




                result=jobDescItem.find_all('table')
                # print result, len(result)

                tmp_mana = []

                if len(result) >= 2:
                    for i in range(1, len(result)):
                        # print i, result[i]
                        reportTo = re.search(u'汇报对象：([^|\s业绩描述]+)', result[i].get_text())
                        underNum = re.search(u'下属人数：(\d+人)', result[i].get_text())
                        directUnder = re.search(u'直接下属：([^|\s业绩描述]+)', result[i].get_text())
                        achieveDesc = re.search(u'业绩描述：(.*)', result[i].get_text())
                        tmp_manaExp = {}

                        tmp_manaExp['itemId'] = str(i)

                        tmp_manaExp["reportTo"] = reportTo.group(1) if reportTo else ""
                        tmp_manaExp["underNum"] = underNum.group(1) if underNum else  ""
                        tmp_manaExp["directUnder"] = directUnder.group(1) if directUnder else ""
                        # print achieveDesc.group(1)
                        tmp_manaExp["achieveDesc"] = achieveDesc.group(1) if achieveDesc else  ""
                        tmp_mana.append(tmp_manaExp)
                    yearlyIncome = re.search(u'年收入：(.*?年)', result[i].get_text())
                    tmp['manageExp'] = tmp_mana
                    tmp["yearlyIncome"] = yearlyIncome.group(1) if yearlyIncome else ""

                tmp["jobDesc"] = result[0].get_text(separator='\n').strip()[5:]
                # get_text().strip()[5:]
                # print tmp["jobDesc"]
                # print tmp

                id += 1

                res.append(tmp)


        if not worksoup and self.jd_type==3:
            for field in self.field_list:
                if re.search(u"工作经历",field.get_text()):
                    worksoup = field.find_next("dd")
                    items = worksoup.find_all("div","work-experience")
                    id = 1
                    for item in items:
                        if item.find("p") and item.find("h6"):
                            tmp = self.get_jobDict()
                            tokens = item.find("p").get_text().split("--")
                            tmp["jobStart"] = self.clean_edu_time(tokens[0])
                            tmp["jobEnd"] = self.clean_edu_time(tokens[1])

                            tmp["incName"], tmp["jobPosition"] = item.find("h6").get_text(strip=True).split("|")[:2]

                            find_tags = item.find("h6").find_next_sibling("p")
                            if find_tags and find_tags.find("span"):
                                tags = [ tag.get_text(strip=True) for tag in find_tags.find_all("span") if len(tag.get_text(strip=True))>2 ]
                                for tag in tags:
                                    if re.search(u"行业类别",tag):
                                        tmp["incIndustrys"] = tag.split(u"：")[-1]
                                    elif re.search(u"企业性质",tag):
                                        tmp["incType"] = tag.split(u"：")[-1]
                                    elif re.search(u"规模",tag):
                                        tmp["incEmployee"] = tag.split(u"：")[-1]
                                    elif re.search(u"月薪",tag):
                                        tmp["jobSalary"] = tag.split(u"：")[-1]

                            find_jobdesc = item.find("strong",text=re.compile(u"工作描述"))
                            if find_jobdesc:
                                tmp["jobDesc"] = find_jobdesc.find_parent("p").get_text(strip=True)

                            id += 1
                    break

        self.result['jobList'] = res


    # 语言技能
    def regular_language(self):

        langsoup = ""
        for field in self.field_list:
            if field.find("h3") and re.search(u"语言.?能.?",field.find("h3").get_text()):
                langsoup = field
                break
        self.language_html = langsoup.get_text().strip() if langsoup else ""
        res = []
        id = 1
        if langsoup:
            if self.NONAME:
                # rows =[ row.get_text('`') for row in  langsoup.find_all("div","resume-preview-dl")]
                rows =langsoup.find("div","resume-preview-dl").get_text('`').split('`')
            elif not self.NONAME:
                rows = langsoup.find("div","resume-preview-dl").get_text().split("\n")

            for item in rows:

                tokens = re.split(u"[:：]",item.strip())
                if len(tokens)==2:
                    tmp = self.get_languageDict()
                    tmp["itemId"] = str(id)
                    tmp["languageName"] = tokens[0].strip()
                    tmp["languageLevel"] = tokens[1].strip()
                    res.append(tmp)
                    id += 1

        if not langsoup and self.jd_type == 3:
            for field in self.field_list:
                if re.search(u"语言能力",field.get_text()):
                    langsoup = field.find_next("dd")
                    items = langsoup.find_all("div","language-skill")
                    id = 1
                    for item in items:
                        tmp = self.get_languageDict()
                        tmp["itemId"] = str(id)
                        tmp["languageName"],tmp["languageLevel"] = item.get_text(strip=True).split(u"：")
                        res.append(tmp)
                        id += 1
                    break

        self.result["languageList"] = res


    #　证书
    def regular_cert(self):


        certsoup =""
        for field in self.field_list:
            if field.find("h3") and re.search(u"证书",field.find("h3").get_text()):
                certsoup = field
                break

        self.cert_html = certsoup.get_text().strip() if certsoup else ""
        res = []
        id = 1
        if certsoup:
            items = certsoup.find_all("h2")
            for item in items:
                tokens = item.get_text().split()
                if len(tokens)<2:continue
                tmp=self.get_certDict()
                tmp["itemId"] = str(id)
                tmp["certTime"] = tokens[0].strip()
                tmp["certName"] = ' '.join(tokens[1:]).strip()

                if item.find_next_sibling("div","resume-preview-dl"):
                    cert_str = item.find_next_sibling("div").find_all("td")[-1].get_text()
                    tmp["certDesc"] = cert_str if cert_str else  None
                else:
                    cert_str = tokens[1]
                # find_level = self.CERT_LEVEL.search(cert_str)
                # tmp["certLevel"] = find_level.group() if find_level else "None"


                res.append(tmp)
                id += 1

        if not certsoup and self.jd_type == 3:
            for field in self.field_list:
                if re.search(u"证书",field.get_text()):
                    certsoup = field.find_next("dd")
                    items = certsoup.find_all("div","certificates")
                    id = 1
                    for item in items:
                        tmp = self.get_certDict()
                        tmp["itemId"] = str(id)
                        tmp["certTime"] = item.find("p").get_text(strip=True)
                        tmp["cerName"] = item.find("h6").get_text(strip=True)
                        res.append(tmp)
                        id += 1
                    break

        self.result["certList"] = res


    # 技能
    def regular_skill(self):
        """
        技能模块
        """

        skillsoup = ""
        for field in self.field_list:
            if field.find("h3") and re.search(u"技能",field.find("h3").get_text()):
                skillsoup = field
                break
        self.skill_html = skillsoup.get_text().strip() if skillsoup else ""
        res = []
        id =1
        if skillsoup:
            # print 'yes'
            if self.NONAME:
                items = skillsoup.get_text().split("\n")
            else:
                items = skillsoup.get_text().split("\n")

            for item in items:
                tokens = [token for token in re.split(u"[:：|]", item.strip()) if len(token.strip())>1]
                # print tokens,list(item)
                if len(tokens)<2:continue
                # print token[0], token[1]
                tmp = self.get_skillDict()
                tmp["itemId"] = str(id)

                esp = re.search(u'C:', item)
                if esp:
                    tmp["skillName"] = esp.group()
                    tmp["skillLevel"] = tokens[0].strip()
                else:
                    tmp["skillName"] = tokens[0].strip()
                    tmp["skillLevel"] = tokens[1].strip()

                find_duration = re.search(u"\d+(个)?月|[半一二三四五六七八九十\d]年",item)
                tmp["skillDuration"] = find_duration.group() if find_duration else ""
                res.append(tmp)
                id += 1

        if not skillsoup and self.jd_type == 3:
            # print 'no'
            for field in self.field_list:
                if re.search(u"专业技能",field.get_text()):
                    skillsoup = field.find_next("dd")
                    items = skillsoup.find_all("div","professional-skill")
                    for item in items:
                        tmp = self.get_skillDict()
                        tmp["itemId"] = str(id)
                        tokens = item.get_text(strip=True).split(u"|")
                        if len(tokens)>1:
                            tmp["skillName"] = tokens[0]
                            tmp["skillLevel"] = tokens[1]
                            if len(tokens)>2:
                                tmp["skillDuration"] = tokens[2]
                        res.append(tmp)
                        id += 1
                    break

        self.result['skillList'] = res


    #　项目经验
    def regular_project(self):

        prosoup = ""
        for field in self.field_list:
            if field.find("h3") and re.search(u"项目经历",field.find("h3").get_text()):
                prosoup = field
                break
        self.project_html = prosoup.get_text().strip() if prosoup else ""
        res = []
        id = 1
        if prosoup:
            items = prosoup.find_all("h2")
            for item in items:
                tokens = [token for token in item.get_text().strip().split() if len(token.strip())>1]
                if len(tokens)<3:continue
                tmp = self.get_proDict()
                tmp["itemId"] = str(id)
                tmp["proStart"] = tokens[0].strip()
                tmp["proEnd"] = tokens[1].strip()
                tmp["proName"] = "".join(tokens[2:])

                field_list = item.find_next("table").find_all("td")
                for field in field_list:

                    find_duty = re.search(u"责任描述：$",field.get_text())
                    find_desc = re.search(u"项目描述：$",field.get_text())
                    soft_envir = re.search(u"软件环境：$",field.get_text())
                    hard_envir = re.search(u"硬件环境：$",field.get_text())
                    develop_tool = re.search(u"开发工具：$",field.get_text())
                    if find_duty:
                        tmp["proDuty"] = field.find_next("td").get_text(separator='\n')
                    elif find_desc:
                        tmp["proDesc"] = field.find_next("td").get_text(separator='\n')
                    elif soft_envir:
                        tmp['softwareEnv'] = field.find_next("td").get_text()
                    elif develop_tool:
                        tmp['devTool'] = field.find_next("td").get_text()
                    elif hard_envir:
                        tmp['hardwareEnv'] = field.find_next("td").get_text()
                res.append(tmp)
                id += 1

        if not prosoup and self.jd_type == 3:
            for field in self.field_list:
                if re.search(u"项目经验",field.get_text()):
                    prosoup = field.find_next("dd")
                    items = prosoup.find_all("div","project-experience")
                    for item in items:
                        if item.find("p") and item.find("h6"):
                            tmp = self.get_proDict()
                            tmp["itemId"] = str(id)
                            tokens = item.find("p").get_text(strip=True).split("--")
                            tmp["proStart"] = self.clean_edu_time(tokens[0])
                            tmp["proEnd"] = self.clean_edu_time(tokens[-1])
                            tags = item.find_all("p")
                            for tag in tags:
                                if re.search(u"软件环境",tag.get_text()):
                                    tmp["softwareEnv"] = tag.get_text("|",strip=True).split("|")[-1]
                                if re.search(u"硬件环境",tag.get_text()):
                                    tmp["hardwareEnv"] = tag.get_text("|",strip=True).split("|")[-1]
                                if re.search(u"开发工具",tag.get_text()):
                                    tmp["devTool"] = tag.get_text("|",strip=True).split("|")[-1]
                                if re.search(u"责任描述",tag.get_text()):
                                    tmp["proDuty"] = tag.get_text("|",strip=True).split("|")[-1]
                                if re.search(u"项目简介",tag.get_text()):
                                    tmp["proDesc"] = tag.get_text("|",strip=True).split("|")[-1]
                            res.append(tmp)
                            id += 1
                    break

        self.result['proList'] = res



    def regular_train(self):

        trainsoup = ""
        for field in self.field_list:
            if field.find("h3") and re.search(u"培训经历",field.find("h3").get_text()):
                trainsoup = field
                break
        self.train_html = trainsoup.get_text().strip() if trainsoup else ""
        res = []
        id = 1
        if trainsoup:
            # print 'yes'
            items = trainsoup.find_all("h2")
            for item in items:
                tokens = [ token for token in item.get_text().split() if len(token.strip())>1 ]
                if len(tokens)<3:continue
                # print item.get_text()
                tmp = self.get_trainDict()
                tmp["itemId"] = str(id)
                tmp["trainStart"] = tokens[0]
                tmp["trainEnd"] = tokens[1]
                # print tokens[2:4]
                tmp["trainTitle"] = " ".join(tokens[2:])
                # print tmp['trainTitle']

                field_list = item.find_next("table").find_all("td")
                temp = 0
                for field in field_list:
                    # print field

                    find_agency = re.search(u"培训机构",field.get_text())
                    if find_agency:
                        temp += 1

                    find_location = re.search(u"培训地点",field.get_text())
                    # print find_location

                    find_desc = re.search(u"培训描述",field.get_text())

                    find_content = re.search(u"培训内容",field.get_text())

                    find_cert = re.search(u"所获证书",field.get_text())

                    # print temp
                    if find_agency and temp is 1:
                        tmp["trainAgency"] = field.find_next_sibling("td").get_text() if field.find_next_sibling("td") else "None"
                        # print tmp['trainAgency']

                    elif find_location:
                        tmp["trainLoc"] = field.find_next_sibling("td").get_text() if field.find_next_sibling("td") else "None"

                    elif find_desc:
                        tmp["trainDesc"] = field.find_next_sibling("td").get_text() if field.find_next_sibling("td") else "None"

                    elif find_cert:
                        tmp["trainCert"] = field.find_next_sibling("td").get_text() if field.find_next_sibling("td") else "None"

                    elif find_content:
                        tmp["trainContent"] = field.find_next_sibling("td").get_text() if field.find_next_sibling("td") else "None"

                res.append(tmp)
                id += 1

        if not trainsoup and self.jd_type == 3:
            # print 'no'
            for field in self.field_list:
                if re.search(u"培训经历",field.get_text()):
                    trainsoup = field.find_next("dd")
                    items = trainsoup.find_all('div',"training")
                    for item in items:
                        tmp = self.get_trainDict()
                        tmp["itemId"] = str(id)
                        tokens = item.find("p").get_text(strip=True).split("--")
                        tmp["trainStart"] = self.clean_edu_time( tokens[0])
                        tmp["trainEnd"] = self.clean_edu_time(tokens[1])
                        tmp["trainAgency"] = item.find("h6").get_text(strip=True)
                        tags = item.find_all("strong")
                        for tag in tags:
                            if re.search(u"培训课程",tag.get_text()):
                                tmp["trainTitle"] = tag.find_parent("div").get_text(strip=True).split("：",1)[-1]
                            if re.search(u"所获证书",tag.get_text()):
                                tmp["trainCert"] = tag.find_parent("div").get_text(strip=True).split("：",1)[-1]
                            if re.search(u"培训地点",tag.get_text()):
                                tmp["trainLoc"] = tag.find_parent("div").get_text(strip=True).split("：",1)[-1]
                            if re.search(u"培训描述",tag.get_text()):
                                tmp["trainDesc"] = tag.find_parent("div").get_text(strip=True).split("：",1)[-1]
                            if re.search(u"培训内容",tag.get_text()):
                                tmp["trainContent"] = tag.find_parent("div").get_text(strip=True).split("：",1)[-1]
                        res.append(tmp)
                        id += 1
                    break

        self.result["trainList"] = res


    def regular_private(self):
        """
        身份证号，联系电话等隐私信息
        """

        base_info = self.resume.find("div","summary").get_text()

        find_phone = self.PHONE.search(base_info)
        find_email = self.EMAIL.search(base_info)
        find_qq = self.QQ.search(base_info)
        find_idNum = self.IDNUM.search(base_info)

        if not self.NONAME and self.jd_type!=3:
            self.result["privateInfo"]["userName"] = self.resume.find("div","resume-preview-main-title").find("div","main-title-fl").get_text().strip()

        self.result["privateInfo"]["phoneNumber"] = find_phone.group(1) if find_phone else ""
        self.result["privateInfo"]["email"] = find_email.group(1) if find_email else ""
        self.result["privateInfo"]["qq"] = find_qq.group(1) if find_qq else ""
        self.result["privateInfo"]["idNumber"] = find_idNum.group(1) if find_idNum else ""

        userName = self.soup.find("div",{"id":"userName"})
        if userName:
            self.result["privateInfo"]["userName"] =userName.get_text().strip()






    def regular_other(self):
        self.other_html = []
        glory = []
        hobby = []
        for field in self.field_list:
            if not field.find("h3"):
                continue
            if re.search(u"自我评价|个人简介|自我介绍",field.find("h3").get_text()):
                self.result["others"]["selfIntro"] = field.find_next("div").get_text(separator='\n').strip()
                self.other_html.append(self.result["others"]["selfIntro"])
                # temp = str(field.find_next("div")).replace('<br/>', '\n')
                # result = re.sub('<div(.*?)>', "", temp)
                # result = re.sub('</div>', "", result)
                # self.result["others"]["selfIntro"] = result
                # print result
                # print self.result["others"]["selfIntro"]
            elif re.search(u"个人评价",field.find("h3").get_text()):
                self.result["others"]["personIntro"] = field.find_next("div").get_text().strip()
                self.other_html.append(self.result["others"]["personIntro"])
            elif re.search(u"社会活动",field.find("h3").get_text()):
                self.result["others"]["socialActive"] = field.find_next("div").get_text().strip()
                self.other_html.append(self.result["others"]["socialActive"])
            elif re.search(u"学习情况|校内|校园|社团",field.find("h3").get_text()):
                self.result["others"]["schoolExp"] = self.result["others"]["schoolExp"] + field.get_text().strip()
                self.other_html.append(self.result["others"]["schoolExp"])
            elif re.search(u"实习|实践",field.find("h3").get_text()):
                self.result["others"]["stuPractice"] = self.result["others"]["stuPractice"] + field.get_text().strip()
                self.other_html.append(self.result["others"]["stuPractice"])
            #
            # elif re.search(u"论文|著作|作品|奖项|荣誉",field.find("h3").get_text()):
            #     res["pubWork"] = res.get("pubWork","") + ","  + field.get_text().strip()
            elif re.search(u"专业组织",field.find("h3").get_text()):
                self.result["others"]["professionOrg"] = field.find_next("div").get_text().strip()
                self.other_html.append(self.result["others"]["professionOrg"])
            elif re.search(u"论文|著作|作品",field.find("h3").get_text()):
                self.result["others"]["pubWork"] = field.find_next("div").get_text().strip()
                self.other_html.append(self.result["others"]["pubWork"])
            elif re.search(u"特长职业目标",field.find("h3").get_text()):
                self.result["others"]["longCareerGoal"] = field.find_next("div").get_text().strip()
                self.other_html.append(self.result["others"]["longCareerGoal"])
            elif re.search(u"专利",field.find("h3").get_text()):
                self.result["others"]["patent"] = field.find_next("div").get_text().strip()
                self.other_html.append(self.result["others"]["patent"])
            elif re.search(u"兴趣爱好",field.find("h3").get_text()):
                hobby.append(field.find_next("div").get_text().strip())
                self.result["others"]["otherHobby"] = list(set(hobby))
                self.other_html.extend(self.result["others"]["otherHobby"])
            elif re.search(u"特殊技能",field.find("h3").get_text()):
                self.result["others"]["specialSkill"] = field.find_next("div").get_text().strip()
                self.other_html.append(self.result["others"]["specialSkill"])
            elif re.search(u"其他|简历内容",field.find("h3").get_text()):
                self.result["others"]["otherInfo"] = field.find_next("div").get_text().strip()
                self.other_html.append(self.result["others"]["otherInfo"])
            elif re.search(u"推荐信",field.find("h3").get_text()):
                self.result["others"]["recommendLetter"] = field.find_next("div").get_text().strip()
                self.other_html.append(self.result["others"]["recommendLetter"])
            elif re.search(u"宗教信仰",field.find("h3").get_text()):
                self.result["others"]["religion"] = field.find_next("div").get_text().strip()
                self.other_html.append(self.result["others"]["religion"])
            elif re.search(u"获得荣誉",field.find("h3").get_text()):
                glory.append(field.find_next('div').get_text().strip())
                self.result["others"]["glory"] = glory
                self.other_html.extend(self.result["others"]["glory"])
                # print self.result["others"]["glory"]
            elif re.search(u"个人资源",field.find("h3").get_text()):
                self.result["others"]["personResource"] = field.find_next("div").get_text().strip()
                self.other_html.append(self.result["others"]["personResource"])
            elif re.search(u"附件",field.find("h3").get_text()):
                self.result["others"]["attachment"] = field.find_next("div").get_text(' ').strip()
                self.other_html.append(self.result["others"]["attachment"])



        top_soup = self.soup.find("body").find("div","resume-preview-title")
        self.other_html.append(top_soup.get_text())
        # if top_soup:
        #     find_cv_name = top_soup.find("strong",{"id":"resumeName"})
        #     find_job_name = re.search(u"应聘职位：.{1,30}<strong>(.+?)</strong>",str(top_soup).decode("utf-8"),re.S)
        #     find_job_inc = re.search(u"应聘机构：.{1,30}<strong>(.+?)</strong>",str(top_soup).decode("utf-8"),re.S)
        #
        #     if find_cv_name:
        #         res["cvName"] = find_cv_name.get_text().strip()
        #     if find_job_name:
        #         res["jobPositionFor"] = find_job_name.group(1)
        #     if find_job_inc:
        #         res["jobIncNameFor"] = find_job_inc.group(1)

        rows = top_soup.find_all("span")
        for row in rows:
            if re.search(u"应聘职位",row.get_text()):
                self.result["others"]["jobPositionFor"]=row.strong.get_text()
            elif re.search(u"应聘机构",row.get_text()):
                self.result["others"]["jobIncNameFor"]=row.strong.get_text()
            elif re.search(u"工作地点",row.get_text()):
                self.result["others"]["workLoc"]=row.strong.get_text()
            elif re.search(u"简历名称",row.get_text()):
                self.result["others"]["cvName"]=row.strong.get_text()

        self.result["others"]["schoolExp"]=re.sub(u"在校学习情况",'', self.result["others"]["schoolExp"])
        self.result["others"]["stuPractice"]=re.sub(u"在校实践经验",'', self.result["others"]["stuPractice"])



    def parser(self,htmlContent=None,fname=None,url=None):
        self.preprocess(htmlContent,fname,url)
        self.regular_basic()
        self.regular_private()
        self.regular_expect()
        self.regular_educate()
        self.regular_workexp()
        self.regular_skill()
        self.regular_cert()
        self.regular_language()
        self.regular_project()
        self.regular_train()
        self.regular_other()
        return self.result



    def output(self):
        res = "\n"
        for k in self.result:
            res += k+":"+"\n"
            if isinstance(self.result[k],dict):
                for kk,vv in self.result[k].iteritems():
                    res += '%1s: %s\n' %( kk,vv )
            elif isinstance(self.result[k],list):
                for i,exp in enumerate(self.result[k]):
                    res+= "%12s\n" % (str(i+1))
                    if isinstance(exp,dict):
                        for kk,vv in exp.iteritems():
                            res += "%22s: %s\n" % (kk,vv)
                    elif isinstance(exp,tuple):
                        for kk in exp:
                            res += '%22s \n'% (kk)
                    res += " "*10+'---'*10+'\n'
            else:
                res += " "*10+"%s\n" % (self.result[k])
        return res




import simplejson as json

if __name__ == "__main__":
    """
    测试
    """
    test = CvParserZhiLian()
    # f = open('/home/howe/cv/output/output_zhilian_01', 'w')

    # path = '/home/howe/cv/cv_zhilian/'
    # for file_name in os.listdir(path):
    #     file_name = os.path.join(path, file_name)
    #     # print file_name
    #     htmlContent = codecs.open(file_name, 'rb').read()
    #     test.parser(htmlContent=htmlContent)
    #     res = {}
    #     res['base'] = str(test.base_html)  # 1
    #     res['expect'] = str(test.expect_html)  # 2
    #     res['education'] = str(test.edu_html)  # 3
    #     res['work'] = str(test.work_html)  # 4
    #     res['languange'] = str(test.language_html)  # 5
    #     res['cert'] = str(test.cert_html)  # 6
    #     res['skill'] = str(test.skill_html)  # 7
    #     res['project'] = str(test.project_html)  # 8
    #     res['train'] = str(test.train_html)  # 9
    #     res['other'] = ' '.join(test.other_html)  # 0
    #     for key in res.keys():
    #         if res[key] is "":
    #             continue
    #
    #         temp = re.sub('\s', '', res[key])
    #         f.write(key + ' ' + temp + '\n')
    with open('/home/howe/下载/JR031726485R90250000000.html') as fr:
        lines = fr.readlines()

    htmlContent = '\n'.join(lines)
    result = test.parser(htmlContent)
    print json.dumps(result, ensure_ascii=False, indent=4)
#     path = './data/cv_zhilian/'
#     fnames = [ path+fname for fname in os.listdir(path)][:10]
#
#     for i,fname in enumerate(fnames):
#         try:
#             print i+1,'='*20,fname
#             htmlContent = codecs.open(fname,'rb','utf-8').read()
#             result = test.parse96个月"r(htmlContent)
#             output = test.output()
#             print(json.dumps(result,ensure_ascii=False,indent=4))
#             json.dump(result,open("output_cv_zhilian.json",'wb'))
# #            print output
#         except Exception,e:
#             print e
#             continue

    # htmlContent = codecs.open('/home/zhangzq/PycharmProjects/untitled/data/cv_zhilian/JR185653148R90000000000.html','rb','utf-8').read()
    # test.parser(htmlContent = htmlContent)
    # res={}
    # res['work']=str(test.work_html)
    # res['education'] =str(test.edu_html)
    # with open('out.txt','w') as fw:
    #     fw.write(json.dumps(res)+'\n')
    #     fw.write(json.dumps(res)+'\n')
    # print(json.dumps(res,ensure_ascii=False,indent=4))
    # print(json.dumps(test.result,ensure_ascii=False,indent=4))

    # fw = open('JM363772955R90250000000.html','a')
    # path ='/home/howe/下载/各渠道解析结果对比/zhilian-sample'
    # for file_name in os.listdir(path):
    #     file_name=os.path.join(path,file_name)
    #     print file_name
    #     htmlContent = codecs.open(file_name,'rb','utf-8').read()
    #     try:
    #         test.parser(htmlContent = htmlContent)
    #     except:
    #         continue
    #     res={}
    #     res['work']=str(test.work_html)
    #     res['education'] =str(test.edu_html)
    #     res['from']='zhilian'
    #     fw.write(json.dumps(res)+'\n')
    # fw.close()



