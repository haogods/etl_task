#!/usr/bin/env python
# coding=utf-8

import sys, re, codecs
from bs4 import BeautifulSoup
from urllib2 import urlopen
from collections import OrderedDict
from base import CvTopParser
import os

reload(sys)
sys.setdefaultencoding('utf-8')


class CvParser51Job(CvTopParser):
    """
    对51job的简历进行解析
    """

    def __init__(self):

        CvTopParser.__init__(self)

        self.result = OrderedDict()
        self.PAY = re.compile(u"(\d+[\s\-])?\d+元")
        self.UPDATETIME = re.compile("(更新日期|更新时间)[:：\s](\d{4}.\d{2}.\d{2})")
        self.ADDR = re.compile(u"居住地[：:\s](\S+)")
        self.JOB_START = re.compile(u"(\d+.\d+?)--")
        self.JOB_END = re.compile(u"--(\d+.\d+|至今)")
        self.JOB_DURATION = re.compile(u"\[(.+?)\]")
        self.INC_SCALE = re.compile(u"\d+-\d+人|\d+人(以上|以下)?|少于\d+人")
        # self.INC_NAME = re.compile(u"[：:>](\S+?)[\(\[【\r\n ]")
        self.INC_NAME = re.compile(u"[：:>](\S+?)(\(\d|\[\d|\(少于|\[一)")
        self.JOB_DEPARTMENT = re.compile(u"部门[:\s：](\S+?)", re.S)
        self.PROJ_NAME = re.compile(u"[:：](\S+?$)")

    def preprocess(self, htmlContent=None, fname=None, url=None):
        if url != None:
            self.html = urlopen(url).read().decode('utf-8')
        elif htmlContent:
            self.html = htmlContent
        elif fname:
            self.html = codecs.open(fname, 'rb', 'gb18030').read()
        else:
            raise Exception("input error")

        if re.search(u"已被(求职者)?删除|无法查看", self.html):
            raise Exception("error: input illegal cv ")

        self.soup = BeautifulSoup(self.html, "lxml")

        # 无联系方式无匹配度的
        if self.soup.find("title") and re.search(u"简历ID", self.soup.find("title").get_text()):
            self.HasName = 0
            self.resume = self.soup.find('div', {"id": "divResume"})

            self.topsoup = self.resume.find("table").find("table").find_next("table")
            self.topsoup = self.resume.find("table").find("table")
            self.field_list = self.resume.find_all("td", "cvtitle")

        # 求职本公司的
        elif self.soup.find("div", "titleLineB") and self.soup.find(name="span", text=re.compile(u"应聘职位")):
            self.HasName = 3
            self.job_for_soup = self.soup.find(name="span", text=re.compile(u"应聘职位")).find_previous("table")
            self.topsoup = self.soup.find(name="td", text=re.compile(u"居住地：")).find_previous("table")
            self.resume = self.topsoup.find_parent("table").find_parent("table")
            self.field_list = self.resume.find_all("div", "titleLineB")
            if not self.field_list:
                self.field_list = self.resume.find("td", "cvtitle")

        # 有应聘职位公司并且显示匹配度的
        elif self.soup.find("div", {"id": "divHead"}):
            self.HasName = 1
            self.job_for_soup = self.soup.find("div", {"id": "divHead"}).find("td")
            self.topsoup = self.soup.find(name="td", text=re.compile(u"居住地：")).find_parent("table")
            self.resume = self.topsoup.find_parent("table").find_parent("table")
            self.field_list = self.resume.find_all("td", "cvtitle")


        # 有联系方式无匹配度的
        elif self.soup.find_all(name="td", text=re.compile(u"E-mail："), limit=10):
            self.HasName = 2
            find_job_for = self.soup.find(name="span", text=re.compile(u"应聘职位"))
            if find_job_for:
                self.job_for_soup = self.soup.find(name="span", text=re.compile(u"应聘职位")).find_previous("table")
            else:
                self.job_for_soup = BeautifulSoup()

            self.topsoup = self.soup.find(name="td", text=re.compile(u"居住地：")).find_previous("table")
            self.resume = self.topsoup.find_parent("table").find_parent("table")
            self.field_list = self.resume.find_all("td", "cvtitle")
            if not self.field_list:
                self.field_list = self.resume.find_all("div", "titleLineB")

        self.refresh()
        self.result["cvFrom"] = "51job"

    # 基本信息 1
    def regular_basic(self):
        """
        解析基本信息
        """

        temp_nowAddressDetail = ""
        find_update_time = self.soup.find("span", {"id": "lblResumeUpdateTime"})
        if find_update_time:
            find_update_time = find_update_time.get_text()
        elif self.UPDATETIME.search(self.html):
            find_update_time = self.UPDATETIME.search(self.html).group()

        # 20160309 zhangzq
        self.resumeType = 0
        find_resume_type = self.soup.find("span", {"id": "lblResumeType"})
        if find_resume_type:
            find_resume_type = find_resume_type.get_text()
            if re.search(u"粘贴简历", find_resume_type):
                self.resumeType = 1
        self.base_html = self.topsoup.get_text().strip()
        base_info = self.topsoup.get_text()
        # print self.topsoup
        find_cv_id = self.CV_ID.search(base_info)
        self.result["baseInfo"]["cvId"] = find_cv_id.group(1).strip() if find_cv_id else ""

        self.result["baseInfo"]["updateTime"] = find_update_time.split(u"：")[-1].strip() if find_update_time else "None"

        base_info1, base_info2 = "", ""

        if self.HasName != 3 and self.topsoup.find_next(name="b", text=u"最近工作"):
            base_info1 = self.topsoup.find_next(name="b", text=re.compile(u"最近工作")).find_parent("table")
            base_info2 = self.topsoup.find_next(name="b", text=re.compile(u"学历")).find_parent("table")
        elif self.topsoup.find_next("div", text=re.compile(u"最近工作")):
            base_info1 = self.topsoup.find_next(name="div", text=re.compile(u"最近工作")).find_next("table")
            base_info2 = base_info1.find_next("table")

        if base_info1:
            tokens = base_info1.find_all("tr")
            for token in tokens:
                items = token.find_all("td")
                if len(items) == 2:
                    if re.search(u"公.?司", items[0].get_text()):
                        self.result["baseInfo"]["nowInc"] = items[1].get_text().strip()
                    elif re.search(u"行.?业", items[0].get_text()):
                        self.result["baseInfo"]["nowIndustry"] = items[1].get_text().strip()
                    elif re.search(u"职.?位", items[0].get_text()):
                        self.result["baseInfo"]["nowPosition"] = items[1].get_text().strip()

        if base_info2:
            tokens = base_info2.find_all("tr")
            for token in tokens:
                items = token.find_all("td")
                if len(items) == 2:
                    if re.search(u"学.?历", items[0].get_text()):
                        self.result["baseInfo"]["nowDiploma"] = items[1].get_text().strip()
                    elif re.search(u"专.?业", items[0].get_text()):
                        self.result["baseInfo"]["recentMajorName"] = items[1].get_text().strip()
                    elif re.search(u"学.?校", items[0].get_text()):
                        self.result["baseInfo"]["recentSchName"] = items[1].get_text().strip()

        find_sex = self.SEX.search(base_info)
        self.result["baseInfo"]["gender"] = find_sex.group() if find_sex else "0"

        find_age = self.AGE.search(base_info)
        self.result["baseInfo"]["age"] = find_age.group() if find_age else "0"

        find_dob = self.DOB.search(base_info)
        self.result["baseInfo"]["dob"] = find_dob.group(1) if find_dob else "None"

        try:
            self.result["baseInfo"]["nowWorkAge"] = self.topsoup.find("span", "blue").find("b").get_text().split(u"|")[0]
        except:
            # res["nowWorkAge"] = self.topsoup.find("span","blue1").find("b").get_text().split(u"|")[0]
            self.result["baseInfo"]["nowWorkAge"] = ""

        if not re.search(u"经验|在读|应届|年", self.result["baseInfo"]["nowWorkAge"]):
            self.result["baseInfo"]["nowWorkAge"] = ""

        if not self.result["baseInfo"]["nowDiploma"]:
            find_degree = self.DEGREE.search(base_info)
            self.result["baseInfo"]["nowDiploma"] = find_degree.group() if find_degree else ""

        find_marriage = self.MARRIAGE.search(base_info)
        self.result["baseInfo"]["marriage"] = find_marriage.group() if find_marriage else ""

        find_politic = self.POLITIC.search(base_info)
        # res["nowPolistatus"] = find_politic.group() if find_politic else u"群众"
        # print find_politic.group()
        # print base_info
        self.result["baseInfo"]["nowPoliStatus"] = find_politic.group() if find_politic else ""

        # 　居住地和户口
        if self.topsoup.find("table"):
            items = self.topsoup.find("table").find_all("td", limit=20)
        else:
            items = self.topsoup.find_all("td", limit=20)

        for item in items:
            if re.search(u"专.业", item.get_text()) and item.find_next_sibling("td"):
                self.result["baseInfo"]["recentMajorName"] = item.find_next_sibling("td").get_text().strip()
            elif re.search(u"学.历", item.get_text()) and item.find_next_sibling("td"):
                self.result["baseInfo"]["nowDiploma"] = item.find_next_sibling("td").get_text().strip()
            elif re.search(u"职.能", item.get_text()) and item.find_next_sibling("td"):
                self.result["baseInfo"]["jobPosition"] = item.find_next_sibling("td").get_text().strip()
            elif re.search(u"行.业", item.get_text()) and item.find_next_sibling("td"):
                self.result["baseInfo"]["incIndustrys"] = item.find_next_sibling("td").get_text().strip()
            elif re.search(u"居住地", item.get_text()) and item.find_next_sibling("td"):
                self.result["baseInfo"]["nowAddress"] = item.find_next_sibling("td").get_text().strip()
            elif re.search(u"户.{0,3}口", item.get_text()) and item.find_next_sibling("td"):
                self.result["baseInfo"]["nowHukou"] = item.find_next_sibling("td").get_text().strip()
            elif re.search(u"地.址", item.get_text()) and item.find_next_sibling("td"):
                temp_nowAddressDetail = item.find_next_sibling("td").get_text().strip()
                self.result["baseInfo"]["nowAddressDetail"] = item.find_next_sibling("td").get_text().split(u'（')[
                    0].strip()
                # print item.find_next_sibling("td").get_text().split('(')[0].strip()
            elif re.search(u"关键词", item.get_text()) and item.find_next_sibling("td"):
                self.result["privateInfo"]["keyWords"] = item.find_next_sibling("td").get_text(" ", strip=True)

        find_height = self.HEIGHT.search(base_info)
        self.result["baseInfo"]["height"] = find_height.group(1) if find_height else ""

        if base_info2:
            find_benefit = base_info2.find_next("table").find_next("td", text=re.compile(u"基本工资|目前薪资"))
            if find_benefit:
                tmpsoup = find_benefit.find_previous("table")
                items = tmpsoup.find_all("td")
                for item in items:
                    # 基本工资等福利信息
                    if re.search(u"目前薪资|目前年薪", item.get_text()):
                        self.result["baseInfo"]["nowSalary"] = re.sub("\s+", "",
                                                                      item.find_next_sibling("td").get_text().strip())
                    elif re.search(u"基本薪资|基本工资", item.get_text()):
                        self.result["baseInfo"]["baseSalary"] = re.sub("\s+", "",
                                                                       item.find_next_sibling("td").get_text().strip())

                    elif re.search(u"补.?贴", item.get_text()):
                        self.result["baseInfo"]["subsidy"] = item.find_next_sibling("td").get_text().strip()

                    elif re.search(u"奖.?金", item.get_text()):
                        self.result["baseInfo"]["bonus"] = item.find_next_sibling("td").get_text().strip()

                    elif re.search(u"股.?票", item.get_text()):
                        self.result["baseInfo"]["stock"] = item.find_next_sibling("td").get_text().strip()

        find_oversea = self.OVER_SEA.search(base_info)
        self.result["baseInfo"]["overSea"] = "1" if find_oversea else ""

        if re.search(u"邮编：(\d{6})", temp_nowAddressDetail):
            self.result["baseInfo"]["nowZipCode"] = re.search(u"邮编：(\d{6})", temp_nowAddressDetail).group(1)

    # 求职意向 2
    def regular_expect(self):
        soup = ""
        for field in self.field_list:

            if re.search(u"求职意向", field.get_text()):
                if self.HasName == 1:
                    soup = field.find_next("table")
                else:
                    soup = field.find_previous("table")
                break
        self.expect_html = soup.get_text().strip() if soup else ""
        if soup:
            rows = soup.find_all("tr")
            for item in rows:
                if not item.find("td"):
                    continue
                if re.search(u"目标地", item.find("td").get_text()):
                    self.result['jobExp']["expLocations"] = item.find("td").find_next().get_text()

                elif re.search(u"职能", item.find("td").get_text()):
                    self.result['jobExp']["expJobCates"] = item.find("td").find_next().get_text().strip()
                    # print self.result['jobExp']['expJobCates']

                elif re.search(u"月薪|薪资|工资|薪酬", item.find("td").get_text()):
                    # print item.find('td').find_next().get_text()
                    self.result['jobExp']["expSalary"] = self.CLEAN_TEXT.sub("",item.find("td").find_next().get_text())

                    # print self.result['jobExp']['expSalary']
                elif re.search(u"目前状况|求职状态", item.find("td").get_text()):
                    self.result['jobExp']["workStatus"] = item.find("td").find_next().get_text()

                elif re.search(u"工作性|目标性", item.find("td").get_text()):
                    self.result['jobExp']["expJobTypes"] = item.find("td").find_next().get_text()

                elif re.search(u"希望行业|期望行业", item.find("td").get_text()):
                    self.result['jobExp']["expIndustrys"] = item.find("td").find_next().get_text()

                elif re.search(u"岗位|职[业位]", item.find("td").get_text()):
                    self.result['jobExp']["expPositions"] = item.find("td").find_next().get_text()

                elif re.search(u"到岗时间", item.find("td").get_text()):
                    self.result['jobExp']["dutyTime"] = item.find("td").find_next().get_text().strip()

                elif re.search(u"勿推荐|不要推荐", item.find("td").get_text()):
                    self.result['jobExp']["ignoreIncs"] = item.find("td").find_next().get_text().strip()

                    # elif re.search(u"职能",item.find("td").get_text()):
                    #     self.result['jobExp']["expJobCates"] = item.find("td").find_next().get_text().strip()

    # 教育经历 3
    def regular_educate(self):

        soup = ""
        for field in self.field_list:
            if re.search(u"教育经历", field.get_text()):
                soup = field.find_next("table")
                break
        self.edu_html = soup.get_text().strip() if soup else ""
        if soup:
            rows = soup.find_all("tr")
            id = 1
            for item in rows:
                tokens = [token.get_text().strip() for token in item.find_all("td") if len(token.get_text()) > 1]
                tmp = self.get_eduDict()
                if len(tokens) == 4:

                    tmp["itemId"] = str(id)
                    tmp["eduStart"] = self.clean_edu_time(tokens[0].split("-")[0])
                    tmp["eduEnd"] = self.clean_edu_time(tokens[0].split("-")[-1])
                    tmp["schName"] = tokens[1]
                    tmp["majorName"] = tokens[2]
                    tmp["eduDiploma"] = tokens[3]
                    id += 1
                    self.result["eduList"].append(tmp)
                elif len(tokens) == 3:
                    tmp["itemId"] = str(id)
                    tmp["eduStart"] = self.clean_edu_time(tokens[0].split("-")[0])
                    tmp["eduEnd"] = self.clean_edu_time(tokens[0].split("-")[-1])
                    tmp["schName"] = tokens[1]
                    tmp["eduDiploma"] = tokens[2]
                    id += 1
                    self.result["eduList"].append(tmp)

                    # if res:
                    #     # 基本信息中的最高学历学校，专业
                    #     if not self.result["baseInfo"]["recentSchName"]:
                    #         self.result["baseInfo"]["recentSchName"] = res[0]["schName"]
                    #     if not self.result["baseInfo"]["recentMajorName"]:
                    #         self.result["baseInfo"]["recentMajorName"] = res[0]["majorName"]

    # 工作经历 4
    def regular_workexp(self):

        soup = ""
        for field in self.field_list:
            if re.search(u"工作经", field.get_text()):
                soup = field.find_next("table")
                break

        self.work_html = soup.get_text().strip() if soup else ""
        #        print soup
        if soup:
            rows = soup.find_all("tr")
            id = 1
            tokens, tmp = [], []
            #            print rows
            for item in rows:
                if item.find("hr"):
                    tokens.append(tmp)
                    tmp = []
                    continue
                else:
                    tmp.append(item)
                #            print tmp
            if tmp:
                tokens.append(tmp)

            for token in tokens:

                #                print len(tokens)
                #                print "token[0]: %s\ntoken[1]: %s\ntoken[2]: %s" %(token[0], token[1], token[2])
                tmp = self.get_jobDict()
                #                print len(token)
                if len(token) >= 2:
                    tmp["itemId"] = str(id)
                    job_title = re.sub(u"[\s\r\n　]", "", token[0].find("td").get_text())
                    tmp["jobStart"] = self.clean_edu_time(
                        self.JOB_START.search(job_title).group(1)) if self.JOB_START.search(job_title) else job_title[
                                                                                                            :6]
                    tmp["jobEnd"] = self.clean_edu_time(self.JOB_END.search(job_title).group(1)) if self.JOB_END.search(
                        job_title) else ""
                    tmp["jobDuration"] = self.JOB_DURATION.search(job_title).group(
                        1).strip() if self.JOB_DURATION.search(job_title) else ""

                    tmp["incEmployee"] = self.INC_SCALE.search(job_title).group().strip() if self.INC_SCALE.search(
                        job_title) else ""

                    if len(token) >= 3:
                        jobDescStr = token[-1].get_text().strip()
                        # print jobDescStr
                        jobDesc = re.search(u'工作内容：(.*)', jobDescStr)
                        # print jobDesc.group(1)
                        if jobDesc:
                            # print 'yes'
                            tmp["jobDesc"] = re.sub(u'#.*?#', '', token[-1].get_text(separator='\n').strip())
                            # print tmp["jobDesc"]
                        else:
                            # print 'no'
                            # print len(token)
                            # print token[3]
                            # job_tmp = re.search('<td(.*?)>(.*?)</td>', str(token[-1]))
                            # job_tmp_notags = re.sub('<br/>', '\n', job_tmp.group(2))
                            # print token[3].get_text()
                            # print self.result['baseInfo']['cvId']
                            if self.result['baseInfo']['cvId'] == '330482369' or self.result['baseInfo']['cvId'] == '333633446'\
                                    or self.result['baseInfo']['cvId'] == '338845280' or self.result['baseInfo']['cvId'] == '65996657':
                                if len(token) > 3:
                                    tmp["jobDesc"] = re.sub(u'#.*?#', '', token[3].get_text(separator='\n').strip())
                            else:
                                tmp["jobDesc"] = re.sub(u'#.*?#', '', token[-1].get_text(separator='\n').strip())


                        # print tmp['jobDesc']
                        # print job_title
                    if job_title:

                        if token[0].find("td").find("b") and not re.search(u"年|月", job_title):
                            tmp["incName"] = token[0].find("td").find("b").get_text().strip()
                        else:
                            if self.INC_NAME.search(job_title):
                                #                                print self.INC_NAME.search(job_title).group(1)
                                tmp["incName"] = self.INC_NAME.search(job_title).group(1).strip()
                            else:
                                tmp["incName"] = ""

                        if re.search(u"所属行业", token[1].get_text()):
                            tmp["incIndustrys"] = token[1].find_all("td")[-1].get_text().strip()
                        else:
                            tmp["jobPosition"] = token[1].find_all("td")[-1].get_text().strip()
                            tmp["jobDepartment"] = token[1].find_all("td")[0].get_text().strip()

                        if "jobDesc" not in tmp.keys():
                            tmp["jobDesc"] = token[-1].find_all("td")[-1].get_text(separator='\n').strip()

                        try:
                            jobTagItem = token[2].find_all("td")
                        except:
                            pass
                           #print self.result['baseInfo']['cvId']
                        else:
                            if len(jobTagItem) == 2:
                                tmp["jobPosition"] = re.sub(u'\s+', '', jobTagItem[1].get_text().strip())
                                tmp["jobDepartment"] = jobTagItem[0].get_text().strip()
                            elif len(jobTagItem) == 3:
                                tmp["jobPosition"] = jobTagItem[1].get_text().strip()
                                tmp["jobDepartment"] = jobTagItem[0].get_text().strip()
                                tmp["jobSalary"] = jobTagItem[2].get_text().strip()


                    else:

                        if token[0].find("td").find('b'):
                            tmp["incName"] = token[0].find("td").find("b").get_text().strip()

                        if re.search(u"职位名称", token[1].get_text()):
                            tmp["jobPosition"] = token[1].find("td").find("b").get_text().strip()
                            tmp["jobDepartment"] = self.JOB_DEPARTMENT.search(token[1].find('td').get_text()).group(
                                1) if self.JOB_DEPARTMENT.search(token[1].find("td").get_text()) else "None"

                        if re.search(u"行业", token[2].get_text()):
                            tmp["incIndustrys"] = token[2].find("td").get_text().strip()[3:]

                    id_ma = 1
                    for t in token[4:]:

                        ttext = t.get_text()

                        # print ttext
                        reportTo = re.search(u'汇报对象：(.*)', ttext)
                        underNum = re.search(u'下属人数：(\d+)', ttext)
                        witness = re.search(u'证 明 人：(.*)', ttext)
                        leaveReason = re.search(u'离职原因：(.*)', ttext)
                        achieveDesc = re.search(u'工作业绩：(.*)', ttext)
                        tmp['manageExp']['itemId'] = str(id_ma)
                        if reportTo:
                            tmp['manageExp']['reportTo'] = reportTo.group(1)
                        elif underNum:
                            tmp['manageExp']['underNum'] = underNum.group(1)
                        elif witness:
                            tmp['manageExp']['witness'] = witness.group(1)
                        elif leaveReason:
                            tmp['manageExp']['leaveReason'] = leaveReason.group(1)
                        elif achieveDesc:
                            tmp['manageExp']['achieveDesc'] = achieveDesc.group(1)
                        id_ma += 1

                    id += 1
                    self.result["jobList"].append(tmp)

    # 语言技能 5
    def regular_language(self):

        soup = ""
        for field in self.field_list:
            if re.search(u"语言.?能.?", field.get_text()):
                soup = field.find_next("table")
                if soup and soup.find_all("table"):
                    soup = soup.find_all("table")[-1]
                break
        self.language_html = soup.get_text().strip() if soup else ""
        res = []
        id = 1
        if soup:
            rows = soup.find_all("tr")
            for item in rows:
                tokens = [i.get_text() for i in item.find_all("td") if i]
                if len(tokens) != 2:
                    tokens = re.split(u"[:：]", item.get_text(), maxsplit=1)
                if not len(tokens) == 2:
                    tokens = re.split(u"[（\(]", item.get_text())
                if len(tokens) == 2:
                    tmp = self.get_languageDict()
                    tmp["itemId"] = str(id)
                    tmp["languageName"] = re.sub(u"[\s+：:　]", "", tokens[0])  # .split("（")[0]
                    tmp["languageLevel"] = re.sub(u"[\s+　]", "", tokens[1])
                    res.append(tmp)
                    id += 1

        self.result["languageList"] = res

    # 　证书 6
    def regular_cert(self):

        soup = ""
        for field in self.field_list:
            if field and re.search(u"证书", field.get_text()):
                soup = field.find_next("table")
                break

        self.cert_html = soup.get_text().strip() if soup else ""
        res = []
        id = 1
        if soup:
            items = soup.find_all("tr")
            for item in items:
                tokens = item.find_all("td")
                if len(tokens) < 2: continue
                tmp = self.get_certDict()

                tmp["itemId"] = str(id)
                tmp["certTime"] = self.clean_edu_time(tokens[0].get_text())
                certName = tokens[1].get_text().strip()
                tmp["certName"] = re.sub(u"#.*?#", '', certName)

                if len(tokens) == 3:
                    tmp["certLevel"] = tokens[2].get_text().strip()
                else:
                    tmp["certLevel"] = "None"
                # cert_str = tmp["certName"]
                # find_level = self.CERT_LEVEL.search(cert_str)
                # if find_level:
                #     tmp["certLevel"] = find_level.group()
                #     tmp["certName"] = tmp["certName"]
                # elif len(tokens)>2:
                #     tmp["certLevel"] = tokens[2].get_text().strip()

                if tmp:
                    res.append(tmp)
                    id += 1

        self.result["certList"] = res

    # 技能 7
    def regular_skill(self):
        """
        技能模块
        """

        soup = ""
        for field in self.field_list:
            if re.search(u"技能", field.get_text()):
                soup = field.find_next("table")
                if soup and soup.find_all("table"):
                    soup = soup.find_all("table")[-1]
                break
        self.skill_html = soup.get_text().strip() if soup else ""
        res = []
        id = 1
        if soup:
            #            items = soup.find_all("table",limit=4)[-1].find_all("tr") if soup.find("table") else []
            items = soup.find_all("tr")
            for item in items:
                tokens = [token.get_text() for token in item.find_all("td")]
                if len(tokens) < 2 or re.search(u"名称", tokens[0]): continue
                tmp = self.get_skillDict()
                tmp["itemId"] = str(id)
                tmp["skillName"] = tokens[0].strip().lower()
                tmp["skillLevel"] = tokens[1].strip()

                if len(tokens) > 2:
                    tmp["skillDuration"] = tokens[2].strip()
                else:
                    find_duration = re.search("\d+月|[半一二三四五六七八九十\d]年", item.get_text())
                    tmp["skillDuration"] = find_duration.group() if find_duration else "None"

                if tmp:
                    res.append(tmp)
                    id += 1

        self.result['skillList'] = res

    # 项目经验 8
    def regular_project(self):

        soup = ""
        for field in self.field_list:
            if re.search(u"项目经.", field.get_text()):
                soup = field.find_next("table")
                break

        self.project_html = soup.get_text().strip() if soup else ""
        res = []
        id = 1
        if soup:
            items = soup.find_all("tr")

            tokens, tmpitem = [], []
            for item in items:
                if item.find("hr"):
                    tokens.append(tmpitem)
                    tmpitem = []
                    continue
                elif item:
                    tmpitem.append(item)
            if tmpitem:
                tokens.append(tmpitem)

            for token in tokens:

                # 解析第一行项目标题
                title_str = re.sub(u"[\s\r\n　]", "", token[0].get_text())
                tmp = self.get_proDict()
                tmp["itemId"] = str(id)
                tmp["proStart"] = self.clean_edu_time(
                    self.JOB_START.search(title_str).group(1)) if self.JOB_START.search(title_str) else "None"
                tmp["proEnd"] = self.clean_edu_time(self.JOB_END.search(title_str).group(1)) if self.JOB_END.search(
                    title_str) else "None"
                tmp["proName"] = re.sub("\s+", "", self.PROJ_NAME.search(title_str).group(1)) if self.PROJ_NAME.search(
                    title_str) else title_str

                # 　解析剩余行标签
                field_list = [item.find("td") for item in token[1:]]
                for field in field_list:
                    field_str = field.get_text().strip()

                    if re.search(u"软件环境", field_str):
                        tmp["softwareEnv"] = field.find_next("td").get_text()
                    elif re.search(u"硬件环境", field_str):
                        tmp["hardwareEnv"] = field.find_next("td").get_text()
                    elif re.search(u"开发工具", field_str):
                        tmp["devTool"] = field.find_next("td").get_text()
                    elif re.search(u"项目描述", field_str):
                        tmp["proDesc"] = field.find_next("td").get_text(separator='\n')
                    elif re.search(u"责任描述", field_str):
                        tmp["proDuty"] = field.find_next("td").get_text(separator='\n')

                if tmp:
                    res.append(tmp)
                    id += 1

        self.result['proList'] = res

    # 培训经历 9
    def regular_train(self):

        soup = ""
        for field in self.field_list:
            if re.search(u"培训经.", field.get_text()):
                soup = field.find_next("table")
                break

        self.train_html = soup.get_text().strip() if soup else ""
        res = []
        id = 1
        if soup:
            items = soup.find_all("tr")
            for item in items:

                tokens = [item.get_text() for item in item.find_all("td") if len(item.get_text()) > 1]

                if len(tokens) < 3:
                    continue
                # print res
                tmp = self.get_trainDict()
                tmp["itemId"] = str(id)
                tmp["trainStart"] = self.clean_edu_time(tokens[0].split(u'-')[0])
                tmp["trainEnd"] = self.clean_edu_time(tokens[0].split(u"-")[-1])
                tmp["trainAgency"] = tokens[1].strip()
                tmp["trainTitle"] = tokens[2].strip()
                if len(tokens) > 3:
                    tmp["trainCert"] = tokens[3].strip()

                tt = item.find_next('td').get_text().strip().split('\\')
                tmp["trainDesc"] = '/'.join(tt)

                # print tmp["trainDesc"]

                res.append(tmp)
                id += 1

        self.result["trainList"] = res
        # print self.result["trainList"]

    def regular_private(self):
        """
        身份证号，联系电话等隐私信息
        """

        base_info = self.topsoup.get_text()
        find_phone = self.PHONE.search(base_info)
        find_email = self.EMAIL.search(base_info)
        find_qq = self.QQ.search(base_info)
        find_idNum = self.IDNUM.search(base_info)

        userName = ""

        if self.HasName:
            find_name = self.topsoup.find_previous("tr").find_previous("tr").find("b")
            if not find_name:
                find_name = self.topsoup.find_previous("tr").find_previous("tr").find("strong")
            if find_name and len(find_name.get_text().strip()) < 5:
                userName = find_name.get_text().strip()

        self.result["privateInfo"]["userName"] = userName if userName else ""
        self.result["privateInfo"]["phoneNumber"] = find_phone.group(1) if find_phone else ""
        self.result["privateInfo"]["email"] = find_email.group(1) if find_email else ""
        self.result["privateInfo"]["qq"] = find_qq.group(1) if find_qq else ""
        self.result["privateInfo"]["idNumber"] = find_idNum.group(1) if find_idNum else ""

        find_key_word = self.soup.find("span", text=re.compile(u"简历关键字"))
        key_words = ""
        if find_key_word and find_key_word.find_next("span", "rsblue"):
            key_words = find_key_word.find_next("span", "rsblue").get_text()
        elif find_key_word and find_key_word.find_next("td"):
            key_words = find_key_word.find_next("td").get_text()

        if key_words and re.search(u"有|熟悉|经验|强|善于|精通|证", key_words):
            self.result["privateInfo"]["keyWords"] = key_words.strip().split()

    # 其他信息 10
    def regular_other(self):
        self.other_html = []
        for field in self.field_list:
            # print field.get_text()
            if re.search(u"自我介绍|个人简介|亮点|自我评价", field.get_text()):
                self.result["others"]["selfIntro"] = field.find_previous("table").get_text(separator='\n')[4:].strip()
                # print self.result["others"]["selfIntro"]
                self.other_html.append(self.result["others"]["selfIntro"])

            elif re.search(u"实践|实习", field.get_text()):
                self.result["others"]["stuPractice"] = re.sub("\s+", " ", field.find_next("table").get_text().strip())
                # print self.result["others"]['stuPractice']
                self.other_html.append(self.result["others"]["stuPractice"])

            elif re.search(u"校内|校园|社团", field.get_text()):
                self.result["others"]["schoolExp"] = re.sub("\s+", " ", field.find_next("table").get_text().strip())
                self.other_html.append(self.result["others"]["schoolExp"])

            elif re.search(u"论文|著作|作品", field.get_text()):
                self.result["others"]["pubWork"] = self.result["others"]["pubWork"] + "\n" + self.CLEAN_TEXT.sub(" ",
                                                                                                                 field.find_next(
                                                                                                                     "table").get_text().strip())
                self.other_html.append(self.result["others"]["pubWork"])

            elif re.search(u"奖项|荣誉", field.get_text()):
                self.result["others"]["gainHoner"] = self.result["others"]["gainHoner"] + "\n" + self.CLEAN_TEXT.sub(
                    " ", field.find_next("table").get_text().strip())
                self.other_html.append(self.result["others"]["gainHoner"])

            elif re.search(u"兴趣|爱好|特长", field.get_text()):
                self.result["others"]["otherHobby"] = self.result["others"]["otherHobby"] + "\n" + self.CLEAN_TEXT.sub(
                    " ", field.find_next("table").get_text().strip())
                self.other_html.append(self.result["others"]["otherHobby"])

                # 附件信息
            elif re.search(u"附件", field.get_text().strip()):
                self.result["others"]["attachment"] = field.find_next("table").get_text()
                self.other_html.append(self.result["others"]["attachment"])

            elif re.search(u"其他信息", field.get_text()):

                if self.resumeType == 1:
                    self.result["others"]["otherInfo"] = field.find_parent("table").get_text().strip()
                else:
                    self.result["others"]["otherInfo"] = field.find_next("table").get_text().strip()
                self.other_html.append(self.result["others"]["otherInfo"])

        if self.HasName == 1:
            find_jobPositionName = re.search(u"应聘职位", self.job_for_soup.get_text())
            if find_jobPositionName:
                self.result["others"]["jobPositionFor"] = self.job_for_soup.find_next("span").get_text().strip()
                self.other_html.append(self.result["others"]["jobPositionFor"])

            find_jobIncName = re.search(u"应聘公司", self.job_for_soup.get_text())
            if find_jobIncName:
                self.result["others"]["jobIncNameFor"] = self.job_for_soup.find_next("span").find_next(
                    "span").get_text().strip()
                self.other_html.append(self.result["others"]["jobIncNameFor"])

            find_updateTime = re.search(u"投递时间", self.job_for_soup.get_text())
            if self.result["baseInfo"]["updateTime"] == "None" and find_updateTime:
                self.result["baseInfo"]["updateTime"] = self.job_for_soup.find_next("span").find_next(
                    "span").get_text().strip()


        elif self.HasName > 1:
            items = self.job_for_soup.find_all("td", limit=6)
            for item in items:
                if re.search(u"应聘职位", item.get_text()):
                    self.result["others"]["jobPositionFor"] = item.find_next_sibling("td").get_text().strip()
                    self.other_html.append(self.result["others"]["jobPositionFor"])
                elif re.search(u"应聘公司", item.get_text()):
                    self.result["others"]["jobIncNameFor"] = item.find_next_sibling("td").get_text().strip()
                    self.other_html.append(self.result["others"]["jobIncNameFor"])
                elif re.search(u"投递时间", item.get_text()):
                    self.result["baseInfo"]["updateTime"] = item.find_next_sibling("td").get_text().strip()
                    break

        # 求职信
        recommendLetter = self.soup.find("table", {"id": "tabCvletter"})
        if recommendLetter:
            text = recommendLetter.get_text().strip()
            self.result["others"]["recommendLetter"] = text[5:].strip()
            self.other_html.append(self.result["others"]["recommendLetter"])
        # 针对粘贴简历
        find_other_info = self.soup.find("div", "titleLineB", text=re.compile(u"其它信息"))
        if find_other_info:
            self.result["others"]["otherInfo"] = find_other_info.find_parent("table").get_text().strip()
            self.other_html.append(self.result["others"]["otherInfo"])

        # 工作地址
        if re.search(u"（(.*)）", self.result["others"]["jobPositionFor"]):
            self.result["others"]["workLoc"] = re.search(u"（(.*)）", self.result["others"]["jobPositionFor"]).group(1)

            self.other_html.append(self.result["others"]["workLoc"])

    def parser(self, htmlContent=None, fname=None, url=None):
        self.preprocess(htmlContent, fname, url)
        self.regular_basic()
        self.regular_private()
        self.regular_expect()
        self.regular_educate()
        self.regular_workexp()
        self.regular_skill()
        self.regular_cert()
        self.regular_language()
        self.regular_project()
        self.regular_train()
        self.regular_other()
        return self.result

    def output(self):
        res = "\n"
        for k in self.result:
            res += k + ":" + "\n"
            if isinstance(self.result[k], dict):
                for kk, vv in self.result[k].iteritems():
                    res += '%1s: %s\n' % (kk, vv)
            elif isinstance(self.result[k], list):
                for i, exp in enumerate(self.result[k]):
                    res += "%12s\n" % (str(i + 1))
                    if isinstance(exp, dict):
                        for kk, vv in exp.iteritems():
                            res += "%22s: %s\n" % (kk, vv)
                    elif isinstance(exp, tuple):
                        for kk in exp:
                            res += '%22s \n' % (kk)
                    res += " " * 10 + '---' * 10 + '\n'
            else:
                res += " " * 10 + "%s\n" % (self.result[k])
        return res

def replace(param):
    dic = {
        'base': 1,
        'expect': 2,
        'education': 3,
        'work': 4,
        'language': 5,
        'cert': 6,
        'skill': 7,
        'project': 8,
        'train': 9,
        'other': 0
    }
    return str(dic[param])

import simplejson as json

if __name__ == "__main__":
    """
    测试
    """
    test = CvParser51Job()
    with open('/home/howe/cv/51job/338845280.html') as fr:
        lines = fr.readlines()

    htmlContent = '\n'.join(lines)
    # print htmlContent
    result = test.parser(htmlContent)
    # print json.dumps(result,ensure_ascii=False,indent=4)

    # path = './data/errorcvs/'
    # fnames = [ path+fname for fname in os.listdir(path) if fname.startswith("3385")][-200:]
    #
    # for i,fname in enumerate(fnames):
    #     print i+1,'='*20,fname
    #     htmlContent = codecs.open(fname,'rb','utf-8').read()
    #     test.parser(htmlContent = htmlContent)
    #     print(json.dumps(test.result,ensure_ascii=False,indent=4))
    # fw = open('cv_work_education.txt','a')
    # path ='/home/zhangzq/PycharmProjects/untitled/data/cv_51job/'
    # for file_name in os.listdir(path):
    #    file_name=os.path.join(path,file_name)
    #    htmlContent = codecs.open(file_name,'rb','utf-8').read()
    #    test.parser(htmlContent = htmlContent)
    #    res={}
    #    res['work']=str(test.work_html)
    #    res['education'] =str(test.edu_html)
    #    res['from']='51job'
    #    fw.write(json.dumps(res)+'\n')
    # fw.close()
    # f = open('/home/howe/cv/output/output_51job_01', 'w')
    #
    # path = '/home/howe/cv/51job/'
    # for file_name in os.listdir(path):
    #     file_name = os.path.join(path, file_name)
    #     # print file_name
    #     htmlContent = codecs.open(file_name, 'rb').read()
    #     test.parser(htmlContent=htmlContent)
    #     res = {}
    #     res['base'] = str(test.base_html)  # 1
    #     res['expect'] = str(test.expect_html)   # 2
    #     res['education'] = str(test.edu_html)   # 3
    #     res['work'] = str(test.work_html)   # 4
    #     res['language'] = str(test.language_html)   # 5
    #     res['cert'] = str(test.cert_html)   # 6
    #     res['skill'] = str(test.skill_html)   # 7
    #     res['project'] = str(test.project_html)   # 8
    #     res['train'] = str(test.train_html)   # 9
    #     res['other'] = ' '.join(test.other_html)  # 0
    #     for key in res.keys():
    #         if res[key] is "":
    #            continue
    #
    #         temp = re.sub('\s', '', res[key])
    #         f.write(replace(key) + '\t' + temp + '\n')
    # htmlContent = codecs.open('/home/howe/下载/问题简历/解析不出 51 有联系方式 韩朋朋_简历.html','rb').read()
    # test.parser(htmlContent = htmlContent)
    # res={}
    # res['base'] = str(test.base_html)  # 1
    # res['expect'] = str(test.expect_html)   # 2
    # res['education'] = str(test.edu_html)   # 3
    # res['work']=str(test.work_html)   # 4
    # res['languange']=str(test.language_html)   # 5
    # res['cert']=str(test.cert_html)   # 6
    # res['skill']=str(test.skill_html)   # 7
    # res['project']=str(test.project_html)   # 8
    # res['train']=str(test.train_html)   # 9
    # res['other']=' '.join(test.other_html)  # 10
    # with open('out.txt','w') as fw:
    #     fw.write(json.dumps(res, ensure_ascii=False, indent=4)+'\n\n')
    #
    # print(json.dumps(res,ensure_ascii=False,indent=4))
    # print(json.dumps(test.result,ensure_ascii=False,indent=4))
