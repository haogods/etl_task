#!/usr/bin/env python
# coding=utf-8

import sys,re,codecs
from bs4 import BeautifulSoup
from urllib2 import urlopen
from collections import OrderedDict
from base import CvTopParser
import os
reload(sys)
sys.setdefaultencoding('utf-8')


class CvParserLiepin(CvTopParser):
    """
    对猎聘的简历进行解析
    """
    def __init__(self):

        CvTopParser.__init__(self)

        self.PAY = re.compile(u"(\d+[\s\-])?\d+元")
        self.UPDATETIME = re.compile("更新日期[:：\s](\d+年\d+月\d+日)")
        self.ADDR = re.compile(u"现居住地[：:\s](\S+)")
        self.result = OrderedDict()

    def preprocess(self,htmlContent=None,fname=None,url=None):
        if url!=None:
            self.html= urlopen(url).read().decode('utf-8')
        elif htmlContent:
            self.html = htmlContent
        elif fname:
            self.html = codecs.open(fname,'rb','utf-8').read()
        else:
            raise Exception("input error")

        if re.search(u"已被(求职者)?删除|无法查看",self.html):
            raise Exception("error: input illegal cv ")

        if re.search("猎聘猎头",self.html):
            self.type=1 ##猎聘猎头cv
        else:
            self.type=0 ##猎聘企业cv
        self.soup = BeautifulSoup(self.html,"lxml")

        #print self.type

        if self.type==0:
            self.resume = self.soup.find("div","resume-main")
            self.basic_soup = self.resume.find("div","basic-main")
            self.field_list = self.resume.find_all("div","section-title")
        else:
            self.resume = self.soup.find("div","resume")
            self.basic_soup = self.resume.find("div","resume-basic")
            self.field_list = []



        self.refresh()
        self.result["cvFrom"] = "liepin"


    # 解析基本信息
    def regular_basic(self):

        if self.resume.find("div","resume-info"):
            find_update_time = self.resume.find("div","resume-info").find("p",text=re.compile(u"最新登录"))
        else:
            find_update_time=self.resume.find("span","resume-sub-info")
        if find_update_time:
            self.result['baseInfo']["cvId"] = find_update_time.get_text().split(u'|')[0].strip()[5:]
            self.result['baseInfo']["updateTime"] = find_update_time.get_text().split(u'|')[1].strip()[5:]

        tags = []
        rows = [ line for line in self.basic_soup.find("table").find_all("tr") if self.basic_soup.find("table") ]

        self.base_html = []
        for row in rows:
            if self.type==0:
                tags.extend(row.find_all("th"))
            elif self.type==1:
                tags.extend(row.find_all("td"))
        # for tag in tags:
        #     print tag.get_text()
        if self.type==1:
            for tag in tags:
                if re.search(u"姓名",tag.get_text()):
                    self.result["privateInfo"]["userName"]=tag.get_text().strip()[3:]
                    # self.base_html.append(self.result["privateInfo"]["userName"])
                elif re.search(u"性别",tag.get_text()):
                    self.result['baseInfo']["gender"] =tag.get_text().strip()[3:]
                    # self.base_html.append(self.result["privateInfo"]["gender"])
                elif re.search(u"联系电话",tag.get_text()):
                    self.result["privateInfo"]["phoneNumber"]=tag.get_text().strip()[4:]
                    # self.base_html.append(self.result["privateInfo"]["phoneNumber"])
                elif re.search(u"年龄",tag.get_text()):
                    self.result['baseInfo']["age"]=tag.get_text().strip()[3:]
                    # self.base_html.append(self.result["privateInfo"]["age"])
                elif re.search(u"电子邮件",tag.get_text()):
                    self.result["privateInfo"]["email"]=tag.get_text().strip()[5:]
                    # self.base_html.append(self.result["privateInfo"]["email"])
                elif re.search(u"学历",tag.get_text()):
                    self.result['baseInfo']["nowDiploma"]=tag.get_text().strip()[3:]
                    # self.base_html.append(self.result["privateInfo"]["nowDiploma"])
                elif re.search(u"婚姻状况",tag.get_text()):
                    self.result['baseInfo']["marriage"]=tag.get_text().strip()[5:]
                    # self.base_html.append(self.result["privateInfo"]["marriage"])
                elif re.search(u"工作年限",tag.get_text()):
                    self.result['baseInfo']["nowWorkAge"]=tag.get_text().strip()[5:]
                    # self.base_html.append(self.result["privateInfo"]["nowWorkAge"])
                elif re.search(u"所在地",tag.get_text()):
                    self.result['baseInfo']["nowAddress"]=tag.get_text().strip()[4:]
                    # self.base_html.append(self.result["privateInfo"]["nowAddress"])


            #目前职业概况
            find_status = self.basic_soup.find_next("strong",text=re.compile(u"目前职业"))
            tags=find_status.find_next("tbody").find_all("td")
            for tag in tags:
                if re.search(u"所在行业",tag.get_text()):
                    self.result['baseInfo']["nowIndustry"] = tag.get_text().strip()[5:]
                    self.base_html.append(self.result["baseInfo"]["nowIndustry"])
                elif re.search(u"公司名称",tag.get_text()):
                    self.result['baseInfo']["nowInc"] = tag.get_text().strip()[5:]
                    self.base_html.append(self.result["baseInfo"]["nowInc"])
                elif re.search(u"所任职位",tag.get_text()):
                    self.result['baseInfo']["nowPosition"] = tag.get_text().strip()[5:]
                    self.base_html.append(self.result["baseInfo"]["nowPosition"])
                elif re.search(u"目前薪资",tag.get_text()):
                    self.result['baseInfo']["nowSalary"] = tag.get_text().strip()[5:]
                    self.base_html.append(self.result["baseInfo"]["nowSalary"])

            return


        # for tag in tags:
        #     print tag
        for tag in tags:
            if re.search(u"姓名",tag.get_text()):
                self.result["privateInfo"]["userName"] = tag.find_next_sibling("td").get_text().strip()
                # print self.result["privateInfo"]["userName"]
                self.base_html.append(self.result["privateInfo"]["userName"])
            elif re.search(u"性别",tag.get_text()):
                self.result['baseInfo']["gender"] = tag.find_next_sibling("td").get_text().strip()
                self.base_html.append(self.result["baseInfo"]["gender"])
            elif re.search(u"手机号",tag.get_text()):
                self.result["privateInfo"]["phoneNumber"] = tag.find_next_sibling("td").get_text().strip()
                self.base_html.append(self.result["privateInfo"]["phoneNumber"])
            elif re.search(u"年龄",tag.get_text()):
                self.result['baseInfo']["age"] = tag.find_next_sibling("td").get_text().strip()
                self.base_html.append(self.result["baseInfo"]["age"])
            elif re.search(u"电子邮件",tag.get_text()):
                self.result["privateInfo"]["email"] = tag.find_next_sibling("td").get_text().strip()
                self.base_html.append(self.result["privateInfo"]["email"])
            elif re.search(u"教育程度",tag.get_text()):
                self.result['baseInfo']["nowDiploma"] = tag.find_next_sibling("td").get_text().strip()
                self.base_html.append(self.result["baseInfo"]["nowDiploma"])
            elif re.search(u"工作年限",tag.get_text()):
                self.result['baseInfo']["nowWorkAge"] = tag.find_next_sibling("td").get_text().strip()
                self.base_html.append(self.result["baseInfo"]["marriage"])
            elif re.search(u"婚姻",tag.get_text()):
                self.result['baseInfo']["marriage"] = tag.find_next_sibling("td").get_text()
                self.base_html.append(self.result["baseInfo"]["marriage"])
            elif re.search(u"职业状态",tag.get_text()):
                self.result['jobExp']["workStatus"] = tag.find_next_sibling("td").get_text()
                self.base_html.append(self.result["jobExp"]["workStatus"])
            elif re.search(u"所在地",tag.get_text()):
                self.result['baseInfo']["nowAddress"] = tag.find_next_sibling("td").get_text().strip()
                self.base_html.append(self.result["baseInfo"]["nowAddress"])
            elif re.search(u"国籍",tag.get_text()):
                self.result['baseInfo']["country"] = tag.find_next_sibling("td").get_text().strip()
                self.base_html.append(self.result["baseInfo"]["country"])
            elif re.search(u"户籍",tag.get_text()):
                self.result['baseInfo']["nowHukou"] = tag.find_next_sibling("td").get_text().strip()
                self.base_html.append(self.result['baseInfo']["nowHukou"])
            elif re.search(u"政治面貌",tag.get_text()):
                self.result['baseInfo']["nowPolistatus"] = tag.find_next_sibling("td").get_text().strip()
                self.base_html.append(self.result['baseInfo']["nowPolistatus"])

        # 目前职业情况
        find_status = self.basic_soup.find_next("h4",text=re.compile(u"目前职业"))
        # print find_status
        if find_status and find_status.find_next("table"):
            tags = []
            rows = find_status.find_next("table").find_all("tr")
            # for row in rows:
            #     print row.get_text()

            for row in rows:
                tags.extend(row.find_all("th"))
            # for tag in tags:
            #     print tag.get_text()
            for tag in tags:
                if re.search(u"所在行业",tag.get_text()):
                    self.result['baseInfo']["nowIndustry"] = re.sub("\s","",tag.find_next_sibling("td").get_text().strip())
                    self.base_html.append(self.result['baseInfo']["nowIndustry"])
                elif re.search(u"公司名称",tag.get_text()):
                    self.result['baseInfo']["nowInc"] = tag.find_next_sibling("td").get_text().strip()
                    self.base_html.append(self.result["baseInfo"]["nowInc"])
                elif re.search(u"所任职位",tag.get_text()):
                    self.result['baseInfo']["nowPosition"] = tag.find_next_sibling("td").get_text().strip()
                    self.base_html.append(self.result["baseInfo"]["nowPosition"])
                elif re.search(u"目前年薪",tag.get_text()):
                    self.result['baseInfo']["nowSalary"] = tag.find_next_sibling("td").get_text().strip()
                    self.base_html.append(self.result["baseInfo"]["nowSalary"])

    # 求职意向
    def regular_expect(self):
        self.exp_html = []
        if self.type==1:
            find_status = self.basic_soup.find_next("strong",text=re.compile(u"职业发展意向"))
            tags=find_status.find_next("tbody").find_all("td")

            for tag in tags:
                if re.search(u"期望行业",tag.get_text()):
                    self.result['jobExp']["expIndustrys"] = tag.get_text().strip()[5:]
                    # print self.result['jobExp']['expIndustrys']
                    self.exp_html.append(self.result['jobExp']["expIndustrys"])
                elif re.search(u"期望职位",tag.get_text()):
                    self.result['jobExp']["expJobCates"] = tag.get_text().strip()[5:]
                    self.exp_html.append(self.result['jobExp']["expJobCates"])
                elif re.search(u"期望地点",tag.get_text()):
                    self.result['jobExp']["expLocations"] = tag.get_text().strip()[5:]
                    self.exp_html.append(self.result['jobExp']["expLocations"])
                elif re.search(u"期望月薪",tag.get_text()):
                    self.result['jobExp']["expSalary"] = re.sub(u'\s+',u'',tag.get_text().strip()[5:])
                    self.exp_html.append(self.result['jobExp']["expSalary"])
            return


        find_work_exp = self.basic_soup.find_next("h4",text=re.compile(u"职业发展意向"))
        # print find_work_exp
        if find_work_exp and find_work_exp.find_next("table"):
            tags = [ line.find("th") for line in find_work_exp.find_next("table").find_all("tr")]
            # print tags.get_text()
            for tag in tags:
                if re.search(u"期望行业",tag.get_text()):
                    self.result['jobExp']["expIndustrys"] = re.sub("\s","",tag.find_next_sibling("td").get_text().strip())
                    self.exp_html.append(self.result['jobExp']["expIndustrys"])
                elif re.search(u"期望职位",tag.get_text()):
                    self.result['jobExp']["expJobCates"] = tag.find_next_sibling("td").get_text().strip()
                    self.exp_html.append(self.result['jobExp']["expJobCates"])
                elif re.search(u"期望地点",tag.get_text()):
                    self.result['jobExp']["expLocations"] = tag.find_next_sibling("td").get_text().strip()
                    self.exp_html.append(self.result['jobExp']["expLocations"])
                elif re.search(u"期望年薪",tag.get_text()):
                    self.result['jobExp']["expSalary"] = tag.find_next_sibling("td").get_text().strip()
                    self.exp_html.append(self.result['jobExp']["expSalary"])

    # 教育经历
    def regular_educate(self):

        res = []
        id = 1
        if self.type==1:
            edusoup = self.soup.find("div",{"class":"resume-education"})
            # print edusoup
            items = edusoup.find_all("table")
            for item in items:
                rows = item.find_all("tr")
                tmp = self.get_eduDict()
                tmp["itemId"] = str(id)

                tmp["schName"]=re.split(u"（|-|）",rows[0].get_text())[0].strip()
                tmp["eduStart"]=re.split(u"（|-|）",rows[0].get_text())[1].strip()
                tmp["eduEnd"]=re.split(u"（|-|）",rows[0].get_text())[2].strip()

                if len(rows)>1:
                    tokens = rows[1].find_all("td")
                    for token in tokens:
                        if re.search(u"专业",token.get_text()):
                            tmp["majorName"] = token.get_text().strip()[3:]
                        elif re.search(u"学历",token.get_text()):
                            tmp["eduDiploma"] = token.get_text().strip()[3:]
                        elif re.search(u"是否统招",token.get_text()):
                            tmp["eduTongZhao"]=token.get_text().strip()[5:]
                res.append(tmp)
                id += 1

            if res:
            # 基本信息中的最高学历学校，专业
                self.result["baseInfo"]["recentSchName"] = res[0]["schName"]
                self.result["baseInfo"]["recentMajorName"] = res[0]["majorName"]
            self.result['eduList'] = res
            return


        edusoup = ""
        for field in self.field_list:
            if re.search(u"教育经历",field.find("h2").get_text()):
                edusoup = field.find_next("div","section-content")
                break
        self.edu_html = edusoup.get_text().strip() if edusoup else ""
        if edusoup:
            items = edusoup.find_all("table","field")
            for item in items:
                rows = item.find_all("tr")
                for row in rows:
                    tokens = row.find_all("td")
                    tmp = self.get_eduDict()
                    if len(tokens)>2:
                        tmp["itemId"] = str(id)
                        tmp["eduStart"] = self.clean_edu_time(tokens[0].get_text().split(u'–')[0])
                        tmp["eduEnd"] =  self.clean_edu_time(tokens[0].get_text().split(u'–')[-1])
                        tmp["schName"] = tokens[0].find("strong").get_text().strip()
                        tmp["majorName"] = tokens[1].find("span").get_text().strip()
                        tmp["eduDiploma"] = tokens[2].find("span","filter-zone").get_text().strip()
                        if res and tmp["eduStart"] == res[-1]["eduStart"] and tmp["eduDiploma"] == res[-1]["eduDiploma"]:
                            continue
                        res.append(tmp)
                        id += 1
        if res:
            # 基本信息中的最高学历学校，专业
            self.result["baseInfo"]["recentSchName"] = res[0]["schName"]
            self.result["baseInfo"]["recentMajorName"] = res[0]["majorName"]
        self.result['eduList'] = res


    #　工作经历
    def regular_workexp(self):

        worksoup = ""
        for field in self.field_list:
            if re.search(u"工作经历",field.find("h2").get_text()):
                worksoup = field
                break
        self.work_html = worksoup.get_text().strip() if worksoup else ""
        res = []
        if worksoup:

            items = worksoup.find_next_siblings("div","section-content")
            id = 1

            for item in items:
                tmp = self.get_jobDict()
                if item.find("div","list-title"):
                    tokens = [ token.get_text() for token in item.find("div","list-title").find_all("span")]

                    # tmp["itemId"] = id
                    # tmp["jobStart"] = self.clean_edu_time(tokens[0].split(u"-")[0])
                    # tmp["jobEnd"] = self.clean_edu_time(tokens[0].split(u"-")[1])
                    jobStart_total = self.clean_edu_time(tokens[0].split(u"-")[0])
                    jobEnd_total = self.clean_edu_time(tokens[0].split(u"-")[1])
                    tmp["incName"] = tokens[1].strip()
                    tmp["jobDuration"] = tokens[2].strip()[1:-1]

                if item.find("div","list-content"):
                    # positionList=[]
                    # itemId=1
                    #一个公司多个职位 zhangzq@20160311

                    #公司性质|人数|行业|描述

                    tags = item.find("div","list-content").find("table").find_all("td")
                   # print tags
                    for tag in tags:
                        if re.search(u"公司行业",tag.get_text()):
                            inc_tokens = re.sub("\s","",tag.get_text()).split(u"|")

                            for token in inc_tokens:
                                if re.search(u"公司行业",token):
                                    # print token
                                    if len(token.split(u"：")) > 2:
                                        # tmp_inc = re.search(u"公司行业：(.*?)",token)
                                        # print tmp_inc.group(2)
                                        # tmp["incIndustrys"] = token.split(u"：")[1].strip()
                                        continue
                                    else:
                                        tmp["incIndustrys"] = token.split(u"：")[-1].strip()
                                    # print tmp["incIndustrys"]
                                elif re.search(u"公司规模",token):
                                    tmp["incEmployee"] = token.split(u"：")[-1].strip()
                                elif re.search(u"公司性质",token):
                                    tmp["incType"] = token.split(u"：")[-1].strip()
                        if re.search(u"公司描述",tag.get_text()):
                            # print tag.find_next('span',"filter-zone" ).get_text().strip()
                            tmp["incDesc"] = tag.find_next("span", "filter-zone").get_text().strip()
                        else:
                            tmp["incDesc"] = ""

               #         if tag.find_next('span',"filter-zone"):
                         #   print tag.find_next('span',"filter-zone" ).get_text().strip()
                         #   tmp["incDesc"] = tag.find_next('span',"filter-zone" ).get_text().strip()


                    #历任职位
                    tags = item.find("div","list-content").find_all("div","list-title")
                    for tag in tags:


                        # position_tmp=OrderedDict()
                        # position_tmp["itemId"]= itemId
                        # position_tmp["positionStart"]=tag.find_all("span")[0].get_text().split('-')[0].strip()
                        # position_tmp["positionEnd"]=tag.find_all("span")[0].get_text().split('-')[1].strip()
                        # position_tmp["jobPosition"]=tag.find_all("span")[1].get_text()
                        tmp["jobStart"] = tag.find_all("span")[0].get_text().split('-')[0].strip()
                        tmp["jobEnd"] = tag.find_all("span")[0].get_text().split('-')[1].strip()
                        if tmp["jobStart"] is None:
                            tmp["jobStart"] = jobStart_total
                        if tmp["jobEnd"] is None:
                            tmp["jobEnd"] = jobEnd_total
                        tmp["jobPosition"] = tag.find_all("span")[1].get_text()


                        position_info = tag.find_next("table")
                        items=position_info.find_all("th")
                        for item in items:
                            if re.search(u"所在地区",item.get_text()):
                                # position_tmp["location"] = item.find_next("td").get_text()
                                tmp["location"] = item.find_next("td").get_text()
                            elif re.search(u"所在部门",item.get_text()):
                                # position_tmp["department"] = item.find_next("td").get_text()
                                tmp["jobDepartment"] = item.find_next("td").get_text()
                            elif re.search(u"汇报对象",item.get_text()):
                                # position_tmp["report"] = item.find_next("td").get_text()
                                tmp["report"] = item.find_next("td").get_text()
                            elif re.search(u"下属人数",item.get_text()):
                                # position_tmp["subTimeSize"] = item.find_next("td").get_text()
                                tmp["subTimeSize"] = item.find_next("td").get_text()
                            elif re.search(u"薪酬情况",item.get_text()):
                                # position_tmp["salary"] = re.sub(u"\s+",'',item.find_next("td").get_text().strip())
                                tmp["jobSalary"] = re.sub(u"\s+", '', item.find_next("td").get_text().strip())
                        # print res
                        position_desc = tag.find_next("table").find_next("table")
                        items=position_desc.find_all("th")
                        for item in items:

                            if re.search(u"工作职责", item.get_text()):
                                # position_tmp["jobDesc"] = item.find_next("td").get_text(separator='\n')
                                tmp["jobDesc"] = item.find_next("td").get_text(separator='\n')
                            elif re.search(u"工作业绩", item.get_text()):
                                # position_tmp["jobAchievement"] = item.find_next("td").get_text(separator='\n')
                                tmp["jobAchievement"] = item.find_next("td").get_text(separator='\n')
                        tmp["itemId"] = str(id)
                        # print tmp
                        id += 1
                        tt = tmp.copy()
                        # print res
                        res.append(tt)
                        # print res

                        # positionList.append(position_tmp)
                    # print positionList
                    # tmp["positionList"] = positionList

                    '''
                    tags = item.find("div","list-content").find_all("tr")
                    for tag in tags:
                        if re.search(u"公司行业",tag.get_text()):
                            inc_tokens = re.sub("\s","",tag.get_text()).split(u"|")
                            for token in inc_tokens:
                                if re.search(u"公司行业",token):
                                    tmp["incIndustrys"] = token.split(u"：")[-1].strip()
                                elif re.search(u"公司规模",token):
                                    tmp["incEmployee"] = token.split(u"：")[-1].strip()
                                elif re.search(u"公司性质",token):
                                    tmp["incType"] = token.split(u"：")[-1].strip()

                            if re.search(u"公司描述",tag.find_next("span","filter-zone").get_text()):
                                tmp["incDesc"] = tag.find_next("span","filter").get_text().strip()

                        elif re.search(u"所在地区",tag.get_text()):
                            find_jobname = tag.find_previous("span","filter-zone")
                            if find_jobname:
                                tmp["jobPosition"] = find_jobname.get_text().strip()

                            tmp["incLocation"] = tag.find("td").get_text().strip()

                        elif re.search(u"所在部门",tag.get_text()):
                            tmp["jobDepartment"] = tag.find("td").get_text().strip()
                        elif re.search(u"汇报对象",tag.get_text()):
                            tmp["jobReport"] = tag.find("td").get_text().strip()
                        elif re.search(u"下属人数",tag.get_text()):
                            tmp["jobSubTeamSize"] = tag.find("td").get_text().strip()
                        elif re.search(u"工作职责",tag.get_text()):
                            tmp["jobDesc"] = tag.find("td").get_text().strip()
                        elif re.search(u"工作业绩",tag.get_text()):
                            tmp["jobAchievement"] = tag.find("td").get_text().strip()
                if res and "jobDesc" in res[-1] and tmp["jobStart"]==res[-1]["jobStart"] and tmp["jobDesc"]==res[-1]["jobDesc"]:
                    continue
                '''
                # id += 1
                # res.append(tmp)
        # print res
        self.result['jobList'] = res
        # print res


    def regular_language(self):



        res = []
        id = 1

        if self.type==1:
            items = self.soup.find("div",{"class":"resume-language"}).find_all("tr")
            for item in items:
                tmp = self.get_languageDict()
                tmp["itemId"] = str(id)
                tmp["languageName"] = re.sub("\s","",item.get_text())
                res.append(tmp)
                id += 1

            self.result["languageList"] = res
            return

        langsoup = ""
        for field in self.field_list:
            if re.search(u"语言能力",field.find(u"h2").get_text()):
                langsoup = field.find_next("div","section-content")
                break
        self.language_html = langsoup.get_text().strip() if langsoup else ""
        if langsoup:
            items = langsoup.find("table","field").find_all("tr")
            for item in items:
                tmp = self.get_languageDict()
                tmp["itemId"] = str(id)
                tmp["languageName"] = re.sub("\s","",item.get_text())
                res.append(tmp)
                id += 1

        self.result["languageList"] = res


    #　证书
    def regular_cert(self):


        certsoup =""
        for field in self.field_list:
            if re.search(u"证书",field.find("h2").get_text()):
                certsoup = field.find_next("div","section-content")
                break
        self.cert_html = certsoup.get_text().strip() if certsoup else ""
        res = []
        id = 1
        if certsoup:
            items = certsoup.find("table","field").find_all("tr")
            for item in items:
                tokens = item.get_text().split()

                if len(tokens)<2:continue
                tmp=self.get_certDict()
                tmp["itemId"] = str(id)
                tmp["certTime"] = tokens[0].strip()
                tmp["certName"] = tokens[1].strip()

                if item.find_next_sibling("div","resume-preview-dl"):
                    cert_str = item.find_next_sibling("div").find_all("td")[-1].get_text()
                else:
                    cert_str = tokens[1]

                find_level = self.CERT_LEVEL.search(cert_str)
                tmp["certLevel"] = find_level.group() if find_level else ""

                res.append(tmp)
                id += 1

        self.result["certList"] = res


    # 技能
    def regular_skill(self):
        """
        技能模块
        """

        skillsoup = ""
        for field in self.field_list:
            if re.search(u"技能",field.find("h2").get_text()):
                skillsoup = field.find_next("div","section-content")
                break
        self.skill_html = skillsoup.get_text().strip() if skillsoup else ""
        res = []
        id =1
        if skillsoup:

            items = skillsoup.find("bable","field").find_all("tr")

            for item in items:
                tokens = [token for token in re.split(u"[:：| ]",item) if len(token.strip())>1]
                if len(tokens)<2:continue
                tmp = self.get_skillDict()
                tmp["itemId"] = str(id)
                tmp["skillName"] = tokens[0].strip()
                tmp["skillLevel"] = tokens[1].strip()
                find_duration = re.search("\d+月|[半一二三四五六七八九十\d]年",item)
                tmp["skillDuration"] = find_duration.group() if find_duration else ""
                res.append(tmp)
                id += 1

        self.result['skillList'] = res


    #　项目经验
    def regular_project(self):

        prosoup = ""
        for field in self.field_list:
            if re.search(u"项目经历",field.find("h2").get_text()):
                prosoup = field
                break
        self.project_html = prosoup.get_text().strip() if prosoup else ""
        id = 1
        res = []
        if self.type==1:
            prosoup= self.resume.find("div",{"class":"resume-project"})
            items = prosoup.find_all("table") if prosoup else  []
            for item in items:
                tmp = self.get_proDict()
                token = item.find("div","project-list-title").find("span")
                if token:
                    tmp["itemId"] = str(id)
                    tmp["proStart"] = self.clean_edu_time(token.get_text()[:8])
                    tmp["proEnd"] = self.clean_edu_time(token.get_text()[8:])
                pro_name = item.find("div","project-list-title").find("strong")
                if pro_name:
                    tmp["proName"] = pro_name.get_text().strip()


                tags = item.find_all("tr")

                for tag in tags:
                    if not tag.find("th"):
                        continue
                    if re.search(u"项目职务",tag.find("th").get_text()):
                        tmp["proDuty"] = tag.find("td").get_text(separator='\n').strip()
                    if re.search(u"项目简介",tag.find("th").get_text()):
                        tmp["proDesc"] = tag.find("td").get_text(separator='\n').strip()
                    if re.search(u"项目业绩",tag.find("th").get_text()):
                        tmp["proAchievement"] = tag.find("td").get_text(separator='\n').strip()
                    if re.search(u"所在公司",tag.find("th").get_text()):
                        tmp["proIncName"] = tag.find("td").get_text().strip()
                    if re.search(u"项目职责",tag.find("th").get_text()):
                        tmp["proRole"] = tag.find("td").get_text(separator='\n').strip()
                res.append(tmp)
                id += 1
            self.result['proList'] = res
            return

        if prosoup:

            items = prosoup.find_next_siblings("div","section-content")
            id = 1
            for item in items:
                tmp = self.get_proDict()
                find_content = item.find("div","list-title")
                if find_content:
                    tokens = [ token.get_text() for token in item.find("div","list-title").find_all("span") if token]
                    if len(tokens)>1:
                        tmp["itemId"] = str(id)
                        tmp["proStart"] = self.clean_edu_time(tokens[0].split(u"–")[0])
                        tmp["proEnd"] = self.clean_edu_time(tokens[0].split(u"–")[1])
                        tmp["proName"] = tokens[1].strip()


                    if item.find("div","list-content"):
                        tags = item.find("div","list-content").find_all("tr")

                        for tag in tags:
                            if re.search(u"项目职务",tag.find("th").get_text()):
                                tmp["proRole"] = tag.find("td").get_text()
                            if re.search(u"项目简介",tag.find("th").get_text()):
                                tmp["proDesc"] = tag.find("td").get_text()
                            if re.search(u"项目业绩",tag.find("th").get_text()):
                                tmp["proAchievement"] = tag.find("td").get_text()
                            if re.search(u"所在公司",tag.find("th").get_text()):
                                tmp["proIncName"] = tag.find("td").get_text()
                            if re.search(u"项目职责",tag.find("th").get_text()):
                                tmp["proDuty"] = tag.find("td").get_text()
                    res.append(tmp)
                    id += 1

        self.result['proList'] = res





    def regular_train(self):


        trainsoup = ""
        for field in self.field_list:
            if re.search(u"培训经历",field.find("h2").get_text()):
                trainsoup = field
                break
        self.train_html = trainsoup.get_text().strip() if trainsoup else ""
        res = []
        id = 1
        if trainsoup:
            items = trainsoup.find_all("div","section-content")
            for item in items:

                tokens = [ token for token in item.get_text().split() if len(token.strip())>1 ]
                if len(tokens)<3:continue

                tmp = self.get_trainDict()
                tmp["itemId"] = str(id)
                tmp["trainStart"] = tokens[0]
                tmp["trainEnd"] = tokens[1]
                tmp["trainTitle"] = "".join(tokens[2:])

                field_list = item.find_next("table").find_all("td")
                for field in field_list:
                    find_agency = re.search(u"培训机构：",field.get_text())
                    find_location = re.search(u"培训地点",field.get_text())
                    find_desc = re.search(u"培训描述",field.get_text())
                    find_content = re.search(u"培训内容",field.get_text())
                    find_cert = re.search(u"所获证书",field.get_text())

                    if find_agency:
                        tmp["trainAgency"] = field.find_next_sibling("td").get_text() if field.find_next_sibling("td") else ""

                    elif find_location:
                        tmp["trainLoc"] = field.find_next_sibling("td").get_text() if field.find_next_sibling("td") else ""

                    elif find_desc:
                        tmp["trainDesc"] = field.find_next_sibling("td").get_text() if field.find_next_sibling("td") else ""

                    elif find_cert:
                        tmp["trainCert"] = field.find_next_sibling("td").get_text() if field.find_next_sibling("td") else ""

                    elif find_content:
                        tmp["trainContent"] = field.find_next_sibling("td").get_text() if field.find_next_sibling("td") else ""

                res.append(tmp)
                id += 1

        self.result["trainList"] = res


    def regular_private(self):
        """
        身份证号，联系电话等隐私信息
        """

        base_info = self.basic_soup.get_text().strip()

        find_phone = self.PHONE.search(base_info)
        find_email = self.EMAIL.search(base_info)
        find_qq = self.QQ.search(base_info)
        find_idNum = self.IDNUM.search(base_info)

        self.result["privateInfo"]["phoneNumber"] = find_phone.group(1) if find_phone else ""
        self.result["privateInfo"]["email"] = find_email.group(1) if find_email else ""
        self.result["privateInfo"]["qq"] = find_qq.group(1) if find_qq else ""
        self.result["privateInfo"]["idNumber"] = find_idNum.group(1) if find_idNum else ""




    def regular_other(self):

        self.other_html = []
        if self.type==1:
            other = self.soup.find("div",{"class":"resume-comments"})
            if other:
                if re.search(u"自我评价|个人简介|自我介绍",other.find("h2").get_text()):
                    self.result["others"]["selfIntro"] = other.find("table").get_text(separator='\n').strip()
                    self.other_html.append(self.result["others"]["selfIntro"])
        for field in self.field_list:
            key = field.find("h2").get_text().strip()
            if re.search(u"自我评价|个人简介|自我介绍",key):

                # intro_tmp = field.find_next("div")
                # intro_tmp_notags = re.search('<td(.*?)>(.*?)</td>', str(intro_tmp)).group(2)
                # intro_result = re.sub('<br/>', '\n', intro_tmp_notags)
                # print intro_result
                self.result["others"]["selfIntro"] = field.find_next("div").get_text(separator='\n').strip()
                self.other_html.append(self.result["others"]["selfIntro"])
            elif re.search(u"校内|校园|社团",key):
                self.result["others"]["schoolExp"] = self.CLEAN_TEXT.sub(" ",field.find_next("div").get_text().strip())
                self.other_html.append(self.result["others"]["schoolExp"])
            elif re.search(u"实践|实习",key):
                self.result["others"]["stuPractice"] = re.sub("\s+"," ",field.find_next("div").get_text().strip())
                self.other_html.append(self.result["others"]["stuPractice"])
            elif re.search(u"论文|著作|作品|奖项|荣誉",key):
                self.result["others"]["pubWork"] = re.sub("\s+"," ",field.find_next("div").get_text().strip())
                self.other_html.append(self.result["others"]["pubWork"])
            elif re.search(u"兴趣|爱好|特长",key):
                self.result["others"]["otherHobby"] = field.find_next("div").get_text().strip()
                self.other_html.append(self.result["others"]["otherHobby"])
            elif re.search(u"附加信息|其他",key):
                self.result["others"]["otherInfo"] = field.find_next("div").get_text().strip()
                self.other_html.append(self.result["others"]["otherInfo"])
        top_soup = self.soup.find("body").find("div","resume-preview-title")
        if top_soup:
            find_job_name = re.search(u"应聘职位 print 'tags:' + tags：.{1,30}<strong>(.+?)</strong>",str(top_soup).decode("utf-8"),re.S)
            find_job_inc = re.search(u"应聘机构：.{1,30}<strong>(.+?)</strong>",str(top_soup).decode("utf-8"),re.S)

            if find_job_name:
                self.result["others"]["jobPositionFor"] = find_job_name.group(1)
                self.other_html.append(self.result["others"]["jobPositionFor"])
            if find_job_inc:
                self.result["others"]["jobIncNameFor"] = find_job_inc.group(1)

                self.other_html.append(self.result["others"]["jobIncNameFor"])



    def parser(self,htmlContent=None,fname=None,url=None):
        self.preprocess(htmlContent,fname,url)
        self.regular_basic()
        self.regular_private()
        self.regular_expect()
        self.regular_educate()
        self.regular_workexp()
        self.regular_skill()
        self.regular_cert()
        self.regular_language()
        self.regular_project()
        self.regular_train()
        self.regular_other()
        return self.result



    def output(self):
        res = "\n"
        for k in self.result:
            res += k+":"+"\n"
            if isinstance(self.result[k],dict):
                for kk,vv in self.result[k].iteritems():
                    res += '%1s: %s\n' %( kk,vv )
            elif isinstance(self.result[k],list):
                for i,exp in enumerate(self.result[k]):
                    res+= "%12s\n" % (str(i+1))
                    if isinstance(exp,dict):
                        for kk,vv in exp.iteritems():
                            res += "%22s: %s\n" % (kk,vv)
                    elif isinstance(exp,tuple):
                        for kk in exp:
                            res += '%22s \n'% (kk)
                    res += " "*10+'---'*10+'\n'
            else:
                res += " "*10+"%s\n" % (self.result[k])
        return res




import simplejson as json
from multiprocessing import Pool


if __name__ == "__main__":
    """
    测试
    """
    test = CvParserLiepin()
    # f = open('/home/howe/cv/output_liepin_01', 'w')
    #
    # path = '/home/howe/cv/cv_liepin/'
    # for file_name in os.listdir(path):
    #     file_name = os.path.join(path, file_name)
    #     # print file_name
    #     htmlContent = codecs.open(file_name, 'rb').read()
    #     test.parser(htmlContent=htmlContent)
    #     res = {}
    #     res['base'] = " ".join(test.base_html)  # 1
    #     res['expect'] = " ".join(test.exp_html)  # 2
    #     res['education'] = str(test.edu_html)  # 3
    #     res['work'] = str(test.work_html)  # 4
    #     res['languange'] = str(test.language_html)  # 5
    #     res['cert'] = str(test.cert_html)  # 6
    #     res['skill'] = str(test.skill_html)  # 7
    #     res['project'] = str(test.project_html)  # 8
    #     res['train'] = str(test.train_html)  # 9
    #     res['other'] = ' '.join(test.other_html)  # 0
    #     for key in res.keys():
    #         if res[key] is "":
    #             continue
    #
    #         temp = re.sub('\s', '', res[key])
    #         f.write(key + ' ' + temp + '\n')
    # path = './test_cvs/cv_liepin/'
    # fnames = [ path+fname for fname in os.listdir(path)]
    # cnt = 1
    #
    #
    # def parse_single(fname):
    #     global cnt
    #     htmlContent = codecs.open(fname,"rb","utf-8").read()
    #     print cnt,"=="*20,fname
    #     result = test.parser(htmlContent)
    #     cnt += 1
    #     print json.dumps(result,ensure_ascii=False,indent=4)
    #     print ''
    #     return result
    #
    # pool = Pool(10)
    # res = pool.map(parse_single,fnames)
    # with open('/home/zhangzq/PycharmProjects/untitled/data/liepin_1k.bson') as fr:
    #     lines= fr.readlines()
    # for line in lines:
    #     js = json.loads(line)
    #     htmlContent = js['pageContent']
    #     result = test.parser(htmlContent)
    #     print json.dumps(result,ensure_ascii=False,indent=4)

    with open('/home/howe/cv/cv_liepin/4100179276r2037493873.html') as fr:
        lines = fr.readlines()

    htmlContent ='\n'.join(lines)
    result = test.parser(htmlContent)
    print json.dumps(result,ensure_ascii=False,indent=4)
