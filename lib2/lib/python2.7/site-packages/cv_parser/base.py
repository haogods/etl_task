#!/usr/bin/env python
# coding=utf-8

import re
from collections import OrderedDict
class CvTopParser(object):

    def __init__(self):

        self.result = OrderedDict()
        self.result["cvFrom"]=""
        self.result["privateInfo"]=OrderedDict()
        self.result["baseInfo"]=OrderedDict()
        self.result["jobExp"]=OrderedDict()
        self.result["eduList"]=[]
        self.result["jobList"]=[]
        self.result["skillList"]=[]
        self.result["certList"]=[]
        self.result["languageList"]=[]
        self.result["proList"]=[]
        self.result["trainList"]=[]
        self.result["others"]=OrderedDict()


        privateInfo_keys=["userName","qq","phoneNumber","keyWords","idNumber","email","wechatNum","homePage"]
        baseInfo_keys=["cvId","updateTime","nowInc","nowIndustry","nowPosition","nowDiploma","recentMajorName","recentSchName","gender",
                       "age","dob","nowWorkAge","marriage","nowPoliStatus","nowAddress","nowAddressDetail","nowHukou",
                       "height","country","overSea","nowSalary","baseSalary","bonus","subsidy","stock","nowZipCode",
                       "credit","annualIncome"]
        jobExp_keys=["expLocations","dutyTime","expJobTypes","expIndustrys","expSalary","expJobCates","workStatus","ignoreIncs","notes"]

        others_keys=["otherHobby","pubWork","socialActie","specialSkill","professionOrg","patent","longCareerGoal","religion",
                     "recommendLetter","schoolExp","otherInfo","gainHoner","selfIntro","stuPractice","attachment","cvName",
                     "jobIncNameFor","jobIncNameFor","workLoc"]

        for k in privateInfo_keys:
            self.result["privateInfo"][k]=""
        for k in baseInfo_keys:
            self.result["baseInfo"][k]=""
        for k in jobExp_keys:
            self.result["jobExp"][k]=""
        for k in others_keys:
            self.result["others"][k]=""

        self.CLEAN_TEXT = re.compile(u"[\s　]+|^[）】\)\]\s]+|[（【\(\[\s\)）]$")
        self.AGE = re.compile(u"\d+周?岁")
        self.SEX = re.compile(u"男|女")
        self.DOB = re.compile(u"岁[\(（](\d{2,4}年\d{1,2}月)")
        self.EXP = re.compile(u"(\d[-—到])?\d+年.{0,5}经验|工作年限：(\d+-)?(\d+)年")

        self.DEGREE = re.compile(u"中专|大专|高中|本科|研究生|硕士|博士|博士后|初中|职校|其他|中技")
        self.POLITIC = re.compile(u"中共党员(\(含预备党员\))?|(预备)?党员|团员|群众|无党派人士")
        self.QQ = re.compile(u"[Qq]{1,2}[\s:：　](\d{5,13})")
        self.IDNUM = re.compile(u"身份证号?[\s:：　](\d+[Xx]?)")
        self.PHONE = re.compile(u"[电话手机]?[:：\s　](1\d{10}|\d{3,4}[\-－]\d{8})")
        self.EMAIL = re.compile(u"[:：\s　]([\d\w\.]+@[\d\w\.]+)")

        self.MARRIAGE = re.compile(u"未婚|已婚|离异|新婚|丧偶|离婚")
        self.HUKOU = re.compile(u"户口[\s:：　](\S+)|籍贯[\s:：](\S+)")
        self.HEIGHT = re.compile(u"(\d{3})cm|身高.(\d{3})")
        self.OVER_SEA = re.compile(u"留学|出国深造|国外|留洋|海外|外国")
        self.CERT_LEVEL = re.compile(u"合格|良好|优秀|[初中高一二三四五六七八九\d]级")
        self.CV_ID = re.compile("ID:(\d+)")




    
    def clean_edu_time(self,eduTime):
        items = re.findall("\d+",eduTime)
        if len(items)==2:
            return '.'.join(items)
        else:
            return eduTime.strip()

    def refresh(self):
        self.result = OrderedDict()
        self.result["cvFrom"]=""
        self.result["privateInfo"]=OrderedDict()
        self.result["baseInfo"]=OrderedDict()
        self.result["jobExp"]=OrderedDict()
        self.result["eduList"]=[]
        self.result["jobList"]=[]
        self.result["skillList"]=[]
        self.result["certList"]=[]
        self.result["languageList"]=[]
        self.result["proList"]=[]
        self.result["trainList"]=[]
        self.result["others"]=OrderedDict()


        privateInfo_keys=["userName","qq","phoneNumber","keyWords","idNumber","email","wechatNum","homePage"]
        baseInfo_keys=["cvId","updateTime","nowInc","nowIndustry","nowPosition","nowDiploma","recentMajorName","recentSchName","gender",
                       "age","dob","nowWorkAge","marriage","nowPoliStatus","nowAddress","nowAddressDetail","nowHukou",
                       "height","country","overSea","nowSalary","baseSalary","bonus","subsidy","stock","nowZipCode",
                       "credit","annualIncome"]
        jobExp_keys=["expLocations","dutyTime","expJobTypes","expIndustrys","expSalary","expJobCates","workStatus","ignoreIncs","notes"]

        others_keys=["otherHobby","pubWork","socialActie","specialSkill","professionOrg","patent","longCareerGoal","religion",
                     "recommendLetter","schoolExp","otherInfo","gainHoner","selfIntro","stuPractice","attachment","cvName",
                     "jobPositionFor","jobIncNameFor","workLoc"]

        for k in privateInfo_keys:
            self.result["privateInfo"][k]=""
        for k in baseInfo_keys:
            self.result["baseInfo"][k]=""
        for k in jobExp_keys:
            self.result["jobExp"][k]=""
        for k in others_keys:
            self.result["others"][k]=""


    def get_eduDict(self):
        eduDict=OrderedDict()
        eduDict["itemId"]=""
        eduDict["eduEnd"]=""
        eduDict["schName"]=""
        eduDict["eduStart"]=""
        eduDict["majorName"]=""
        eduDict["eduDiploma"]=""
        eduDict["eduTongZhao"]=""
        return eduDict

    def get_jobDict(self):
        jobDict = OrderedDict()
        jobDict["itemId"]=""
        jobDict["jobStart"]=""
        jobDict["jobEnd"]=""
        jobDict["incName"]=""
        jobDict["incEmployee"]=""
        jobDict["jobDuration"]=""
        jobDict["incIndustrys"]=""
        jobDict["jobDepartment"]=""
        jobDict["incType"]=""
        jobDict["jobPosition"]=""
        jobDict["jobDesc"]=""
        jobDict["manageExp"]=OrderedDict()
        jobDict["manageExp"]["itemId"]=""
        jobDict["manageExp"]["reportTo"]=""
        jobDict["manageExp"]["underNum"]=""
        jobDict["manageExp"]["witness"]=""
        jobDict["manageExp"]["leaveReason"]=""
        jobDict["manageExp"]["achieveDesc"]=""
        jobDict["jobSalary"]=""
        return jobDict

    def get_skillDict(self):
        skillDict = OrderedDict()
        skillDict["itemId"]=""
        skillDict["skillDuration"]=""
        skillDict["skillName"]=""
        skillDict["skillLevel"]=""
        return skillDict

    def get_certDict(self):
        certDict = OrderedDict()
        certDict["itemId"]=""
        certDict["certTime"]=""
        certDict["certName"]=""
        certDict["certLevel"]=""
        return certDict

    def get_languageDict(self):
        languageDict = OrderedDict()
        languageDict["itemId"]=""
        languageDict["languageLevel"]=""
        languageDict["languageName"]=""
        return languageDict

    def get_proDict(self):
        proDict = OrderedDict()
        keys=["itemId","hardwareEnv","proName","proStart","devTool","proDesc","softwareEnv","proDuty","proEnd","proIncName",
              "proRole","proAchievement"]
        for k in keys:
            proDict[k]=""
        return proDict

    def get_trainDict(self):
        trainDict=OrderedDict()
        trainDict["itemId"]=""
        trainDict["trainAgency"]=""
        trainDict["trainStart"]=""
        trainDict["trainEnd"]=""
        trainDict["trainTitle"]=""
        trainDict["trainCert"]=""
        trainDict["trainLoc"]=""
        trainDict["trainDesc"]=""
        return trainDict


