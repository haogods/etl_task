# -*- coding:utf8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import common_type.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class JdIncRaw(object):
  """
  Attributes:
   - incName: 公司名称
   - incIndustry: 行业
   - incType: 公司类型
   - incScale: 公司规模
   - incIntro: 公司介绍
   - incUrl: 公司url
   - incLocation: 公司地址
   - incAliasName: 公司别名
   - incCity: 公司City
   - incContactName: 公司联系人姓名
   - incContactInfo: 公司联系方式
   - investIns: 公司投资机构
   - incStage: 公司发展阶段
   - incZipCode: 邮编
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'incName', None, None, ), # 1
    (2, TType.STRING, 'incIndustry', None, None, ), # 2
    (3, TType.STRING, 'incType', None, None, ), # 3
    (4, TType.STRING, 'incScale', None, None, ), # 4
    (5, TType.STRING, 'incIntro', None, None, ), # 5
    (6, TType.STRING, 'incUrl', None, None, ), # 6
    (7, TType.STRING, 'incLocation', None, None, ), # 7
    (8, TType.STRING, 'incAliasName', None, None, ), # 8
    (9, TType.STRING, 'incCity', None, None, ), # 9
    (10, TType.STRING, 'incContactName', None, None, ), # 10
    (11, TType.STRING, 'incContactInfo', None, None, ), # 11
    (12, TType.STRING, 'investIns', None, None, ), # 12
    (13, TType.STRING, 'incStage', None, None, ), # 13
    (14, TType.STRING, 'incZipCode', None, None, ), # 14
  )

  def __init__(self, incName=None, incIndustry=None, incType=None, incScale=None, incIntro=None, incUrl=None, incLocation=None, incAliasName=None, incCity=None, incContactName=None, incContactInfo=None, investIns=None, incStage=None, incZipCode=None,):
    self.incName = incName
    self.incIndustry = incIndustry
    self.incType = incType
    self.incScale = incScale
    self.incIntro = incIntro
    self.incUrl = incUrl
    self.incLocation = incLocation
    self.incAliasName = incAliasName
    self.incCity = incCity
    self.incContactName = incContactName
    self.incContactInfo = incContactInfo
    self.investIns = investIns
    self.incStage = incStage
    self.incZipCode = incZipCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.incName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.incIndustry = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.incType = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.incScale = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.incIntro = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.incUrl = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.incLocation = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.incAliasName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.incCity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.incContactName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.incContactInfo = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.investIns = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.incStage = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.incZipCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JdIncRaw')
    if self.incName is not None:
      oprot.writeFieldBegin('incName', TType.STRING, 1)
      oprot.writeString(self.incName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incIndustry is not None:
      oprot.writeFieldBegin('incIndustry', TType.STRING, 2)
      oprot.writeString(self.incIndustry.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incType is not None:
      oprot.writeFieldBegin('incType', TType.STRING, 3)
      oprot.writeString(self.incType.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incScale is not None:
      oprot.writeFieldBegin('incScale', TType.STRING, 4)
      oprot.writeString(self.incScale.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incIntro is not None:
      oprot.writeFieldBegin('incIntro', TType.STRING, 5)
      oprot.writeString(self.incIntro.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incUrl is not None:
      oprot.writeFieldBegin('incUrl', TType.STRING, 6)
      oprot.writeString(self.incUrl.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incLocation is not None:
      oprot.writeFieldBegin('incLocation', TType.STRING, 7)
      oprot.writeString(self.incLocation.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incAliasName is not None:
      oprot.writeFieldBegin('incAliasName', TType.STRING, 8)
      oprot.writeString(self.incAliasName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incCity is not None:
      oprot.writeFieldBegin('incCity', TType.STRING, 9)
      oprot.writeString(self.incCity.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incContactName is not None:
      oprot.writeFieldBegin('incContactName', TType.STRING, 10)
      oprot.writeString(self.incContactName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incContactInfo is not None:
      oprot.writeFieldBegin('incContactInfo', TType.STRING, 11)
      oprot.writeString(self.incContactInfo.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.investIns is not None:
      oprot.writeFieldBegin('investIns', TType.STRING, 12)
      oprot.writeString(self.investIns.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incStage is not None:
      oprot.writeFieldBegin('incStage', TType.STRING, 13)
      oprot.writeString(self.incStage.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incZipCode is not None:
      oprot.writeFieldBegin('incZipCode', TType.STRING, 14)
      oprot.writeString(self.incZipCode.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.incName)
    value = (value * 31) ^ hash(self.incIndustry)
    value = (value * 31) ^ hash(self.incType)
    value = (value * 31) ^ hash(self.incScale)
    value = (value * 31) ^ hash(self.incIntro)
    value = (value * 31) ^ hash(self.incUrl)
    value = (value * 31) ^ hash(self.incLocation)
    value = (value * 31) ^ hash(self.incAliasName)
    value = (value * 31) ^ hash(self.incCity)
    value = (value * 31) ^ hash(self.incContactName)
    value = (value * 31) ^ hash(self.incContactInfo)
    value = (value * 31) ^ hash(self.investIns)
    value = (value * 31) ^ hash(self.incStage)
    value = (value * 31) ^ hash(self.incZipCode)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JdJobRaw(object):
  """
  Attributes:
   - jobPosition: 职位名称
   - jobSalary: 薪水
   - jobNum
   - jobWorkLoc: 工作地区
   - jobDiploma: 学历要求
   - jobCate: 职位职能
   - jobType: 工作类型
   - jobWelfare: 工作福利
   - gender: 性别要求
   - age: 年龄要求
   - certList: 证书要求(如:英语四六级等级证书)
   - jobMajorList: 专业要求
   - skillList: 技能要求
   - workDemand: 工作要求
   - workDuty: 工作职责
   - jobDesc: 工作描述
   - jobWorkAge: 工作经验
   - language: 语言要求
   - email: 接受简历的Email
   - others: !!! 以下信息是一些个别渠道极少量出现的一些字段，所以并不单独定义一个字段，否则会占用数据库有大量空间
      所以修改请尽量添加注释

  所属部门，汇报对象，下属人数等其他信息，主要针对卓聘网 http://www.highpin.cn/job/b36472.html的诸多信息
  other: 补充说明
  keywords: 关键词
  isFullTime: 是否统招全日制
  jdRemedy: 补充说明
  posType: 企业职位或猎头职位
  urgent: 是否急聘
  holidayWelfare: 年假福利
  livingWelfare: 居住福利
  salaryWelfare: 薪资福利
  socialWelfare: 社保福利
  trafficWelfare: 交通福利
  jobDepartment: 所属部门
  jobReport: 汇报对象
  jobReportDeatil:汇报对象说明
  jobSubSize: 下属人数
  overSea: 海外经历
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobPosition', None, None, ), # 1
    (2, TType.STRING, 'jobSalary', None, None, ), # 2
    (3, TType.STRING, 'jobNum', None, None, ), # 3
    (4, TType.STRING, 'jobWorkLoc', None, None, ), # 4
    (5, TType.STRING, 'jobDiploma', None, None, ), # 5
    None, # 6
    None, # 7
    (8, TType.STRING, 'jobCate', None, None, ), # 8
    (9, TType.STRING, 'jobType', None, None, ), # 9
    (10, TType.STRING, 'jobWelfare', None, None, ), # 10
    (11, TType.STRING, 'gender', None, None, ), # 11
    (12, TType.STRING, 'age', None, None, ), # 12
    None, # 13
    (14, TType.LIST, 'certList', (TType.STRING,None), None, ), # 14
    (15, TType.LIST, 'jobMajorList', (TType.STRING,None), None, ), # 15
    (16, TType.LIST, 'skillList', (TType.STRING,None), None, ), # 16
    (17, TType.STRING, 'workDemand', None, None, ), # 17
    (18, TType.STRING, 'workDuty', None, None, ), # 18
    (19, TType.STRING, 'jobDesc', None, None, ), # 19
    (20, TType.STRING, 'jobWorkAge', None, None, ), # 20
    (21, TType.STRING, 'language', None, None, ), # 21
    (22, TType.STRING, 'email', None, None, ), # 22
    None, # 23
    None, # 24
    (25, TType.MAP, 'others', (TType.STRING,None,TType.STRING,None), None, ), # 25
  )

  def __init__(self, jobPosition=None, jobSalary=None, jobNum=None, jobWorkLoc=None, jobDiploma=None, jobCate=None, jobType=None, jobWelfare=None, gender=None, age=None, certList=None, jobMajorList=None, skillList=None, workDemand=None, workDuty=None, jobDesc=None, jobWorkAge=None, language=None, email=None, others=None,):
    self.jobPosition = jobPosition
    self.jobSalary = jobSalary
    self.jobNum = jobNum
    self.jobWorkLoc = jobWorkLoc
    self.jobDiploma = jobDiploma
    self.jobCate = jobCate
    self.jobType = jobType
    self.jobWelfare = jobWelfare
    self.gender = gender
    self.age = age
    self.certList = certList
    self.jobMajorList = jobMajorList
    self.skillList = skillList
    self.workDemand = workDemand
    self.workDuty = workDuty
    self.jobDesc = jobDesc
    self.jobWorkAge = jobWorkAge
    self.language = language
    self.email = email
    self.others = others

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobPosition = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.jobSalary = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jobNum = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.jobWorkLoc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.jobDiploma = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.jobCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.jobType = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.jobWelfare = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.gender = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.age = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.certList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString().decode('utf-8')
            self.certList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.jobMajorList = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString().decode('utf-8')
            self.jobMajorList.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.skillList = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readString().decode('utf-8')
            self.skillList.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.workDemand = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.workDuty = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.jobDesc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.jobWorkAge = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.language = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.email = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.MAP:
          self.others = {}
          (_ktype19, _vtype20, _size18 ) = iprot.readMapBegin()
          for _i22 in xrange(_size18):
            _key23 = iprot.readString().decode('utf-8')
            _val24 = iprot.readString().decode('utf-8')
            self.others[_key23] = _val24
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JdJobRaw')
    if self.jobPosition is not None:
      oprot.writeFieldBegin('jobPosition', TType.STRING, 1)
      oprot.writeString(self.jobPosition.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobSalary is not None:
      oprot.writeFieldBegin('jobSalary', TType.STRING, 2)
      oprot.writeString(self.jobSalary.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobNum is not None:
      oprot.writeFieldBegin('jobNum', TType.STRING, 3)
      oprot.writeString(self.jobNum.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobWorkLoc is not None:
      oprot.writeFieldBegin('jobWorkLoc', TType.STRING, 4)
      oprot.writeString(self.jobWorkLoc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobDiploma is not None:
      oprot.writeFieldBegin('jobDiploma', TType.STRING, 5)
      oprot.writeString(self.jobDiploma.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobCate is not None:
      oprot.writeFieldBegin('jobCate', TType.STRING, 8)
      oprot.writeString(self.jobCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobType is not None:
      oprot.writeFieldBegin('jobType', TType.STRING, 9)
      oprot.writeString(self.jobType.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobWelfare is not None:
      oprot.writeFieldBegin('jobWelfare', TType.STRING, 10)
      oprot.writeString(self.jobWelfare.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.STRING, 11)
      oprot.writeString(self.gender.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.age is not None:
      oprot.writeFieldBegin('age', TType.STRING, 12)
      oprot.writeString(self.age.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.certList is not None:
      oprot.writeFieldBegin('certList', TType.LIST, 14)
      oprot.writeListBegin(TType.STRING, len(self.certList))
      for iter25 in self.certList:
        oprot.writeString(iter25.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.jobMajorList is not None:
      oprot.writeFieldBegin('jobMajorList', TType.LIST, 15)
      oprot.writeListBegin(TType.STRING, len(self.jobMajorList))
      for iter26 in self.jobMajorList:
        oprot.writeString(iter26.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.skillList is not None:
      oprot.writeFieldBegin('skillList', TType.LIST, 16)
      oprot.writeListBegin(TType.STRING, len(self.skillList))
      for iter27 in self.skillList:
        oprot.writeString(iter27.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.workDemand is not None:
      oprot.writeFieldBegin('workDemand', TType.STRING, 17)
      oprot.writeString(self.workDemand.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.workDuty is not None:
      oprot.writeFieldBegin('workDuty', TType.STRING, 18)
      oprot.writeString(self.workDuty.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobDesc is not None:
      oprot.writeFieldBegin('jobDesc', TType.STRING, 19)
      oprot.writeString(self.jobDesc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobWorkAge is not None:
      oprot.writeFieldBegin('jobWorkAge', TType.STRING, 20)
      oprot.writeString(self.jobWorkAge.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.STRING, 21)
      oprot.writeString(self.language.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 22)
      oprot.writeString(self.email.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.others is not None:
      oprot.writeFieldBegin('others', TType.MAP, 25)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.others))
      for kiter28,viter29 in self.others.items():
        oprot.writeString(kiter28.encode('utf-8'))
        oprot.writeString(viter29.encode('utf-8'))
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobPosition)
    value = (value * 31) ^ hash(self.jobSalary)
    value = (value * 31) ^ hash(self.jobNum)
    value = (value * 31) ^ hash(self.jobWorkLoc)
    value = (value * 31) ^ hash(self.jobDiploma)
    value = (value * 31) ^ hash(self.jobCate)
    value = (value * 31) ^ hash(self.jobType)
    value = (value * 31) ^ hash(self.jobWelfare)
    value = (value * 31) ^ hash(self.gender)
    value = (value * 31) ^ hash(self.age)
    value = (value * 31) ^ hash(self.certList)
    value = (value * 31) ^ hash(self.jobMajorList)
    value = (value * 31) ^ hash(self.skillList)
    value = (value * 31) ^ hash(self.workDemand)
    value = (value * 31) ^ hash(self.workDuty)
    value = (value * 31) ^ hash(self.jobDesc)
    value = (value * 31) ^ hash(self.jobWorkAge)
    value = (value * 31) ^ hash(self.language)
    value = (value * 31) ^ hash(self.email)
    value = (value * 31) ^ hash(self.others)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JdRaw(object):
  """
  Attributes:
   - id: jd原生信息
   - jdId
   - jdFrom
   - jdUrl
   - pubTime
   - jobEndTime: 职位截止日期
   - jdInc: 解析出的公司和职位信息
   - jdJob
   - updateTime: 一些更新需要记录的信息
   - isExpired
   - contentSign
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'jdId', None, None, ), # 2
    (3, TType.STRING, 'jdFrom', None, None, ), # 3
    (4, TType.STRING, 'jdUrl', None, None, ), # 4
    (5, TType.STRING, 'pubTime', None, None, ), # 5
    (6, TType.STRING, 'jobEndTime', None, None, ), # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    (11, TType.STRUCT, 'jdInc', (JdIncRaw, JdIncRaw.thrift_spec), None, ), # 11
    (12, TType.STRUCT, 'jdJob', (JdJobRaw, JdJobRaw.thrift_spec), None, ), # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    (21, TType.I64, 'updateTime', None, None, ), # 21
    (22, TType.BYTE, 'isExpired', None, None, ), # 22
    (23, TType.STRING, 'contentSign', None, None, ), # 23
  )

  def __init__(self, id=None, jdId=None, jdFrom=None, jdUrl=None, pubTime=None, jobEndTime=None, jdInc=None, jdJob=None, updateTime=None, isExpired=None, contentSign=None,):
    self.id = id
    self.jdId = jdId
    self.jdFrom = jdFrom
    self.jdUrl = jdUrl
    self.pubTime = pubTime
    self.jobEndTime = jobEndTime
    self.jdInc = jdInc
    self.jdJob = jdJob
    self.updateTime = updateTime
    self.isExpired = isExpired
    self.contentSign = contentSign

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.jdId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jdFrom = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.jdUrl = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.pubTime = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.jobEndTime = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.jdInc = JdIncRaw()
          self.jdInc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.jdJob = JdJobRaw()
          self.jdJob.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.updateTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.BYTE:
          self.isExpired = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.contentSign = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JdRaw')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jdId is not None:
      oprot.writeFieldBegin('jdId', TType.STRING, 2)
      oprot.writeString(self.jdId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jdFrom is not None:
      oprot.writeFieldBegin('jdFrom', TType.STRING, 3)
      oprot.writeString(self.jdFrom.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jdUrl is not None:
      oprot.writeFieldBegin('jdUrl', TType.STRING, 4)
      oprot.writeString(self.jdUrl.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.pubTime is not None:
      oprot.writeFieldBegin('pubTime', TType.STRING, 5)
      oprot.writeString(self.pubTime.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobEndTime is not None:
      oprot.writeFieldBegin('jobEndTime', TType.STRING, 6)
      oprot.writeString(self.jobEndTime.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jdInc is not None:
      oprot.writeFieldBegin('jdInc', TType.STRUCT, 11)
      self.jdInc.write(oprot)
      oprot.writeFieldEnd()
    if self.jdJob is not None:
      oprot.writeFieldBegin('jdJob', TType.STRUCT, 12)
      self.jdJob.write(oprot)
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I64, 21)
      oprot.writeI64(self.updateTime)
      oprot.writeFieldEnd()
    if self.isExpired is not None:
      oprot.writeFieldBegin('isExpired', TType.BYTE, 22)
      oprot.writeByte(self.isExpired)
      oprot.writeFieldEnd()
    if self.contentSign is not None:
      oprot.writeFieldBegin('contentSign', TType.STRING, 23)
      oprot.writeString(self.contentSign.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.jdId)
    value = (value * 31) ^ hash(self.jdFrom)
    value = (value * 31) ^ hash(self.jdUrl)
    value = (value * 31) ^ hash(self.pubTime)
    value = (value * 31) ^ hash(self.jobEndTime)
    value = (value * 31) ^ hash(self.jdInc)
    value = (value * 31) ^ hash(self.jdJob)
    value = (value * 31) ^ hash(self.updateTime)
    value = (value * 31) ^ hash(self.isExpired)
    value = (value * 31) ^ hash(self.contentSign)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JdIncMeasure(object):
  """
  Attributes:
   - incSegmentId: 公司片段id
   - incId: 公司ID
   - incIndustryId: 公司行业
   - incType: 公司类型
   - incScaleMin: 公司规模最小值
   - incScaleMax: 公司规模最大值
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'incSegmentId', None, None, ), # 1
    (2, TType.STRING, 'incId', None, None, ), # 2
    (3, TType.BYTE, 'incIndustryId', None, None, ), # 3
    (4, TType.BYTE, 'incType', None, None, ), # 4
    (5, TType.I32, 'incScaleMin', None, None, ), # 5
    (6, TType.I32, 'incScaleMax', None, None, ), # 6
  )

  def __init__(self, incSegmentId=None, incId=None, incIndustryId=None, incType=None, incScaleMin=None, incScaleMax=None,):
    self.incSegmentId = incSegmentId
    self.incId = incId
    self.incIndustryId = incIndustryId
    self.incType = incType
    self.incScaleMin = incScaleMin
    self.incScaleMax = incScaleMax

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.incSegmentId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.incId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BYTE:
          self.incIndustryId = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.incType = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.incScaleMin = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.incScaleMax = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JdIncMeasure')
    if self.incSegmentId is not None:
      oprot.writeFieldBegin('incSegmentId', TType.STRING, 1)
      oprot.writeString(self.incSegmentId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incId is not None:
      oprot.writeFieldBegin('incId', TType.STRING, 2)
      oprot.writeString(self.incId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incIndustryId is not None:
      oprot.writeFieldBegin('incIndustryId', TType.BYTE, 3)
      oprot.writeByte(self.incIndustryId)
      oprot.writeFieldEnd()
    if self.incType is not None:
      oprot.writeFieldBegin('incType', TType.BYTE, 4)
      oprot.writeByte(self.incType)
      oprot.writeFieldEnd()
    if self.incScaleMin is not None:
      oprot.writeFieldBegin('incScaleMin', TType.I32, 5)
      oprot.writeI32(self.incScaleMin)
      oprot.writeFieldEnd()
    if self.incScaleMax is not None:
      oprot.writeFieldBegin('incScaleMax', TType.I32, 6)
      oprot.writeI32(self.incScaleMax)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.incSegmentId)
    value = (value * 31) ^ hash(self.incId)
    value = (value * 31) ^ hash(self.incIndustryId)
    value = (value * 31) ^ hash(self.incType)
    value = (value * 31) ^ hash(self.incScaleMin)
    value = (value * 31) ^ hash(self.incScaleMax)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JdJobMeasure(object):
  """
  Attributes:
   - jobSalaryMin: 薪水最小值
   - jobSalaryMax: 薪水最大值
   - jobWorkLocId: 工作地区
   - jobDiplomaId: 学历
   - jobWorkAgeMin: 工作经历最小值
   - jobWorkAgeMax: 工作经历最大值
   - jobCate: 职位职能
   - gender: 性别
   - zhiji: 职级
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'jobSalaryMin', None, None, ), # 1
    (2, TType.I32, 'jobSalaryMax', None, None, ), # 2
    (3, TType.STRING, 'jobWorkLocId', None, None, ), # 3
    (4, TType.BYTE, 'jobDiplomaId', None, None, ), # 4
    (5, TType.I32, 'jobWorkAgeMin', None, None, ), # 5
    (6, TType.I32, 'jobWorkAgeMax', None, None, ), # 6
    (7, TType.STRING, 'jobCate', None, None, ), # 7
    (8, TType.BYTE, 'gender', None, None, ), # 8
    (9, TType.I16, 'zhiji', None, None, ), # 9
  )

  def __init__(self, jobSalaryMin=None, jobSalaryMax=None, jobWorkLocId=None, jobDiplomaId=None, jobWorkAgeMin=None, jobWorkAgeMax=None, jobCate=None, gender=None, zhiji=None,):
    self.jobSalaryMin = jobSalaryMin
    self.jobSalaryMax = jobSalaryMax
    self.jobWorkLocId = jobWorkLocId
    self.jobDiplomaId = jobDiplomaId
    self.jobWorkAgeMin = jobWorkAgeMin
    self.jobWorkAgeMax = jobWorkAgeMax
    self.jobCate = jobCate
    self.gender = gender
    self.zhiji = zhiji

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.jobSalaryMin = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.jobSalaryMax = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jobWorkLocId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.jobDiplomaId = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.jobWorkAgeMin = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.jobWorkAgeMax = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.jobCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BYTE:
          self.gender = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.zhiji = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JdJobMeasure')
    if self.jobSalaryMin is not None:
      oprot.writeFieldBegin('jobSalaryMin', TType.I32, 1)
      oprot.writeI32(self.jobSalaryMin)
      oprot.writeFieldEnd()
    if self.jobSalaryMax is not None:
      oprot.writeFieldBegin('jobSalaryMax', TType.I32, 2)
      oprot.writeI32(self.jobSalaryMax)
      oprot.writeFieldEnd()
    if self.jobWorkLocId is not None:
      oprot.writeFieldBegin('jobWorkLocId', TType.STRING, 3)
      oprot.writeString(self.jobWorkLocId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobDiplomaId is not None:
      oprot.writeFieldBegin('jobDiplomaId', TType.BYTE, 4)
      oprot.writeByte(self.jobDiplomaId)
      oprot.writeFieldEnd()
    if self.jobWorkAgeMin is not None:
      oprot.writeFieldBegin('jobWorkAgeMin', TType.I32, 5)
      oprot.writeI32(self.jobWorkAgeMin)
      oprot.writeFieldEnd()
    if self.jobWorkAgeMax is not None:
      oprot.writeFieldBegin('jobWorkAgeMax', TType.I32, 6)
      oprot.writeI32(self.jobWorkAgeMax)
      oprot.writeFieldEnd()
    if self.jobCate is not None:
      oprot.writeFieldBegin('jobCate', TType.STRING, 7)
      oprot.writeString(self.jobCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.BYTE, 8)
      oprot.writeByte(self.gender)
      oprot.writeFieldEnd()
    if self.zhiji is not None:
      oprot.writeFieldBegin('zhiji', TType.I16, 9)
      oprot.writeI16(self.zhiji)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobSalaryMin)
    value = (value * 31) ^ hash(self.jobSalaryMax)
    value = (value * 31) ^ hash(self.jobWorkLocId)
    value = (value * 31) ^ hash(self.jobDiplomaId)
    value = (value * 31) ^ hash(self.jobWorkAgeMin)
    value = (value * 31) ^ hash(self.jobWorkAgeMax)
    value = (value * 31) ^ hash(self.jobCate)
    value = (value * 31) ^ hash(self.gender)
    value = (value * 31) ^ hash(self.zhiji)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JdMeasure(object):
  """
  Attributes:
   - id: jd原生信息
   - jdId
   - jdFrom
   - jdUrl
   - pubTime
   - jdInc: 解析出的公司和职位信息
   - jdJob: 职位信息
   - updateTime: 一些更新需要纪录的信息
   - isExpired
   - contentSign
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'jdId', None, None, ), # 2
    (3, TType.STRING, 'jdFrom', None, None, ), # 3
    (4, TType.STRING, 'jdUrl', None, None, ), # 4
    (5, TType.STRING, 'pubTime', None, None, ), # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    (11, TType.STRUCT, 'jdInc', (JdIncMeasure, JdIncMeasure.thrift_spec), None, ), # 11
    (12, TType.STRUCT, 'jdJob', (JdJobMeasure, JdJobMeasure.thrift_spec), None, ), # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    (21, TType.I64, 'updateTime', None, None, ), # 21
    (22, TType.BOOL, 'isExpired', None, None, ), # 22
    (23, TType.STRING, 'contentSign', None, None, ), # 23
  )

  def __init__(self, id=None, jdId=None, jdFrom=None, jdUrl=None, pubTime=None, jdInc=None, jdJob=None, updateTime=None, isExpired=None, contentSign=None,):
    self.id = id
    self.jdId = jdId
    self.jdFrom = jdFrom
    self.jdUrl = jdUrl
    self.pubTime = pubTime
    self.jdInc = jdInc
    self.jdJob = jdJob
    self.updateTime = updateTime
    self.isExpired = isExpired
    self.contentSign = contentSign

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.jdId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jdFrom = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.jdUrl = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.pubTime = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.jdInc = JdIncMeasure()
          self.jdInc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.jdJob = JdJobMeasure()
          self.jdJob.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.updateTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.BOOL:
          self.isExpired = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.contentSign = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JdMeasure')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jdId is not None:
      oprot.writeFieldBegin('jdId', TType.STRING, 2)
      oprot.writeString(self.jdId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jdFrom is not None:
      oprot.writeFieldBegin('jdFrom', TType.STRING, 3)
      oprot.writeString(self.jdFrom.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jdUrl is not None:
      oprot.writeFieldBegin('jdUrl', TType.STRING, 4)
      oprot.writeString(self.jdUrl.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.pubTime is not None:
      oprot.writeFieldBegin('pubTime', TType.STRING, 5)
      oprot.writeString(self.pubTime.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jdInc is not None:
      oprot.writeFieldBegin('jdInc', TType.STRUCT, 11)
      self.jdInc.write(oprot)
      oprot.writeFieldEnd()
    if self.jdJob is not None:
      oprot.writeFieldBegin('jdJob', TType.STRUCT, 12)
      self.jdJob.write(oprot)
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I64, 21)
      oprot.writeI64(self.updateTime)
      oprot.writeFieldEnd()
    if self.isExpired is not None:
      oprot.writeFieldBegin('isExpired', TType.BOOL, 22)
      oprot.writeBool(self.isExpired)
      oprot.writeFieldEnd()
    if self.contentSign is not None:
      oprot.writeFieldBegin('contentSign', TType.STRING, 23)
      oprot.writeString(self.contentSign.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.jdId)
    value = (value * 31) ^ hash(self.jdFrom)
    value = (value * 31) ^ hash(self.jdUrl)
    value = (value * 31) ^ hash(self.pubTime)
    value = (value * 31) ^ hash(self.jdInc)
    value = (value * 31) ^ hash(self.jdJob)
    value = (value * 31) ^ hash(self.updateTime)
    value = (value * 31) ^ hash(self.isExpired)
    value = (value * 31) ^ hash(self.contentSign)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JdMergedInfo(object):
  """
  Attributes:
   - jdMergedId
   - uid
   - pubDateStamp
   - rawJdList
   - incSegmentId
   - incIndustryId
   - incType
   - incScaleMin
   - incScaleMax
   - jobSalaryMin
   - jobSalaryMax
   - jobWorkLocId
   - jobDiplomaId
   - jobWorkAgeMin
   - jobWorkAgeMax
   - jobPosition
   - jobDescription
   - jobCate
   - jobType
   - jobWelfare
   - jobMajor
   - skillList
   - workDemand
   - workDuty
   - jobTagList
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jdMergedId', None, None, ), # 1
    (2, TType.I32, 'uid', None, None, ), # 2
    (3, TType.I64, 'pubDateStamp', None, None, ), # 3
    (4, TType.LIST, 'rawJdList', (TType.STRING,None), None, ), # 4
    (5, TType.STRING, 'incSegmentId', None, None, ), # 5
    (6, TType.BYTE, 'incIndustryId', None, None, ), # 6
    (7, TType.BYTE, 'incType', None, None, ), # 7
    (8, TType.I32, 'incScaleMin', None, None, ), # 8
    (9, TType.I32, 'incScaleMax', None, None, ), # 9
    (10, TType.I32, 'jobSalaryMin', None, None, ), # 10
    (11, TType.I32, 'jobSalaryMax', None, None, ), # 11
    (12, TType.STRING, 'jobWorkLocId', None, None, ), # 12
    (13, TType.BYTE, 'jobDiplomaId', None, None, ), # 13
    (14, TType.I64, 'jobWorkAgeMin', None, None, ), # 14
    (15, TType.I64, 'jobWorkAgeMax', None, None, ), # 15
    (16, TType.STRING, 'jobPosition', None, None, ), # 16
    (17, TType.STRING, 'jobDescription', None, None, ), # 17
    (18, TType.STRING, 'jobCate', None, None, ), # 18
    (19, TType.STRING, 'jobType', None, None, ), # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRING, 'jobWelfare', None, None, ), # 50
    (51, TType.STRING, 'jobMajor', None, None, ), # 51
    (52, TType.LIST, 'skillList', (TType.STRING,None), None, ), # 52
    (53, TType.STRING, 'workDemand', None, None, ), # 53
    (54, TType.STRING, 'workDuty', None, None, ), # 54
    (55, TType.LIST, 'jobTagList', (TType.STRING,None), None, ), # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    (100, TType.I32, 'status', None, None, ), # 100
  )

  def __init__(self, jdMergedId=None, uid=None, pubDateStamp=None, rawJdList=None, incSegmentId=None, incIndustryId=None, incType=None, incScaleMin=None, incScaleMax=None, jobSalaryMin=None, jobSalaryMax=None, jobWorkLocId=None, jobDiplomaId=None, jobWorkAgeMin=None, jobWorkAgeMax=None, jobPosition=None, jobDescription=None, jobCate=None, jobType=None, jobWelfare=None, jobMajor=None, skillList=None, workDemand=None, workDuty=None, jobTagList=None, status=None,):
    self.jdMergedId = jdMergedId
    self.uid = uid
    self.pubDateStamp = pubDateStamp
    self.rawJdList = rawJdList
    self.incSegmentId = incSegmentId
    self.incIndustryId = incIndustryId
    self.incType = incType
    self.incScaleMin = incScaleMin
    self.incScaleMax = incScaleMax
    self.jobSalaryMin = jobSalaryMin
    self.jobSalaryMax = jobSalaryMax
    self.jobWorkLocId = jobWorkLocId
    self.jobDiplomaId = jobDiplomaId
    self.jobWorkAgeMin = jobWorkAgeMin
    self.jobWorkAgeMax = jobWorkAgeMax
    self.jobPosition = jobPosition
    self.jobDescription = jobDescription
    self.jobCate = jobCate
    self.jobType = jobType
    self.jobWelfare = jobWelfare
    self.jobMajor = jobMajor
    self.skillList = skillList
    self.workDemand = workDemand
    self.workDuty = workDuty
    self.jobTagList = jobTagList
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jdMergedId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.pubDateStamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.rawJdList = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = iprot.readString().decode('utf-8')
            self.rawJdList.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.incSegmentId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BYTE:
          self.incIndustryId = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BYTE:
          self.incType = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.incScaleMin = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.incScaleMax = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.jobSalaryMin = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.jobSalaryMax = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.jobWorkLocId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BYTE:
          self.jobDiplomaId = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.jobWorkAgeMin = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.jobWorkAgeMax = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.jobPosition = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.jobDescription = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.jobCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.jobType = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRING:
          self.jobWelfare = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.STRING:
          self.jobMajor = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.LIST:
          self.skillList = []
          (_etype39, _size36) = iprot.readListBegin()
          for _i40 in xrange(_size36):
            _elem41 = iprot.readString().decode('utf-8')
            self.skillList.append(_elem41)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 53:
        if ftype == TType.STRING:
          self.workDemand = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 54:
        if ftype == TType.STRING:
          self.workDuty = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.LIST:
          self.jobTagList = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = iprot.readString().decode('utf-8')
            self.jobTagList.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 100:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JdMergedInfo')
    if self.jdMergedId is not None:
      oprot.writeFieldBegin('jdMergedId', TType.STRING, 1)
      oprot.writeString(self.jdMergedId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 2)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.pubDateStamp is not None:
      oprot.writeFieldBegin('pubDateStamp', TType.I64, 3)
      oprot.writeI64(self.pubDateStamp)
      oprot.writeFieldEnd()
    if self.rawJdList is not None:
      oprot.writeFieldBegin('rawJdList', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.rawJdList))
      for iter48 in self.rawJdList:
        oprot.writeString(iter48.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.incSegmentId is not None:
      oprot.writeFieldBegin('incSegmentId', TType.STRING, 5)
      oprot.writeString(self.incSegmentId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incIndustryId is not None:
      oprot.writeFieldBegin('incIndustryId', TType.BYTE, 6)
      oprot.writeByte(self.incIndustryId)
      oprot.writeFieldEnd()
    if self.incType is not None:
      oprot.writeFieldBegin('incType', TType.BYTE, 7)
      oprot.writeByte(self.incType)
      oprot.writeFieldEnd()
    if self.incScaleMin is not None:
      oprot.writeFieldBegin('incScaleMin', TType.I32, 8)
      oprot.writeI32(self.incScaleMin)
      oprot.writeFieldEnd()
    if self.incScaleMax is not None:
      oprot.writeFieldBegin('incScaleMax', TType.I32, 9)
      oprot.writeI32(self.incScaleMax)
      oprot.writeFieldEnd()
    if self.jobSalaryMin is not None:
      oprot.writeFieldBegin('jobSalaryMin', TType.I32, 10)
      oprot.writeI32(self.jobSalaryMin)
      oprot.writeFieldEnd()
    if self.jobSalaryMax is not None:
      oprot.writeFieldBegin('jobSalaryMax', TType.I32, 11)
      oprot.writeI32(self.jobSalaryMax)
      oprot.writeFieldEnd()
    if self.jobWorkLocId is not None:
      oprot.writeFieldBegin('jobWorkLocId', TType.STRING, 12)
      oprot.writeString(self.jobWorkLocId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobDiplomaId is not None:
      oprot.writeFieldBegin('jobDiplomaId', TType.BYTE, 13)
      oprot.writeByte(self.jobDiplomaId)
      oprot.writeFieldEnd()
    if self.jobWorkAgeMin is not None:
      oprot.writeFieldBegin('jobWorkAgeMin', TType.I64, 14)
      oprot.writeI64(self.jobWorkAgeMin)
      oprot.writeFieldEnd()
    if self.jobWorkAgeMax is not None:
      oprot.writeFieldBegin('jobWorkAgeMax', TType.I64, 15)
      oprot.writeI64(self.jobWorkAgeMax)
      oprot.writeFieldEnd()
    if self.jobPosition is not None:
      oprot.writeFieldBegin('jobPosition', TType.STRING, 16)
      oprot.writeString(self.jobPosition.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobDescription is not None:
      oprot.writeFieldBegin('jobDescription', TType.STRING, 17)
      oprot.writeString(self.jobDescription.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobCate is not None:
      oprot.writeFieldBegin('jobCate', TType.STRING, 18)
      oprot.writeString(self.jobCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobType is not None:
      oprot.writeFieldBegin('jobType', TType.STRING, 19)
      oprot.writeString(self.jobType.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobWelfare is not None:
      oprot.writeFieldBegin('jobWelfare', TType.STRING, 50)
      oprot.writeString(self.jobWelfare.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobMajor is not None:
      oprot.writeFieldBegin('jobMajor', TType.STRING, 51)
      oprot.writeString(self.jobMajor.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.skillList is not None:
      oprot.writeFieldBegin('skillList', TType.LIST, 52)
      oprot.writeListBegin(TType.STRING, len(self.skillList))
      for iter49 in self.skillList:
        oprot.writeString(iter49.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.workDemand is not None:
      oprot.writeFieldBegin('workDemand', TType.STRING, 53)
      oprot.writeString(self.workDemand.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.workDuty is not None:
      oprot.writeFieldBegin('workDuty', TType.STRING, 54)
      oprot.writeString(self.workDuty.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobTagList is not None:
      oprot.writeFieldBegin('jobTagList', TType.LIST, 55)
      oprot.writeListBegin(TType.STRING, len(self.jobTagList))
      for iter50 in self.jobTagList:
        oprot.writeString(iter50.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 100)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jdMergedId)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.pubDateStamp)
    value = (value * 31) ^ hash(self.rawJdList)
    value = (value * 31) ^ hash(self.incSegmentId)
    value = (value * 31) ^ hash(self.incIndustryId)
    value = (value * 31) ^ hash(self.incType)
    value = (value * 31) ^ hash(self.incScaleMin)
    value = (value * 31) ^ hash(self.incScaleMax)
    value = (value * 31) ^ hash(self.jobSalaryMin)
    value = (value * 31) ^ hash(self.jobSalaryMax)
    value = (value * 31) ^ hash(self.jobWorkLocId)
    value = (value * 31) ^ hash(self.jobDiplomaId)
    value = (value * 31) ^ hash(self.jobWorkAgeMin)
    value = (value * 31) ^ hash(self.jobWorkAgeMax)
    value = (value * 31) ^ hash(self.jobPosition)
    value = (value * 31) ^ hash(self.jobDescription)
    value = (value * 31) ^ hash(self.jobCate)
    value = (value * 31) ^ hash(self.jobType)
    value = (value * 31) ^ hash(self.jobWelfare)
    value = (value * 31) ^ hash(self.jobMajor)
    value = (value * 31) ^ hash(self.skillList)
    value = (value * 31) ^ hash(self.workDemand)
    value = (value * 31) ^ hash(self.workDuty)
    value = (value * 31) ^ hash(self.jobTagList)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JdVector(object):
  """
  Attributes:
   - jdMergedId
   - posVector
   - descVector
   - uid
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jdMergedId', None, None, ), # 1
    (2, TType.LIST, 'posVector', (TType.DOUBLE,None), None, ), # 2
    (3, TType.LIST, 'descVector', (TType.DOUBLE,None), None, ), # 3
    (4, TType.I32, 'uid', None, None, ), # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I32, 'status', None, None, ), # 10
  )

  def __init__(self, jdMergedId=None, posVector=None, descVector=None, uid=None, status=None,):
    self.jdMergedId = jdMergedId
    self.posVector = posVector
    self.descVector = descVector
    self.uid = uid
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jdMergedId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.posVector = []
          (_etype54, _size51) = iprot.readListBegin()
          for _i55 in xrange(_size51):
            _elem56 = iprot.readDouble();
            self.posVector.append(_elem56)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.descVector = []
          (_etype60, _size57) = iprot.readListBegin()
          for _i61 in xrange(_size57):
            _elem62 = iprot.readDouble();
            self.descVector.append(_elem62)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JdVector')
    if self.jdMergedId is not None:
      oprot.writeFieldBegin('jdMergedId', TType.STRING, 1)
      oprot.writeString(self.jdMergedId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.posVector is not None:
      oprot.writeFieldBegin('posVector', TType.LIST, 2)
      oprot.writeListBegin(TType.DOUBLE, len(self.posVector))
      for iter63 in self.posVector:
        oprot.writeDouble(iter63)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.descVector is not None:
      oprot.writeFieldBegin('descVector', TType.LIST, 3)
      oprot.writeListBegin(TType.DOUBLE, len(self.descVector))
      for iter64 in self.descVector:
        oprot.writeDouble(iter64)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 4)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 10)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jdMergedId)
    value = (value * 31) ^ hash(self.posVector)
    value = (value * 31) ^ hash(self.descVector)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
