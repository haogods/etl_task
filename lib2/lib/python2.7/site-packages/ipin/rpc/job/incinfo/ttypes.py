# -*- coding:utf8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ipin.rpc.common.datatype.ttypes
import ipin.rpc.common.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class StatusInfo(object):
  """
  Attributes:
   - cvIndMap
   - jdIndMap
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'cvIndMap', (TType.I16,None,TType.I32,None), None, ), # 1
    (2, TType.MAP, 'jdIndMap', (TType.I16,None,TType.I32,None), None, ), # 2
  )

  def __init__(self, cvIndMap=None, jdIndMap=None,):
    self.cvIndMap = cvIndMap
    self.jdIndMap = jdIndMap

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.cvIndMap = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readI16();
            _val6 = iprot.readI32();
            self.cvIndMap[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.jdIndMap = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin()
          for _i11 in xrange(_size7):
            _key12 = iprot.readI16();
            _val13 = iprot.readI32();
            self.jdIndMap[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatusInfo')
    if self.cvIndMap is not None:
      oprot.writeFieldBegin('cvIndMap', TType.MAP, 1)
      oprot.writeMapBegin(TType.I16, TType.I32, len(self.cvIndMap))
      for kiter14,viter15 in self.cvIndMap.items():
        oprot.writeI16(kiter14)
        oprot.writeI32(viter15)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.jdIndMap is not None:
      oprot.writeFieldBegin('jdIndMap', TType.MAP, 2)
      oprot.writeMapBegin(TType.I16, TType.I32, len(self.jdIndMap))
      for kiter16,viter17 in self.jdIndMap.items():
        oprot.writeI16(kiter16)
        oprot.writeI32(viter17)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvIndMap)
    value = (value * 31) ^ hash(self.jdIndMap)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IncSegInfo(object):
  """
  Attributes:
   - incSegId
   - incSegName
   - incSegLocId
   - incSegFirm
   - statusInfo
   - sampleCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'incSegId', None, None, ), # 1
    (2, TType.STRING, 'incSegName', None, None, ), # 2
    (3, TType.STRING, 'incSegLocId', None, None, ), # 3
    (4, TType.STRING, 'incSegFirm', None, None, ), # 4
    (5, TType.STRUCT, 'statusInfo', (StatusInfo, StatusInfo.thrift_spec), None, ), # 5
    (6, TType.I32, 'sampleCount', None, None, ), # 6
  )

  def __init__(self, incSegId=None, incSegName=None, incSegLocId=None, incSegFirm=None, statusInfo=None, sampleCount=None,):
    self.incSegId = incSegId
    self.incSegName = incSegName
    self.incSegLocId = incSegLocId
    self.incSegFirm = incSegFirm
    self.statusInfo = statusInfo
    self.sampleCount = sampleCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.incSegId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.incSegName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.incSegLocId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.incSegFirm = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.statusInfo = StatusInfo()
          self.statusInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.sampleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IncSegInfo')
    if self.incSegId is not None:
      oprot.writeFieldBegin('incSegId', TType.STRING, 1)
      oprot.writeString(self.incSegId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incSegName is not None:
      oprot.writeFieldBegin('incSegName', TType.STRING, 2)
      oprot.writeString(self.incSegName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incSegLocId is not None:
      oprot.writeFieldBegin('incSegLocId', TType.STRING, 3)
      oprot.writeString(self.incSegLocId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incSegFirm is not None:
      oprot.writeFieldBegin('incSegFirm', TType.STRING, 4)
      oprot.writeString(self.incSegFirm.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.statusInfo is not None:
      oprot.writeFieldBegin('statusInfo', TType.STRUCT, 5)
      self.statusInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.sampleCount is not None:
      oprot.writeFieldBegin('sampleCount', TType.I32, 6)
      oprot.writeI32(self.sampleCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.incSegId)
    value = (value * 31) ^ hash(self.incSegName)
    value = (value * 31) ^ hash(self.incSegLocId)
    value = (value * 31) ^ hash(self.incSegFirm)
    value = (value * 31) ^ hash(self.statusInfo)
    value = (value * 31) ^ hash(self.sampleCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IncInfo(object):
  """
  Attributes:
   - incId
   - incName
   - incLocId
   - incFirm
   - statusInfo
   - sampleCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'incId', None, None, ), # 1
    (2, TType.STRING, 'incName', None, None, ), # 2
    (3, TType.STRING, 'incLocId', None, None, ), # 3
    (4, TType.STRING, 'incFirm', None, None, ), # 4
    (5, TType.STRUCT, 'statusInfo', (StatusInfo, StatusInfo.thrift_spec), None, ), # 5
    (6, TType.I32, 'sampleCount', None, None, ), # 6
  )

  def __init__(self, incId=None, incName=None, incLocId=None, incFirm=None, statusInfo=None, sampleCount=None,):
    self.incId = incId
    self.incName = incName
    self.incLocId = incLocId
    self.incFirm = incFirm
    self.statusInfo = statusInfo
    self.sampleCount = sampleCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.incId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.incName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.incLocId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.incFirm = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.statusInfo = StatusInfo()
          self.statusInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.sampleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IncInfo')
    if self.incId is not None:
      oprot.writeFieldBegin('incId', TType.STRING, 1)
      oprot.writeString(self.incId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incName is not None:
      oprot.writeFieldBegin('incName', TType.STRING, 2)
      oprot.writeString(self.incName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incLocId is not None:
      oprot.writeFieldBegin('incLocId', TType.STRING, 3)
      oprot.writeString(self.incLocId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incFirm is not None:
      oprot.writeFieldBegin('incFirm', TType.STRING, 4)
      oprot.writeString(self.incFirm.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.statusInfo is not None:
      oprot.writeFieldBegin('statusInfo', TType.STRUCT, 5)
      self.statusInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.sampleCount is not None:
      oprot.writeFieldBegin('sampleCount', TType.I32, 6)
      oprot.writeI32(self.sampleCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.incId)
    value = (value * 31) ^ hash(self.incName)
    value = (value * 31) ^ hash(self.incLocId)
    value = (value * 31) ^ hash(self.incFirm)
    value = (value * 31) ^ hash(self.statusInfo)
    value = (value * 31) ^ hash(self.sampleCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
