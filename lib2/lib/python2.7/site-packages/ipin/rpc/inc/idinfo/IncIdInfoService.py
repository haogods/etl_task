# -*- coding:utf8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(object):
  def getIncSegIdInfo(self, incSegVersionName, incSegId):
    """
    获取incSeg信息

    Parameters:
     - incSegVersionName
     - incSegId
    """
    pass

  def getIncSegIdInfoByName(self, incSegVersionName, incSegName, industryId, loc, workLoc, incSegSource):
    """
    根据名称查找incSeg信息

    Parameters:
     - incSegVersionName
     - incSegName
     - industryId
     - loc
     - workLoc
     - incSegSource
    """
    pass

  def setIncSegIdInfo(self, incSegVersionName, incSegIdInfo):
    """
    设置incSeg信息

    Parameters:
     - incSegVersionName
     - incSegIdInfo
    """
    pass

  def linkIncSegToInc(self, incSegVersionName, incVersionName, incSegId, incId):
    """
    建立IncSegId和IncId之间的映射

    Parameters:
     - incSegVersionName
     - incVersionName
     - incSegId
     - incId
    """
    pass

  def getIncIdInfo(self, incVersionName, incId):
    """
    获取IncId信息

    Parameters:
     - incVersionName
     - incId
    """
    pass

  def findSimilarIncIdInfo(self, incVersionName, incName, incFirm, industryId, loc, workLoc):
    """
    查找相似的IncId信息

    Parameters:
     - incVersionName
     - incName
     - incFirm
     - industryId
     - loc
     - workLoc
    """
    pass

  def setIncIdInfo(self, incVersionName, incIdInfo):
    """
    设置IncId信息

    Parameters:
     - incVersionName
     - incIdInfo
    """
    pass

  def queryIncSegIdMap(self, incSegVersionName, incVersionName, incSegIdList, destIncIdType):
    """
    查询IncSegId到IncId的映射

    Parameters:
     - incSegVersionName
     - incVersionName
     - incSegIdList
     - destIncIdType
    """
    pass

  def queryIncIdMap(self, incVersionName, incIdList, srcIncIdType, destIncIdType):
    """
    查询IncId到IncId的映射

    Parameters:
     - incVersionName
     - incIdList
     - srcIncIdType
     - destIncIdType
    """
    pass

  def queryIncSegIdList(self, incSegVersionName, incVersionName, incId):
    """
    根据incId查询incSegId列表

    Parameters:
     - incSegVersionName
     - incVersionName
     - incId
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def getIncSegIdInfo(self, incSegVersionName, incSegId):
    """
    获取incSeg信息

    Parameters:
     - incSegVersionName
     - incSegId
    """
    self.send_getIncSegIdInfo(incSegVersionName, incSegId)
    return self.recv_getIncSegIdInfo()

  def send_getIncSegIdInfo(self, incSegVersionName, incSegId):
    self._oprot.writeMessageBegin('getIncSegIdInfo', TMessageType.CALL, self._seqid)
    args = getIncSegIdInfo_args()
    args.incSegVersionName = incSegVersionName
    args.incSegId = incSegId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getIncSegIdInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getIncSegIdInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getIncSegIdInfo failed: unknown result");

  def getIncSegIdInfoByName(self, incSegVersionName, incSegName, industryId, loc, workLoc, incSegSource):
    """
    根据名称查找incSeg信息

    Parameters:
     - incSegVersionName
     - incSegName
     - industryId
     - loc
     - workLoc
     - incSegSource
    """
    self.send_getIncSegIdInfoByName(incSegVersionName, incSegName, industryId, loc, workLoc, incSegSource)
    return self.recv_getIncSegIdInfoByName()

  def send_getIncSegIdInfoByName(self, incSegVersionName, incSegName, industryId, loc, workLoc, incSegSource):
    self._oprot.writeMessageBegin('getIncSegIdInfoByName', TMessageType.CALL, self._seqid)
    args = getIncSegIdInfoByName_args()
    args.incSegVersionName = incSegVersionName
    args.incSegName = incSegName
    args.industryId = industryId
    args.loc = loc
    args.workLoc = workLoc
    args.incSegSource = incSegSource
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getIncSegIdInfoByName(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getIncSegIdInfoByName_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getIncSegIdInfoByName failed: unknown result");

  def setIncSegIdInfo(self, incSegVersionName, incSegIdInfo):
    """
    设置incSeg信息

    Parameters:
     - incSegVersionName
     - incSegIdInfo
    """
    self.send_setIncSegIdInfo(incSegVersionName, incSegIdInfo)
    self.recv_setIncSegIdInfo()

  def send_setIncSegIdInfo(self, incSegVersionName, incSegIdInfo):
    self._oprot.writeMessageBegin('setIncSegIdInfo', TMessageType.CALL, self._seqid)
    args = setIncSegIdInfo_args()
    args.incSegVersionName = incSegVersionName
    args.incSegIdInfo = incSegIdInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setIncSegIdInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = setIncSegIdInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.namedError is not None:
      raise result.namedError
    return

  def linkIncSegToInc(self, incSegVersionName, incVersionName, incSegId, incId):
    """
    建立IncSegId和IncId之间的映射

    Parameters:
     - incSegVersionName
     - incVersionName
     - incSegId
     - incId
    """
    self.send_linkIncSegToInc(incSegVersionName, incVersionName, incSegId, incId)
    self.recv_linkIncSegToInc()

  def send_linkIncSegToInc(self, incSegVersionName, incVersionName, incSegId, incId):
    self._oprot.writeMessageBegin('linkIncSegToInc', TMessageType.CALL, self._seqid)
    args = linkIncSegToInc_args()
    args.incSegVersionName = incSegVersionName
    args.incVersionName = incVersionName
    args.incSegId = incSegId
    args.incId = incId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_linkIncSegToInc(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = linkIncSegToInc_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.namedError is not None:
      raise result.namedError
    return

  def getIncIdInfo(self, incVersionName, incId):
    """
    获取IncId信息

    Parameters:
     - incVersionName
     - incId
    """
    self.send_getIncIdInfo(incVersionName, incId)
    return self.recv_getIncIdInfo()

  def send_getIncIdInfo(self, incVersionName, incId):
    self._oprot.writeMessageBegin('getIncIdInfo', TMessageType.CALL, self._seqid)
    args = getIncIdInfo_args()
    args.incVersionName = incVersionName
    args.incId = incId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getIncIdInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getIncIdInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getIncIdInfo failed: unknown result");

  def findSimilarIncIdInfo(self, incVersionName, incName, incFirm, industryId, loc, workLoc):
    """
    查找相似的IncId信息

    Parameters:
     - incVersionName
     - incName
     - incFirm
     - industryId
     - loc
     - workLoc
    """
    self.send_findSimilarIncIdInfo(incVersionName, incName, incFirm, industryId, loc, workLoc)
    return self.recv_findSimilarIncIdInfo()

  def send_findSimilarIncIdInfo(self, incVersionName, incName, incFirm, industryId, loc, workLoc):
    self._oprot.writeMessageBegin('findSimilarIncIdInfo', TMessageType.CALL, self._seqid)
    args = findSimilarIncIdInfo_args()
    args.incVersionName = incVersionName
    args.incName = incName
    args.incFirm = incFirm
    args.industryId = industryId
    args.loc = loc
    args.workLoc = workLoc
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findSimilarIncIdInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findSimilarIncIdInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findSimilarIncIdInfo failed: unknown result");

  def setIncIdInfo(self, incVersionName, incIdInfo):
    """
    设置IncId信息

    Parameters:
     - incVersionName
     - incIdInfo
    """
    self.send_setIncIdInfo(incVersionName, incIdInfo)
    self.recv_setIncIdInfo()

  def send_setIncIdInfo(self, incVersionName, incIdInfo):
    self._oprot.writeMessageBegin('setIncIdInfo', TMessageType.CALL, self._seqid)
    args = setIncIdInfo_args()
    args.incVersionName = incVersionName
    args.incIdInfo = incIdInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setIncIdInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = setIncIdInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.namedError is not None:
      raise result.namedError
    return

  def queryIncSegIdMap(self, incSegVersionName, incVersionName, incSegIdList, destIncIdType):
    """
    查询IncSegId到IncId的映射

    Parameters:
     - incSegVersionName
     - incVersionName
     - incSegIdList
     - destIncIdType
    """
    self.send_queryIncSegIdMap(incSegVersionName, incVersionName, incSegIdList, destIncIdType)
    return self.recv_queryIncSegIdMap()

  def send_queryIncSegIdMap(self, incSegVersionName, incVersionName, incSegIdList, destIncIdType):
    self._oprot.writeMessageBegin('queryIncSegIdMap', TMessageType.CALL, self._seqid)
    args = queryIncSegIdMap_args()
    args.incSegVersionName = incSegVersionName
    args.incVersionName = incVersionName
    args.incSegIdList = incSegIdList
    args.destIncIdType = destIncIdType
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryIncSegIdMap(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = queryIncSegIdMap_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryIncSegIdMap failed: unknown result");

  def queryIncIdMap(self, incVersionName, incIdList, srcIncIdType, destIncIdType):
    """
    查询IncId到IncId的映射

    Parameters:
     - incVersionName
     - incIdList
     - srcIncIdType
     - destIncIdType
    """
    self.send_queryIncIdMap(incVersionName, incIdList, srcIncIdType, destIncIdType)
    return self.recv_queryIncIdMap()

  def send_queryIncIdMap(self, incVersionName, incIdList, srcIncIdType, destIncIdType):
    self._oprot.writeMessageBegin('queryIncIdMap', TMessageType.CALL, self._seqid)
    args = queryIncIdMap_args()
    args.incVersionName = incVersionName
    args.incIdList = incIdList
    args.srcIncIdType = srcIncIdType
    args.destIncIdType = destIncIdType
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryIncIdMap(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = queryIncIdMap_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryIncIdMap failed: unknown result");

  def queryIncSegIdList(self, incSegVersionName, incVersionName, incId):
    """
    根据incId查询incSegId列表

    Parameters:
     - incSegVersionName
     - incVersionName
     - incId
    """
    self.send_queryIncSegIdList(incSegVersionName, incVersionName, incId)
    return self.recv_queryIncSegIdList()

  def send_queryIncSegIdList(self, incSegVersionName, incVersionName, incId):
    self._oprot.writeMessageBegin('queryIncSegIdList', TMessageType.CALL, self._seqid)
    args = queryIncSegIdList_args()
    args.incSegVersionName = incSegVersionName
    args.incVersionName = incVersionName
    args.incId = incId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryIncSegIdList(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = queryIncSegIdList_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryIncSegIdList failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getIncSegIdInfo"] = Processor.process_getIncSegIdInfo
    self._processMap["getIncSegIdInfoByName"] = Processor.process_getIncSegIdInfoByName
    self._processMap["setIncSegIdInfo"] = Processor.process_setIncSegIdInfo
    self._processMap["linkIncSegToInc"] = Processor.process_linkIncSegToInc
    self._processMap["getIncIdInfo"] = Processor.process_getIncIdInfo
    self._processMap["findSimilarIncIdInfo"] = Processor.process_findSimilarIncIdInfo
    self._processMap["setIncIdInfo"] = Processor.process_setIncIdInfo
    self._processMap["queryIncSegIdMap"] = Processor.process_queryIncSegIdMap
    self._processMap["queryIncIdMap"] = Processor.process_queryIncIdMap
    self._processMap["queryIncSegIdList"] = Processor.process_queryIncSegIdList

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getIncSegIdInfo(self, seqid, iprot, oprot):
    args = getIncSegIdInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getIncSegIdInfo_result()
    try:
      result.success = self._handler.getIncSegIdInfo(args.incSegVersionName, args.incSegId)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("getIncSegIdInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getIncSegIdInfoByName(self, seqid, iprot, oprot):
    args = getIncSegIdInfoByName_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getIncSegIdInfoByName_result()
    try:
      result.success = self._handler.getIncSegIdInfoByName(args.incSegVersionName, args.incSegName, args.industryId, args.loc, args.workLoc, args.incSegSource)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("getIncSegIdInfoByName", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setIncSegIdInfo(self, seqid, iprot, oprot):
    args = setIncSegIdInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setIncSegIdInfo_result()
    try:
      self._handler.setIncSegIdInfo(args.incSegVersionName, args.incSegIdInfo)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("setIncSegIdInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_linkIncSegToInc(self, seqid, iprot, oprot):
    args = linkIncSegToInc_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = linkIncSegToInc_result()
    try:
      self._handler.linkIncSegToInc(args.incSegVersionName, args.incVersionName, args.incSegId, args.incId)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("linkIncSegToInc", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getIncIdInfo(self, seqid, iprot, oprot):
    args = getIncIdInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getIncIdInfo_result()
    try:
      result.success = self._handler.getIncIdInfo(args.incVersionName, args.incId)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("getIncIdInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findSimilarIncIdInfo(self, seqid, iprot, oprot):
    args = findSimilarIncIdInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findSimilarIncIdInfo_result()
    try:
      result.success = self._handler.findSimilarIncIdInfo(args.incVersionName, args.incName, args.incFirm, args.industryId, args.loc, args.workLoc)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("findSimilarIncIdInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setIncIdInfo(self, seqid, iprot, oprot):
    args = setIncIdInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setIncIdInfo_result()
    try:
      self._handler.setIncIdInfo(args.incVersionName, args.incIdInfo)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("setIncIdInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryIncSegIdMap(self, seqid, iprot, oprot):
    args = queryIncSegIdMap_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryIncSegIdMap_result()
    try:
      result.success = self._handler.queryIncSegIdMap(args.incSegVersionName, args.incVersionName, args.incSegIdList, args.destIncIdType)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("queryIncSegIdMap", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryIncIdMap(self, seqid, iprot, oprot):
    args = queryIncIdMap_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryIncIdMap_result()
    try:
      result.success = self._handler.queryIncIdMap(args.incVersionName, args.incIdList, args.srcIncIdType, args.destIncIdType)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("queryIncIdMap", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryIncSegIdList(self, seqid, iprot, oprot):
    args = queryIncSegIdList_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryIncSegIdList_result()
    try:
      result.success = self._handler.queryIncSegIdList(args.incSegVersionName, args.incVersionName, args.incId)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("queryIncSegIdList", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getIncSegIdInfo_args(object):
  """
  Attributes:
   - incSegVersionName
   - incSegId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'incSegVersionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    (11, TType.STRING, 'incSegId', None, None, ), # 11
  )

  def __init__(self, incSegVersionName=None, incSegId=None,):
    self.incSegVersionName = incSegVersionName
    self.incSegId = incSegId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.incSegVersionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.incSegId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getIncSegIdInfo_args')
    if self.incSegVersionName is not None:
      oprot.writeFieldBegin('incSegVersionName', TType.STRING, 1)
      oprot.writeString(self.incSegVersionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incSegId is not None:
      oprot.writeFieldBegin('incSegId', TType.STRING, 11)
      oprot.writeString(self.incSegId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.incSegVersionName)
    value = (value * 31) ^ hash(self.incSegId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getIncSegIdInfo_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (IncSegIdInfo, IncSegIdInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = IncSegIdInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getIncSegIdInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getIncSegIdInfoByName_args(object):
  """
  Attributes:
   - incSegVersionName
   - incSegName
   - industryId
   - loc
   - workLoc
   - incSegSource
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'incSegVersionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    (11, TType.STRING, 'incSegName', None, None, ), # 11
    (12, TType.I16, 'industryId', None, None, ), # 12
    (13, TType.STRING, 'loc', None, None, ), # 13
    (14, TType.STRING, 'workLoc', None, None, ), # 14
    (15, TType.I32, 'incSegSource', None, None, ), # 15
  )

  def __init__(self, incSegVersionName=None, incSegName=None, industryId=None, loc=None, workLoc=None, incSegSource=None,):
    self.incSegVersionName = incSegVersionName
    self.incSegName = incSegName
    self.industryId = industryId
    self.loc = loc
    self.workLoc = workLoc
    self.incSegSource = incSegSource

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.incSegVersionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.incSegName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I16:
          self.industryId = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.loc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.workLoc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.incSegSource = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getIncSegIdInfoByName_args')
    if self.incSegVersionName is not None:
      oprot.writeFieldBegin('incSegVersionName', TType.STRING, 1)
      oprot.writeString(self.incSegVersionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incSegName is not None:
      oprot.writeFieldBegin('incSegName', TType.STRING, 11)
      oprot.writeString(self.incSegName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.industryId is not None:
      oprot.writeFieldBegin('industryId', TType.I16, 12)
      oprot.writeI16(self.industryId)
      oprot.writeFieldEnd()
    if self.loc is not None:
      oprot.writeFieldBegin('loc', TType.STRING, 13)
      oprot.writeString(self.loc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.workLoc is not None:
      oprot.writeFieldBegin('workLoc', TType.STRING, 14)
      oprot.writeString(self.workLoc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incSegSource is not None:
      oprot.writeFieldBegin('incSegSource', TType.I32, 15)
      oprot.writeI32(self.incSegSource)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.incSegVersionName)
    value = (value * 31) ^ hash(self.incSegName)
    value = (value * 31) ^ hash(self.industryId)
    value = (value * 31) ^ hash(self.loc)
    value = (value * 31) ^ hash(self.workLoc)
    value = (value * 31) ^ hash(self.incSegSource)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getIncSegIdInfoByName_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (IncSegIdInfo, IncSegIdInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = IncSegIdInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getIncSegIdInfoByName_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setIncSegIdInfo_args(object):
  """
  Attributes:
   - incSegVersionName
   - incSegIdInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'incSegVersionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    (11, TType.STRUCT, 'incSegIdInfo', (IncSegIdInfo, IncSegIdInfo.thrift_spec), None, ), # 11
  )

  def __init__(self, incSegVersionName=None, incSegIdInfo=None,):
    self.incSegVersionName = incSegVersionName
    self.incSegIdInfo = incSegIdInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.incSegVersionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.incSegIdInfo = IncSegIdInfo()
          self.incSegIdInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setIncSegIdInfo_args')
    if self.incSegVersionName is not None:
      oprot.writeFieldBegin('incSegVersionName', TType.STRING, 1)
      oprot.writeString(self.incSegVersionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incSegIdInfo is not None:
      oprot.writeFieldBegin('incSegIdInfo', TType.STRUCT, 11)
      self.incSegIdInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.incSegVersionName)
    value = (value * 31) ^ hash(self.incSegIdInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setIncSegIdInfo_result(object):
  """
  Attributes:
   - namedError
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, namedError=None,):
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setIncSegIdInfo_result')
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class linkIncSegToInc_args(object):
  """
  Attributes:
   - incSegVersionName
   - incVersionName
   - incSegId
   - incId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'incSegVersionName', None, None, ), # 1
    (2, TType.STRING, 'incVersionName', None, None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    (11, TType.STRING, 'incSegId', None, None, ), # 11
    (12, TType.STRING, 'incId', None, None, ), # 12
  )

  def __init__(self, incSegVersionName=None, incVersionName=None, incSegId=None, incId=None,):
    self.incSegVersionName = incSegVersionName
    self.incVersionName = incVersionName
    self.incSegId = incSegId
    self.incId = incId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.incSegVersionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.incVersionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.incSegId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.incId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('linkIncSegToInc_args')
    if self.incSegVersionName is not None:
      oprot.writeFieldBegin('incSegVersionName', TType.STRING, 1)
      oprot.writeString(self.incSegVersionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incVersionName is not None:
      oprot.writeFieldBegin('incVersionName', TType.STRING, 2)
      oprot.writeString(self.incVersionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incSegId is not None:
      oprot.writeFieldBegin('incSegId', TType.STRING, 11)
      oprot.writeString(self.incSegId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incId is not None:
      oprot.writeFieldBegin('incId', TType.STRING, 12)
      oprot.writeString(self.incId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.incSegVersionName)
    value = (value * 31) ^ hash(self.incVersionName)
    value = (value * 31) ^ hash(self.incSegId)
    value = (value * 31) ^ hash(self.incId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class linkIncSegToInc_result(object):
  """
  Attributes:
   - namedError
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, namedError=None,):
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('linkIncSegToInc_result')
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getIncIdInfo_args(object):
  """
  Attributes:
   - incVersionName
   - incId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'incVersionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    (11, TType.STRING, 'incId', None, None, ), # 11
  )

  def __init__(self, incVersionName=None, incId=None,):
    self.incVersionName = incVersionName
    self.incId = incId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.incVersionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.incId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getIncIdInfo_args')
    if self.incVersionName is not None:
      oprot.writeFieldBegin('incVersionName', TType.STRING, 1)
      oprot.writeString(self.incVersionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incId is not None:
      oprot.writeFieldBegin('incId', TType.STRING, 11)
      oprot.writeString(self.incId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.incVersionName)
    value = (value * 31) ^ hash(self.incId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getIncIdInfo_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (IncIdInfo, IncIdInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = IncIdInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getIncIdInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findSimilarIncIdInfo_args(object):
  """
  Attributes:
   - incVersionName
   - incName
   - incFirm
   - industryId
   - loc
   - workLoc
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'incVersionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    (11, TType.STRING, 'incName', None, None, ), # 11
    (12, TType.STRING, 'incFirm', None, None, ), # 12
    (13, TType.I16, 'industryId', None, None, ), # 13
    (14, TType.STRING, 'loc', None, None, ), # 14
    (15, TType.STRING, 'workLoc', None, None, ), # 15
  )

  def __init__(self, incVersionName=None, incName=None, incFirm=None, industryId=None, loc=None, workLoc=None,):
    self.incVersionName = incVersionName
    self.incName = incName
    self.incFirm = incFirm
    self.industryId = industryId
    self.loc = loc
    self.workLoc = workLoc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.incVersionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.incName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.incFirm = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I16:
          self.industryId = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.loc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.workLoc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findSimilarIncIdInfo_args')
    if self.incVersionName is not None:
      oprot.writeFieldBegin('incVersionName', TType.STRING, 1)
      oprot.writeString(self.incVersionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incName is not None:
      oprot.writeFieldBegin('incName', TType.STRING, 11)
      oprot.writeString(self.incName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incFirm is not None:
      oprot.writeFieldBegin('incFirm', TType.STRING, 12)
      oprot.writeString(self.incFirm.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.industryId is not None:
      oprot.writeFieldBegin('industryId', TType.I16, 13)
      oprot.writeI16(self.industryId)
      oprot.writeFieldEnd()
    if self.loc is not None:
      oprot.writeFieldBegin('loc', TType.STRING, 14)
      oprot.writeString(self.loc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.workLoc is not None:
      oprot.writeFieldBegin('workLoc', TType.STRING, 15)
      oprot.writeString(self.workLoc.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.incVersionName)
    value = (value * 31) ^ hash(self.incName)
    value = (value * 31) ^ hash(self.incFirm)
    value = (value * 31) ^ hash(self.industryId)
    value = (value * 31) ^ hash(self.loc)
    value = (value * 31) ^ hash(self.workLoc)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findSimilarIncIdInfo_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (IncIdInfo, IncIdInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = IncIdInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findSimilarIncIdInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setIncIdInfo_args(object):
  """
  Attributes:
   - incVersionName
   - incIdInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'incVersionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    (11, TType.STRUCT, 'incIdInfo', (IncIdInfo, IncIdInfo.thrift_spec), None, ), # 11
  )

  def __init__(self, incVersionName=None, incIdInfo=None,):
    self.incVersionName = incVersionName
    self.incIdInfo = incIdInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.incVersionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.incIdInfo = IncIdInfo()
          self.incIdInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setIncIdInfo_args')
    if self.incVersionName is not None:
      oprot.writeFieldBegin('incVersionName', TType.STRING, 1)
      oprot.writeString(self.incVersionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incIdInfo is not None:
      oprot.writeFieldBegin('incIdInfo', TType.STRUCT, 11)
      self.incIdInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.incVersionName)
    value = (value * 31) ^ hash(self.incIdInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setIncIdInfo_result(object):
  """
  Attributes:
   - namedError
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, namedError=None,):
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setIncIdInfo_result')
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryIncSegIdMap_args(object):
  """
  Attributes:
   - incSegVersionName
   - incVersionName
   - incSegIdList
   - destIncIdType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'incSegVersionName', None, None, ), # 1
    (2, TType.STRING, 'incVersionName', None, None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    (11, TType.LIST, 'incSegIdList', (TType.STRING,None), None, ), # 11
    (12, TType.I32, 'destIncIdType', None, None, ), # 12
  )

  def __init__(self, incSegVersionName=None, incVersionName=None, incSegIdList=None, destIncIdType=None,):
    self.incSegVersionName = incSegVersionName
    self.incVersionName = incVersionName
    self.incSegIdList = incSegIdList
    self.destIncIdType = destIncIdType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.incSegVersionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.incVersionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.incSegIdList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString().decode('utf-8')
            self.incSegIdList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.destIncIdType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryIncSegIdMap_args')
    if self.incSegVersionName is not None:
      oprot.writeFieldBegin('incSegVersionName', TType.STRING, 1)
      oprot.writeString(self.incSegVersionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incVersionName is not None:
      oprot.writeFieldBegin('incVersionName', TType.STRING, 2)
      oprot.writeString(self.incVersionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incSegIdList is not None:
      oprot.writeFieldBegin('incSegIdList', TType.LIST, 11)
      oprot.writeListBegin(TType.STRING, len(self.incSegIdList))
      for iter6 in self.incSegIdList:
        oprot.writeString(iter6.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.destIncIdType is not None:
      oprot.writeFieldBegin('destIncIdType', TType.I32, 12)
      oprot.writeI32(self.destIncIdType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.incSegVersionName)
    value = (value * 31) ^ hash(self.incVersionName)
    value = (value * 31) ^ hash(self.incSegIdList)
    value = (value * 31) ^ hash(self.destIncIdType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryIncSegIdMap_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin()
          for _i11 in xrange(_size7):
            _key12 = iprot.readString().decode('utf-8')
            _val13 = iprot.readString().decode('utf-8')
            self.success[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryIncSegIdMap_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter14,viter15 in self.success.items():
        oprot.writeString(kiter14.encode('utf-8'))
        oprot.writeString(viter15.encode('utf-8'))
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryIncIdMap_args(object):
  """
  Attributes:
   - incVersionName
   - incIdList
   - srcIncIdType
   - destIncIdType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'incVersionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    (11, TType.LIST, 'incIdList', (TType.STRING,None), None, ), # 11
    (12, TType.I32, 'srcIncIdType', None, None, ), # 12
    (13, TType.I32, 'destIncIdType', None, None, ), # 13
  )

  def __init__(self, incVersionName=None, incIdList=None, srcIncIdType=None, destIncIdType=None,):
    self.incVersionName = incVersionName
    self.incIdList = incIdList
    self.srcIncIdType = srcIncIdType
    self.destIncIdType = destIncIdType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.incVersionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.incIdList = []
          (_etype19, _size16) = iprot.readListBegin()
          for _i20 in xrange(_size16):
            _elem21 = iprot.readString().decode('utf-8')
            self.incIdList.append(_elem21)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.srcIncIdType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.destIncIdType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryIncIdMap_args')
    if self.incVersionName is not None:
      oprot.writeFieldBegin('incVersionName', TType.STRING, 1)
      oprot.writeString(self.incVersionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incIdList is not None:
      oprot.writeFieldBegin('incIdList', TType.LIST, 11)
      oprot.writeListBegin(TType.STRING, len(self.incIdList))
      for iter22 in self.incIdList:
        oprot.writeString(iter22.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.srcIncIdType is not None:
      oprot.writeFieldBegin('srcIncIdType', TType.I32, 12)
      oprot.writeI32(self.srcIncIdType)
      oprot.writeFieldEnd()
    if self.destIncIdType is not None:
      oprot.writeFieldBegin('destIncIdType', TType.I32, 13)
      oprot.writeI32(self.destIncIdType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.incVersionName)
    value = (value * 31) ^ hash(self.incIdList)
    value = (value * 31) ^ hash(self.srcIncIdType)
    value = (value * 31) ^ hash(self.destIncIdType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryIncIdMap_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.LIST,(TType.STRING,None)), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype24, _vtype25, _size23 ) = iprot.readMapBegin()
          for _i27 in xrange(_size23):
            _key28 = iprot.readString().decode('utf-8')
            _val29 = []
            (_etype33, _size30) = iprot.readListBegin()
            for _i34 in xrange(_size30):
              _elem35 = iprot.readString().decode('utf-8')
              _val29.append(_elem35)
            iprot.readListEnd()
            self.success[_key28] = _val29
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryIncIdMap_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.success))
      for kiter36,viter37 in self.success.items():
        oprot.writeString(kiter36.encode('utf-8'))
        oprot.writeListBegin(TType.STRING, len(viter37))
        for iter38 in viter37:
          oprot.writeString(iter38.encode('utf-8'))
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryIncSegIdList_args(object):
  """
  Attributes:
   - incSegVersionName
   - incVersionName
   - incId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'incSegVersionName', None, None, ), # 1
    (2, TType.STRING, 'incVersionName', None, None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    (11, TType.STRING, 'incId', None, None, ), # 11
  )

  def __init__(self, incSegVersionName=None, incVersionName=None, incId=None,):
    self.incSegVersionName = incSegVersionName
    self.incVersionName = incVersionName
    self.incId = incId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.incSegVersionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.incVersionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.incId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryIncSegIdList_args')
    if self.incSegVersionName is not None:
      oprot.writeFieldBegin('incSegVersionName', TType.STRING, 1)
      oprot.writeString(self.incSegVersionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incVersionName is not None:
      oprot.writeFieldBegin('incVersionName', TType.STRING, 2)
      oprot.writeString(self.incVersionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incId is not None:
      oprot.writeFieldBegin('incId', TType.STRING, 11)
      oprot.writeString(self.incId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.incSegVersionName)
    value = (value * 31) ^ hash(self.incVersionName)
    value = (value * 31) ^ hash(self.incId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryIncSegIdList_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype42, _size39) = iprot.readListBegin()
          for _i43 in xrange(_size39):
            _elem44 = iprot.readString().decode('utf-8')
            self.success.append(_elem44)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryIncSegIdList_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter45 in self.success:
        oprot.writeString(iter45.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
