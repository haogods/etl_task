# -*- coding:utf8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ipin.rpc.common.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class IncRankInfo(object):
  """
  Attributes:
   - salaryRank: 薪水正态分布值
   - salaryLocRank: 本地薪水正态分布值
   - jumpPeriodRank: 稳定性正态分布值
   - totalIndRank: 总排名正态分布值
   - totalIndRankPosition: 总排名排序值
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'salaryRank', None, None, ), # 1
    (2, TType.DOUBLE, 'salaryLocRank', None, None, ), # 2
    (3, TType.DOUBLE, 'jumpPeriodRank', None, None, ), # 3
    (4, TType.DOUBLE, 'totalIndRank', None, None, ), # 4
    (5, TType.DOUBLE, 'totalIndRankPosition', None, None, ), # 5
  )

  def __init__(self, salaryRank=None, salaryLocRank=None, jumpPeriodRank=None, totalIndRank=None, totalIndRankPosition=None,):
    self.salaryRank = salaryRank
    self.salaryLocRank = salaryLocRank
    self.jumpPeriodRank = jumpPeriodRank
    self.totalIndRank = totalIndRank
    self.totalIndRankPosition = totalIndRankPosition

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.salaryRank = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.salaryLocRank = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.jumpPeriodRank = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.totalIndRank = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.totalIndRankPosition = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IncRankInfo')
    if self.salaryRank is not None:
      oprot.writeFieldBegin('salaryRank', TType.DOUBLE, 1)
      oprot.writeDouble(self.salaryRank)
      oprot.writeFieldEnd()
    if self.salaryLocRank is not None:
      oprot.writeFieldBegin('salaryLocRank', TType.DOUBLE, 2)
      oprot.writeDouble(self.salaryLocRank)
      oprot.writeFieldEnd()
    if self.jumpPeriodRank is not None:
      oprot.writeFieldBegin('jumpPeriodRank', TType.DOUBLE, 3)
      oprot.writeDouble(self.jumpPeriodRank)
      oprot.writeFieldEnd()
    if self.totalIndRank is not None:
      oprot.writeFieldBegin('totalIndRank', TType.DOUBLE, 4)
      oprot.writeDouble(self.totalIndRank)
      oprot.writeFieldEnd()
    if self.totalIndRankPosition is not None:
      oprot.writeFieldBegin('totalIndRankPosition', TType.DOUBLE, 5)
      oprot.writeDouble(self.totalIndRankPosition)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.salaryRank)
    value = (value * 31) ^ hash(self.salaryLocRank)
    value = (value * 31) ^ hash(self.jumpPeriodRank)
    value = (value * 31) ^ hash(self.totalIndRank)
    value = (value * 31) ^ hash(self.totalIndRankPosition)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IncStats(object):
  """
  Attributes:
   - incId
   - rankInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'incId', None, None, ), # 1
    (2, TType.STRUCT, 'rankInfo', (IncRankInfo, IncRankInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, incId=None, rankInfo=None,):
    self.incId = incId
    self.rankInfo = rankInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.incId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.rankInfo = IncRankInfo()
          self.rankInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IncStats')
    if self.incId is not None:
      oprot.writeFieldBegin('incId', TType.STRING, 1)
      oprot.writeString(self.incId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.rankInfo is not None:
      oprot.writeFieldBegin('rankInfo', TType.STRUCT, 2)
      self.rankInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.incId)
    value = (value * 31) ^ hash(self.rankInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IncStatsFlag(object):
  """
  Attributes:
   - rankInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'rankInfo', None, True, ), # 1
  )

  def __init__(self, rankInfo=thrift_spec[1][4],):
    self.rankInfo = rankInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.rankInfo = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IncStatsFlag')
    if self.rankInfo is not None:
      oprot.writeFieldBegin('rankInfo', TType.BOOL, 1)
      oprot.writeBool(self.rankInfo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.rankInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
