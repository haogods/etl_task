# -*- coding:utf8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ipin.rpc.common.ttypes
import ipin.rpc.edu.commontype.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class EduDuikouMajorSecondCateItem(object):
  """
  Attributes:
   - majorSecondCate
   - duikouRatio
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'majorSecondCate', None, None, ), # 1
    (2, TType.DOUBLE, 'duikouRatio', None, None, ), # 2
  )

  def __init__(self, majorSecondCate=None, duikouRatio=None,):
    self.majorSecondCate = majorSecondCate
    self.duikouRatio = duikouRatio

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.majorSecondCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.duikouRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EduDuikouMajorSecondCateItem')
    if self.majorSecondCate is not None:
      oprot.writeFieldBegin('majorSecondCate', TType.STRING, 1)
      oprot.writeString(self.majorSecondCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.duikouRatio is not None:
      oprot.writeFieldBegin('duikouRatio', TType.DOUBLE, 2)
      oprot.writeDouble(self.duikouRatio)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.majorSecondCate)
    value = (value * 31) ^ hash(self.duikouRatio)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EduDuikouMajorItem(object):
  """
  Attributes:
   - majorId
   - duikouRatio
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'majorId', None, None, ), # 1
    (2, TType.DOUBLE, 'duikouRatio', None, None, ), # 2
  )

  def __init__(self, majorId=None, duikouRatio=None,):
    self.majorId = majorId
    self.duikouRatio = duikouRatio

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.majorId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.duikouRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EduDuikouMajorItem')
    if self.majorId is not None:
      oprot.writeFieldBegin('majorId', TType.STRING, 1)
      oprot.writeString(self.majorId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.duikouRatio is not None:
      oprot.writeFieldBegin('duikouRatio', TType.DOUBLE, 2)
      oprot.writeDouble(self.duikouRatio)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.majorId)
    value = (value * 31) ^ hash(self.duikouRatio)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EduJobSecondCateStat(object):
  """
  Attributes:
   - jobSecondCate
   - hot
   - majorSecondCateDuikouList
   - detailPositionList
   - diploma
   - majorDuikouList
   - graduateSalaryPerMonth
   - maleCount
   - femaleCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobSecondCate', None, None, ), # 1
    (2, TType.DOUBLE, 'hot', None, None, ), # 2
    (3, TType.LIST, 'majorSecondCateDuikouList', (TType.STRUCT,(EduDuikouMajorSecondCateItem, EduDuikouMajorSecondCateItem.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'detailPositionList', (TType.STRING,None), None, ), # 4
    (5, TType.I32, 'diploma', None, None, ), # 5
    (6, TType.LIST, 'majorDuikouList', (TType.STRUCT,(EduDuikouMajorItem, EduDuikouMajorItem.thrift_spec)), None, ), # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I32, 'graduateSalaryPerMonth', None, None, ), # 10
    (11, TType.I32, 'maleCount', None, None, ), # 11
    (12, TType.I32, 'femaleCount', None, None, ), # 12
  )

  def __init__(self, jobSecondCate=None, hot=None, majorSecondCateDuikouList=None, detailPositionList=None, diploma=None, majorDuikouList=None, graduateSalaryPerMonth=None, maleCount=None, femaleCount=None,):
    self.jobSecondCate = jobSecondCate
    self.hot = hot
    self.majorSecondCateDuikouList = majorSecondCateDuikouList
    self.detailPositionList = detailPositionList
    self.diploma = diploma
    self.majorDuikouList = majorDuikouList
    self.graduateSalaryPerMonth = graduateSalaryPerMonth
    self.maleCount = maleCount
    self.femaleCount = femaleCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobSecondCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.hot = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.majorSecondCateDuikouList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = EduDuikouMajorSecondCateItem()
            _elem5.read(iprot)
            self.majorSecondCateDuikouList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.detailPositionList = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString().decode('utf-8')
            self.detailPositionList.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.diploma = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.majorDuikouList = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = EduDuikouMajorItem()
            _elem17.read(iprot)
            self.majorDuikouList.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.graduateSalaryPerMonth = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.maleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.femaleCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EduJobSecondCateStat')
    if self.jobSecondCate is not None:
      oprot.writeFieldBegin('jobSecondCate', TType.STRING, 1)
      oprot.writeString(self.jobSecondCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.hot is not None:
      oprot.writeFieldBegin('hot', TType.DOUBLE, 2)
      oprot.writeDouble(self.hot)
      oprot.writeFieldEnd()
    if self.majorSecondCateDuikouList is not None:
      oprot.writeFieldBegin('majorSecondCateDuikouList', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.majorSecondCateDuikouList))
      for iter18 in self.majorSecondCateDuikouList:
        iter18.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.detailPositionList is not None:
      oprot.writeFieldBegin('detailPositionList', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.detailPositionList))
      for iter19 in self.detailPositionList:
        oprot.writeString(iter19.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.diploma is not None:
      oprot.writeFieldBegin('diploma', TType.I32, 5)
      oprot.writeI32(self.diploma)
      oprot.writeFieldEnd()
    if self.majorDuikouList is not None:
      oprot.writeFieldBegin('majorDuikouList', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.majorDuikouList))
      for iter20 in self.majorDuikouList:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.graduateSalaryPerMonth is not None:
      oprot.writeFieldBegin('graduateSalaryPerMonth', TType.I32, 10)
      oprot.writeI32(self.graduateSalaryPerMonth)
      oprot.writeFieldEnd()
    if self.maleCount is not None:
      oprot.writeFieldBegin('maleCount', TType.I32, 11)
      oprot.writeI32(self.maleCount)
      oprot.writeFieldEnd()
    if self.femaleCount is not None:
      oprot.writeFieldBegin('femaleCount', TType.I32, 12)
      oprot.writeI32(self.femaleCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobSecondCate)
    value = (value * 31) ^ hash(self.hot)
    value = (value * 31) ^ hash(self.majorSecondCateDuikouList)
    value = (value * 31) ^ hash(self.detailPositionList)
    value = (value * 31) ^ hash(self.diploma)
    value = (value * 31) ^ hash(self.majorDuikouList)
    value = (value * 31) ^ hash(self.graduateSalaryPerMonth)
    value = (value * 31) ^ hash(self.maleCount)
    value = (value * 31) ^ hash(self.femaleCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EduJobThirdCate(object):
  """
  Attributes:
   - jobThirdCate
   - jobSecondCate
   - jobCate
   - insertSeq
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobThirdCate', None, None, ), # 1
    (2, TType.STRING, 'jobSecondCate', None, None, ), # 2
    (3, TType.STRING, 'jobCate', None, None, ), # 3
    (4, TType.I16, 'insertSeq', None, None, ), # 4
  )

  def __init__(self, jobThirdCate=None, jobSecondCate=None, jobCate=None, insertSeq=None,):
    self.jobThirdCate = jobThirdCate
    self.jobSecondCate = jobSecondCate
    self.jobCate = jobCate
    self.insertSeq = insertSeq

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobThirdCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.jobSecondCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jobCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.insertSeq = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EduJobThirdCate')
    if self.jobThirdCate is not None:
      oprot.writeFieldBegin('jobThirdCate', TType.STRING, 1)
      oprot.writeString(self.jobThirdCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobSecondCate is not None:
      oprot.writeFieldBegin('jobSecondCate', TType.STRING, 2)
      oprot.writeString(self.jobSecondCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobCate is not None:
      oprot.writeFieldBegin('jobCate', TType.STRING, 3)
      oprot.writeString(self.jobCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.insertSeq is not None:
      oprot.writeFieldBegin('insertSeq', TType.I16, 4)
      oprot.writeI16(self.insertSeq)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobThirdCate)
    value = (value * 31) ^ hash(self.jobSecondCate)
    value = (value * 31) ^ hash(self.jobCate)
    value = (value * 31) ^ hash(self.insertSeq)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EduJobSecondCateDestItem(object):
  """
  Attributes:
   - jobSecondCate
   - destRatio
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobSecondCate', None, None, ), # 1
    (2, TType.DOUBLE, 'destRatio', None, None, ), # 2
  )

  def __init__(self, jobSecondCate=None, destRatio=None,):
    self.jobSecondCate = jobSecondCate
    self.destRatio = destRatio

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobSecondCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.destRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EduJobSecondCateDestItem')
    if self.jobSecondCate is not None:
      oprot.writeFieldBegin('jobSecondCate', TType.STRING, 1)
      oprot.writeString(self.jobSecondCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.destRatio is not None:
      oprot.writeFieldBegin('destRatio', TType.DOUBLE, 2)
      oprot.writeDouble(self.destRatio)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobSecondCate)
    value = (value * 31) ^ hash(self.destRatio)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EduMajorSecondCateExtraStat(object):
  """
  Attributes:
   - majorSecondCate
   - destList
   - duikouRatio
   - diploma
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'majorSecondCate', None, None, ), # 1
    (2, TType.LIST, 'destList', (TType.STRUCT,(EduJobSecondCateDestItem, EduJobSecondCateDestItem.thrift_spec)), None, ), # 2
    (3, TType.DOUBLE, 'duikouRatio', None, None, ), # 3
    (4, TType.I32, 'diploma', None, None, ), # 4
  )

  def __init__(self, majorSecondCate=None, destList=None, duikouRatio=None, diploma=None,):
    self.majorSecondCate = majorSecondCate
    self.destList = destList
    self.duikouRatio = duikouRatio
    self.diploma = diploma

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.majorSecondCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.destList = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = EduJobSecondCateDestItem()
            _elem26.read(iprot)
            self.destList.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.duikouRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.diploma = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EduMajorSecondCateExtraStat')
    if self.majorSecondCate is not None:
      oprot.writeFieldBegin('majorSecondCate', TType.STRING, 1)
      oprot.writeString(self.majorSecondCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.destList is not None:
      oprot.writeFieldBegin('destList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.destList))
      for iter27 in self.destList:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.duikouRatio is not None:
      oprot.writeFieldBegin('duikouRatio', TType.DOUBLE, 3)
      oprot.writeDouble(self.duikouRatio)
      oprot.writeFieldEnd()
    if self.diploma is not None:
      oprot.writeFieldBegin('diploma', TType.I32, 4)
      oprot.writeI32(self.diploma)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.majorSecondCate)
    value = (value * 31) ^ hash(self.destList)
    value = (value * 31) ^ hash(self.duikouRatio)
    value = (value * 31) ^ hash(self.diploma)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EduMajorExtraStat(object):
  """
  Attributes:
   - majorId
   - destList
   - duikouRatio
   - diploma
   - abroadLevel
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'majorId', None, None, ), # 1
    (2, TType.LIST, 'destList', (TType.STRUCT,(EduJobSecondCateDestItem, EduJobSecondCateDestItem.thrift_spec)), None, ), # 2
    (3, TType.DOUBLE, 'duikouRatio', None, None, ), # 3
    (4, TType.I32, 'diploma', None, None, ), # 4
    (5, TType.STRING, 'abroadLevel', None, None, ), # 5
  )

  def __init__(self, majorId=None, destList=None, duikouRatio=None, diploma=None, abroadLevel=None,):
    self.majorId = majorId
    self.destList = destList
    self.duikouRatio = duikouRatio
    self.diploma = diploma
    self.abroadLevel = abroadLevel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.majorId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.destList = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = EduJobSecondCateDestItem()
            _elem33.read(iprot)
            self.destList.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.duikouRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.diploma = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.abroadLevel = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EduMajorExtraStat')
    if self.majorId is not None:
      oprot.writeFieldBegin('majorId', TType.STRING, 1)
      oprot.writeString(self.majorId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.destList is not None:
      oprot.writeFieldBegin('destList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.destList))
      for iter34 in self.destList:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.duikouRatio is not None:
      oprot.writeFieldBegin('duikouRatio', TType.DOUBLE, 3)
      oprot.writeDouble(self.duikouRatio)
      oprot.writeFieldEnd()
    if self.diploma is not None:
      oprot.writeFieldBegin('diploma', TType.I32, 4)
      oprot.writeI32(self.diploma)
      oprot.writeFieldEnd()
    if self.abroadLevel is not None:
      oprot.writeFieldBegin('abroadLevel', TType.STRING, 5)
      oprot.writeString(self.abroadLevel.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.majorId)
    value = (value * 31) ^ hash(self.destList)
    value = (value * 31) ^ hash(self.duikouRatio)
    value = (value * 31) ^ hash(self.diploma)
    value = (value * 31) ^ hash(self.abroadLevel)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EduSchExtraStat(object):
  """
  Attributes:
   - schId
   - abroadRatio
   - scaleRatio
   - diploma
   - toMasterRatio
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'schId', None, None, ), # 1
    (2, TType.DOUBLE, 'abroadRatio', None, None, ), # 2
    (3, TType.DOUBLE, 'scaleRatio', None, None, ), # 3
    (4, TType.I32, 'diploma', None, None, ), # 4
    (5, TType.DOUBLE, 'toMasterRatio', None, None, ), # 5
  )

  def __init__(self, schId=None, abroadRatio=None, scaleRatio=None, diploma=None, toMasterRatio=None,):
    self.schId = schId
    self.abroadRatio = abroadRatio
    self.scaleRatio = scaleRatio
    self.diploma = diploma
    self.toMasterRatio = toMasterRatio

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.abroadRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.scaleRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.diploma = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.toMasterRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EduSchExtraStat')
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 1)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.abroadRatio is not None:
      oprot.writeFieldBegin('abroadRatio', TType.DOUBLE, 2)
      oprot.writeDouble(self.abroadRatio)
      oprot.writeFieldEnd()
    if self.scaleRatio is not None:
      oprot.writeFieldBegin('scaleRatio', TType.DOUBLE, 3)
      oprot.writeDouble(self.scaleRatio)
      oprot.writeFieldEnd()
    if self.diploma is not None:
      oprot.writeFieldBegin('diploma', TType.I32, 4)
      oprot.writeI32(self.diploma)
      oprot.writeFieldEnd()
    if self.toMasterRatio is not None:
      oprot.writeFieldBegin('toMasterRatio', TType.DOUBLE, 5)
      oprot.writeDouble(self.toMasterRatio)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.abroadRatio)
    value = (value * 31) ^ hash(self.scaleRatio)
    value = (value * 31) ^ hash(self.diploma)
    value = (value * 31) ^ hash(self.toMasterRatio)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
