# -*- coding:utf8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(object):
  def setSchEnrollPlan(self, versionName, plan):
    """
    设置招生计划

    Parameters:
     - versionName
     - plan
    """
    pass

  def getSchEnrollPlan(self, versionName, schId, year, diploma, wenliType, fromProvinceId):
    """
    获取招生计划

    Parameters:
     - versionName
     - schId
     - year
     - diploma
     - wenliType
     - fromProvinceId
    """
    pass

  def listSchEnrollPlan(self, versionName, schId, year):
    """
    列出招生计划

    Parameters:
     - versionName
     - schId
     - year
    """
    pass

  def listProvinceEnrollPlan(self, versionName, year, diploma, wenliType, fromProvinceId):
    """
    列出一个省份所有学校的招生计划

    Parameters:
     - versionName
     - year
     - diploma
     - wenliType
     - fromProvinceId
    """
    pass

  def setSchEnrollInfo(self, versionName, schEnrollInfo):
    """
    设置学校录取信息

    Parameters:
     - versionName
     - schEnrollInfo
    """
    pass

  def getSchEnrollInfo(self, versionName, schId, year, diploma, wenliType, batch, fromProvinceId):
    """
    获取学校录取信息

    Parameters:
     - versionName
     - schId
     - year
     - diploma
     - wenliType
     - batch
     - fromProvinceId
    """
    pass

  def listSchEnrollInfo(self, versionName, schId, year):
    """
    列出学校录取信息

    Parameters:
     - versionName
     - schId
     - year
    """
    pass

  def setMajorEnrollInfo(self, versionName, majorEnrollInfo):
    """
    设置专业录取信息

    Parameters:
     - versionName
     - majorEnrollInfo
    """
    pass

  def getMajorEnrollInfo(self, versionName, diploma, majorSecondCate, majorId, year):
    """
    获取专业录取信息

    Parameters:
     - versionName
     - diploma
     - majorSecondCate
     - majorId
     - year
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def setSchEnrollPlan(self, versionName, plan):
    """
    设置招生计划

    Parameters:
     - versionName
     - plan
    """
    self.send_setSchEnrollPlan(versionName, plan)
    self.recv_setSchEnrollPlan()

  def send_setSchEnrollPlan(self, versionName, plan):
    self._oprot.writeMessageBegin('setSchEnrollPlan', TMessageType.CALL, self._seqid)
    args = setSchEnrollPlan_args()
    args.versionName = versionName
    args.plan = plan
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setSchEnrollPlan(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = setSchEnrollPlan_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.namedError is not None:
      raise result.namedError
    return

  def getSchEnrollPlan(self, versionName, schId, year, diploma, wenliType, fromProvinceId):
    """
    获取招生计划

    Parameters:
     - versionName
     - schId
     - year
     - diploma
     - wenliType
     - fromProvinceId
    """
    self.send_getSchEnrollPlan(versionName, schId, year, diploma, wenliType, fromProvinceId)
    return self.recv_getSchEnrollPlan()

  def send_getSchEnrollPlan(self, versionName, schId, year, diploma, wenliType, fromProvinceId):
    self._oprot.writeMessageBegin('getSchEnrollPlan', TMessageType.CALL, self._seqid)
    args = getSchEnrollPlan_args()
    args.versionName = versionName
    args.schId = schId
    args.year = year
    args.diploma = diploma
    args.wenliType = wenliType
    args.fromProvinceId = fromProvinceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSchEnrollPlan(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getSchEnrollPlan_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSchEnrollPlan failed: unknown result");

  def listSchEnrollPlan(self, versionName, schId, year):
    """
    列出招生计划

    Parameters:
     - versionName
     - schId
     - year
    """
    self.send_listSchEnrollPlan(versionName, schId, year)
    return self.recv_listSchEnrollPlan()

  def send_listSchEnrollPlan(self, versionName, schId, year):
    self._oprot.writeMessageBegin('listSchEnrollPlan', TMessageType.CALL, self._seqid)
    args = listSchEnrollPlan_args()
    args.versionName = versionName
    args.schId = schId
    args.year = year
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_listSchEnrollPlan(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = listSchEnrollPlan_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "listSchEnrollPlan failed: unknown result");

  def listProvinceEnrollPlan(self, versionName, year, diploma, wenliType, fromProvinceId):
    """
    列出一个省份所有学校的招生计划

    Parameters:
     - versionName
     - year
     - diploma
     - wenliType
     - fromProvinceId
    """
    self.send_listProvinceEnrollPlan(versionName, year, diploma, wenliType, fromProvinceId)
    return self.recv_listProvinceEnrollPlan()

  def send_listProvinceEnrollPlan(self, versionName, year, diploma, wenliType, fromProvinceId):
    self._oprot.writeMessageBegin('listProvinceEnrollPlan', TMessageType.CALL, self._seqid)
    args = listProvinceEnrollPlan_args()
    args.versionName = versionName
    args.year = year
    args.diploma = diploma
    args.wenliType = wenliType
    args.fromProvinceId = fromProvinceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_listProvinceEnrollPlan(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = listProvinceEnrollPlan_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "listProvinceEnrollPlan failed: unknown result");

  def setSchEnrollInfo(self, versionName, schEnrollInfo):
    """
    设置学校录取信息

    Parameters:
     - versionName
     - schEnrollInfo
    """
    self.send_setSchEnrollInfo(versionName, schEnrollInfo)
    self.recv_setSchEnrollInfo()

  def send_setSchEnrollInfo(self, versionName, schEnrollInfo):
    self._oprot.writeMessageBegin('setSchEnrollInfo', TMessageType.CALL, self._seqid)
    args = setSchEnrollInfo_args()
    args.versionName = versionName
    args.schEnrollInfo = schEnrollInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setSchEnrollInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = setSchEnrollInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.namedError is not None:
      raise result.namedError
    return

  def getSchEnrollInfo(self, versionName, schId, year, diploma, wenliType, batch, fromProvinceId):
    """
    获取学校录取信息

    Parameters:
     - versionName
     - schId
     - year
     - diploma
     - wenliType
     - batch
     - fromProvinceId
    """
    self.send_getSchEnrollInfo(versionName, schId, year, diploma, wenliType, batch, fromProvinceId)
    return self.recv_getSchEnrollInfo()

  def send_getSchEnrollInfo(self, versionName, schId, year, diploma, wenliType, batch, fromProvinceId):
    self._oprot.writeMessageBegin('getSchEnrollInfo', TMessageType.CALL, self._seqid)
    args = getSchEnrollInfo_args()
    args.versionName = versionName
    args.schId = schId
    args.year = year
    args.diploma = diploma
    args.wenliType = wenliType
    args.batch = batch
    args.fromProvinceId = fromProvinceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSchEnrollInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getSchEnrollInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSchEnrollInfo failed: unknown result");

  def listSchEnrollInfo(self, versionName, schId, year):
    """
    列出学校录取信息

    Parameters:
     - versionName
     - schId
     - year
    """
    self.send_listSchEnrollInfo(versionName, schId, year)
    return self.recv_listSchEnrollInfo()

  def send_listSchEnrollInfo(self, versionName, schId, year):
    self._oprot.writeMessageBegin('listSchEnrollInfo', TMessageType.CALL, self._seqid)
    args = listSchEnrollInfo_args()
    args.versionName = versionName
    args.schId = schId
    args.year = year
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_listSchEnrollInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = listSchEnrollInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "listSchEnrollInfo failed: unknown result");

  def setMajorEnrollInfo(self, versionName, majorEnrollInfo):
    """
    设置专业录取信息

    Parameters:
     - versionName
     - majorEnrollInfo
    """
    self.send_setMajorEnrollInfo(versionName, majorEnrollInfo)
    self.recv_setMajorEnrollInfo()

  def send_setMajorEnrollInfo(self, versionName, majorEnrollInfo):
    self._oprot.writeMessageBegin('setMajorEnrollInfo', TMessageType.CALL, self._seqid)
    args = setMajorEnrollInfo_args()
    args.versionName = versionName
    args.majorEnrollInfo = majorEnrollInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setMajorEnrollInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = setMajorEnrollInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.namedError is not None:
      raise result.namedError
    return

  def getMajorEnrollInfo(self, versionName, diploma, majorSecondCate, majorId, year):
    """
    获取专业录取信息

    Parameters:
     - versionName
     - diploma
     - majorSecondCate
     - majorId
     - year
    """
    self.send_getMajorEnrollInfo(versionName, diploma, majorSecondCate, majorId, year)
    return self.recv_getMajorEnrollInfo()

  def send_getMajorEnrollInfo(self, versionName, diploma, majorSecondCate, majorId, year):
    self._oprot.writeMessageBegin('getMajorEnrollInfo', TMessageType.CALL, self._seqid)
    args = getMajorEnrollInfo_args()
    args.versionName = versionName
    args.diploma = diploma
    args.majorSecondCate = majorSecondCate
    args.majorId = majorId
    args.year = year
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getMajorEnrollInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getMajorEnrollInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getMajorEnrollInfo failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["setSchEnrollPlan"] = Processor.process_setSchEnrollPlan
    self._processMap["getSchEnrollPlan"] = Processor.process_getSchEnrollPlan
    self._processMap["listSchEnrollPlan"] = Processor.process_listSchEnrollPlan
    self._processMap["listProvinceEnrollPlan"] = Processor.process_listProvinceEnrollPlan
    self._processMap["setSchEnrollInfo"] = Processor.process_setSchEnrollInfo
    self._processMap["getSchEnrollInfo"] = Processor.process_getSchEnrollInfo
    self._processMap["listSchEnrollInfo"] = Processor.process_listSchEnrollInfo
    self._processMap["setMajorEnrollInfo"] = Processor.process_setMajorEnrollInfo
    self._processMap["getMajorEnrollInfo"] = Processor.process_getMajorEnrollInfo

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_setSchEnrollPlan(self, seqid, iprot, oprot):
    args = setSchEnrollPlan_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setSchEnrollPlan_result()
    try:
      self._handler.setSchEnrollPlan(args.versionName, args.plan)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("setSchEnrollPlan", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSchEnrollPlan(self, seqid, iprot, oprot):
    args = getSchEnrollPlan_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSchEnrollPlan_result()
    try:
      result.success = self._handler.getSchEnrollPlan(args.versionName, args.schId, args.year, args.diploma, args.wenliType, args.fromProvinceId)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("getSchEnrollPlan", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_listSchEnrollPlan(self, seqid, iprot, oprot):
    args = listSchEnrollPlan_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = listSchEnrollPlan_result()
    try:
      result.success = self._handler.listSchEnrollPlan(args.versionName, args.schId, args.year)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("listSchEnrollPlan", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_listProvinceEnrollPlan(self, seqid, iprot, oprot):
    args = listProvinceEnrollPlan_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = listProvinceEnrollPlan_result()
    try:
      result.success = self._handler.listProvinceEnrollPlan(args.versionName, args.year, args.diploma, args.wenliType, args.fromProvinceId)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("listProvinceEnrollPlan", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setSchEnrollInfo(self, seqid, iprot, oprot):
    args = setSchEnrollInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setSchEnrollInfo_result()
    try:
      self._handler.setSchEnrollInfo(args.versionName, args.schEnrollInfo)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("setSchEnrollInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSchEnrollInfo(self, seqid, iprot, oprot):
    args = getSchEnrollInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSchEnrollInfo_result()
    try:
      result.success = self._handler.getSchEnrollInfo(args.versionName, args.schId, args.year, args.diploma, args.wenliType, args.batch, args.fromProvinceId)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("getSchEnrollInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_listSchEnrollInfo(self, seqid, iprot, oprot):
    args = listSchEnrollInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = listSchEnrollInfo_result()
    try:
      result.success = self._handler.listSchEnrollInfo(args.versionName, args.schId, args.year)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("listSchEnrollInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setMajorEnrollInfo(self, seqid, iprot, oprot):
    args = setMajorEnrollInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setMajorEnrollInfo_result()
    try:
      self._handler.setMajorEnrollInfo(args.versionName, args.majorEnrollInfo)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("setMajorEnrollInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getMajorEnrollInfo(self, seqid, iprot, oprot):
    args = getMajorEnrollInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getMajorEnrollInfo_result()
    try:
      result.success = self._handler.getMajorEnrollInfo(args.versionName, args.diploma, args.majorSecondCate, args.majorId, args.year)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("getMajorEnrollInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class setSchEnrollPlan_args(object):
  """
  Attributes:
   - versionName
   - plan
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'plan', (SchEnrollPlan, SchEnrollPlan.thrift_spec), None, ), # 10
  )

  def __init__(self, versionName=None, plan=None,):
    self.versionName = versionName
    self.plan = plan

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.plan = SchEnrollPlan()
          self.plan.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setSchEnrollPlan_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.plan is not None:
      oprot.writeFieldBegin('plan', TType.STRUCT, 10)
      self.plan.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.plan)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setSchEnrollPlan_result(object):
  """
  Attributes:
   - namedError
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, namedError=None,):
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setSchEnrollPlan_result')
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSchEnrollPlan_args(object):
  """
  Attributes:
   - versionName
   - schId
   - year
   - diploma
   - wenliType
   - fromProvinceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'schId', None, None, ), # 10
    (11, TType.I16, 'year', None, None, ), # 11
    (12, TType.I32, 'diploma', None, None, ), # 12
    (13, TType.I32, 'wenliType', None, None, ), # 13
    (14, TType.STRING, 'fromProvinceId', None, None, ), # 14
  )

  def __init__(self, versionName=None, schId=None, year=None, diploma=None, wenliType=None, fromProvinceId=None,):
    self.versionName = versionName
    self.schId = schId
    self.year = year
    self.diploma = diploma
    self.wenliType = wenliType
    self.fromProvinceId = fromProvinceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.year = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.diploma = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.wenliType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.fromProvinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSchEnrollPlan_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 10)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.I16, 11)
      oprot.writeI16(self.year)
      oprot.writeFieldEnd()
    if self.diploma is not None:
      oprot.writeFieldBegin('diploma', TType.I32, 12)
      oprot.writeI32(self.diploma)
      oprot.writeFieldEnd()
    if self.wenliType is not None:
      oprot.writeFieldBegin('wenliType', TType.I32, 13)
      oprot.writeI32(self.wenliType)
      oprot.writeFieldEnd()
    if self.fromProvinceId is not None:
      oprot.writeFieldBegin('fromProvinceId', TType.STRING, 14)
      oprot.writeString(self.fromProvinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.year)
    value = (value * 31) ^ hash(self.diploma)
    value = (value * 31) ^ hash(self.wenliType)
    value = (value * 31) ^ hash(self.fromProvinceId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSchEnrollPlan_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (SchEnrollPlan, SchEnrollPlan.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = SchEnrollPlan()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSchEnrollPlan_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listSchEnrollPlan_args(object):
  """
  Attributes:
   - versionName
   - schId
   - year
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'schId', None, None, ), # 10
    (11, TType.I16, 'year', None, None, ), # 11
  )

  def __init__(self, versionName=None, schId=None, year=None,):
    self.versionName = versionName
    self.schId = schId
    self.year = year

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.year = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listSchEnrollPlan_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 10)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.I16, 11)
      oprot.writeI16(self.year)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.year)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listSchEnrollPlan_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(SchEnrollPlan, SchEnrollPlan.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = SchEnrollPlan()
            _elem33.read(iprot)
            self.success.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listSchEnrollPlan_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter34 in self.success:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listProvinceEnrollPlan_args(object):
  """
  Attributes:
   - versionName
   - year
   - diploma
   - wenliType
   - fromProvinceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I16, 'year', None, None, ), # 10
    (11, TType.I32, 'diploma', None, None, ), # 11
    (12, TType.I32, 'wenliType', None, None, ), # 12
    (13, TType.STRING, 'fromProvinceId', None, None, ), # 13
  )

  def __init__(self, versionName=None, year=None, diploma=None, wenliType=None, fromProvinceId=None,):
    self.versionName = versionName
    self.year = year
    self.diploma = diploma
    self.wenliType = wenliType
    self.fromProvinceId = fromProvinceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I16:
          self.year = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.diploma = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.wenliType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.fromProvinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listProvinceEnrollPlan_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.I16, 10)
      oprot.writeI16(self.year)
      oprot.writeFieldEnd()
    if self.diploma is not None:
      oprot.writeFieldBegin('diploma', TType.I32, 11)
      oprot.writeI32(self.diploma)
      oprot.writeFieldEnd()
    if self.wenliType is not None:
      oprot.writeFieldBegin('wenliType', TType.I32, 12)
      oprot.writeI32(self.wenliType)
      oprot.writeFieldEnd()
    if self.fromProvinceId is not None:
      oprot.writeFieldBegin('fromProvinceId', TType.STRING, 13)
      oprot.writeString(self.fromProvinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.year)
    value = (value * 31) ^ hash(self.diploma)
    value = (value * 31) ^ hash(self.wenliType)
    value = (value * 31) ^ hash(self.fromProvinceId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listProvinceEnrollPlan_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(SchEnrollPlan, SchEnrollPlan.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = SchEnrollPlan()
            _elem40.read(iprot)
            self.success.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listProvinceEnrollPlan_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter41 in self.success:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setSchEnrollInfo_args(object):
  """
  Attributes:
   - versionName
   - schEnrollInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'schEnrollInfo', (SchEnrollInfo, SchEnrollInfo.thrift_spec), None, ), # 10
  )

  def __init__(self, versionName=None, schEnrollInfo=None,):
    self.versionName = versionName
    self.schEnrollInfo = schEnrollInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.schEnrollInfo = SchEnrollInfo()
          self.schEnrollInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setSchEnrollInfo_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schEnrollInfo is not None:
      oprot.writeFieldBegin('schEnrollInfo', TType.STRUCT, 10)
      self.schEnrollInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.schEnrollInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setSchEnrollInfo_result(object):
  """
  Attributes:
   - namedError
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, namedError=None,):
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setSchEnrollInfo_result')
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSchEnrollInfo_args(object):
  """
  Attributes:
   - versionName
   - schId
   - year
   - diploma
   - wenliType
   - batch
   - fromProvinceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'schId', None, None, ), # 10
    (11, TType.I16, 'year', None, None, ), # 11
    (12, TType.I32, 'diploma', None, None, ), # 12
    (13, TType.I32, 'wenliType', None, None, ), # 13
    (14, TType.I32, 'batch', None, None, ), # 14
    (15, TType.STRING, 'fromProvinceId', None, None, ), # 15
  )

  def __init__(self, versionName=None, schId=None, year=None, diploma=None, wenliType=None, batch=None, fromProvinceId=None,):
    self.versionName = versionName
    self.schId = schId
    self.year = year
    self.diploma = diploma
    self.wenliType = wenliType
    self.batch = batch
    self.fromProvinceId = fromProvinceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.year = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.diploma = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.wenliType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.batch = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.fromProvinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSchEnrollInfo_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 10)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.I16, 11)
      oprot.writeI16(self.year)
      oprot.writeFieldEnd()
    if self.diploma is not None:
      oprot.writeFieldBegin('diploma', TType.I32, 12)
      oprot.writeI32(self.diploma)
      oprot.writeFieldEnd()
    if self.wenliType is not None:
      oprot.writeFieldBegin('wenliType', TType.I32, 13)
      oprot.writeI32(self.wenliType)
      oprot.writeFieldEnd()
    if self.batch is not None:
      oprot.writeFieldBegin('batch', TType.I32, 14)
      oprot.writeI32(self.batch)
      oprot.writeFieldEnd()
    if self.fromProvinceId is not None:
      oprot.writeFieldBegin('fromProvinceId', TType.STRING, 15)
      oprot.writeString(self.fromProvinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.year)
    value = (value * 31) ^ hash(self.diploma)
    value = (value * 31) ^ hash(self.wenliType)
    value = (value * 31) ^ hash(self.batch)
    value = (value * 31) ^ hash(self.fromProvinceId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSchEnrollInfo_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (SchEnrollInfo, SchEnrollInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = SchEnrollInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSchEnrollInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listSchEnrollInfo_args(object):
  """
  Attributes:
   - versionName
   - schId
   - year
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'schId', None, None, ), # 10
    (11, TType.I16, 'year', None, None, ), # 11
  )

  def __init__(self, versionName=None, schId=None, year=None,):
    self.versionName = versionName
    self.schId = schId
    self.year = year

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.year = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listSchEnrollInfo_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 10)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.I16, 11)
      oprot.writeI16(self.year)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.year)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listSchEnrollInfo_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(SchEnrollInfo, SchEnrollInfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = SchEnrollInfo()
            _elem47.read(iprot)
            self.success.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listSchEnrollInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter48 in self.success:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setMajorEnrollInfo_args(object):
  """
  Attributes:
   - versionName
   - majorEnrollInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'majorEnrollInfo', (MajorEnrollInfo, MajorEnrollInfo.thrift_spec), None, ), # 10
  )

  def __init__(self, versionName=None, majorEnrollInfo=None,):
    self.versionName = versionName
    self.majorEnrollInfo = majorEnrollInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.majorEnrollInfo = MajorEnrollInfo()
          self.majorEnrollInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setMajorEnrollInfo_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorEnrollInfo is not None:
      oprot.writeFieldBegin('majorEnrollInfo', TType.STRUCT, 10)
      self.majorEnrollInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.majorEnrollInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setMajorEnrollInfo_result(object):
  """
  Attributes:
   - namedError
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, namedError=None,):
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setMajorEnrollInfo_result')
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getMajorEnrollInfo_args(object):
  """
  Attributes:
   - versionName
   - diploma
   - majorSecondCate
   - majorId
   - year
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'versionName', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I32, 'diploma', None, None, ), # 10
    (11, TType.STRING, 'majorSecondCate', None, None, ), # 11
    (12, TType.STRING, 'majorId', None, None, ), # 12
    (13, TType.I16, 'year', None, None, ), # 13
  )

  def __init__(self, versionName=None, diploma=None, majorSecondCate=None, majorId=None, year=None,):
    self.versionName = versionName
    self.diploma = diploma
    self.majorSecondCate = majorSecondCate
    self.majorId = majorId
    self.year = year

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.versionName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.diploma = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.majorSecondCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.majorId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I16:
          self.year = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getMajorEnrollInfo_args')
    if self.versionName is not None:
      oprot.writeFieldBegin('versionName', TType.STRING, 1)
      oprot.writeString(self.versionName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.diploma is not None:
      oprot.writeFieldBegin('diploma', TType.I32, 10)
      oprot.writeI32(self.diploma)
      oprot.writeFieldEnd()
    if self.majorSecondCate is not None:
      oprot.writeFieldBegin('majorSecondCate', TType.STRING, 11)
      oprot.writeString(self.majorSecondCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorId is not None:
      oprot.writeFieldBegin('majorId', TType.STRING, 12)
      oprot.writeString(self.majorId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.I16, 13)
      oprot.writeI16(self.year)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.versionName)
    value = (value * 31) ^ hash(self.diploma)
    value = (value * 31) ^ hash(self.majorSecondCate)
    value = (value * 31) ^ hash(self.majorId)
    value = (value * 31) ^ hash(self.year)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getMajorEnrollInfo_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (MajorEnrollInfo, MajorEnrollInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = MajorEnrollInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getMajorEnrollInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
