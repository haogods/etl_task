# -*- coding:utf8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ipin.rpc.common.ttypes
import ipin.rpc.edu.commontype.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class SchEnrollMajorItem(object):
  """
  Attributes:
   - enrollMajorName
   - majorSecondCate
   - majorId
   - enrollCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'enrollMajorName', None, None, ), # 1
    (2, TType.STRING, 'majorSecondCate', None, None, ), # 2
    (3, TType.STRING, 'majorId', None, None, ), # 3
    (4, TType.I16, 'enrollCount', None, None, ), # 4
  )

  def __init__(self, enrollMajorName=None, majorSecondCate=None, majorId=None, enrollCount=None,):
    self.enrollMajorName = enrollMajorName
    self.majorSecondCate = majorSecondCate
    self.majorId = majorId
    self.enrollCount = enrollCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.enrollMajorName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.majorSecondCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.majorId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.enrollCount = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SchEnrollMajorItem')
    if self.enrollMajorName is not None:
      oprot.writeFieldBegin('enrollMajorName', TType.STRING, 1)
      oprot.writeString(self.enrollMajorName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorSecondCate is not None:
      oprot.writeFieldBegin('majorSecondCate', TType.STRING, 2)
      oprot.writeString(self.majorSecondCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorId is not None:
      oprot.writeFieldBegin('majorId', TType.STRING, 3)
      oprot.writeString(self.majorId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.enrollCount is not None:
      oprot.writeFieldBegin('enrollCount', TType.I16, 4)
      oprot.writeI16(self.enrollCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.enrollMajorName)
    value = (value * 31) ^ hash(self.majorSecondCate)
    value = (value * 31) ^ hash(self.majorId)
    value = (value * 31) ^ hash(self.enrollCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SchEnrollPlan(object):
  """
  Attributes:
   - schId
   - year
   - diploma
   - wenliType
   - fromProvinceId
   - majorList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'schId', None, None, ), # 1
    (2, TType.I16, 'year', None, None, ), # 2
    (3, TType.I32, 'diploma', None, None, ), # 3
    (4, TType.I32, 'wenliType', None, None, ), # 4
    (5, TType.STRING, 'fromProvinceId', None, None, ), # 5
    (6, TType.LIST, 'majorList', (TType.STRUCT,(SchEnrollMajorItem, SchEnrollMajorItem.thrift_spec)), None, ), # 6
  )

  def __init__(self, schId=None, year=None, diploma=None, wenliType=None, fromProvinceId=None, majorList=None,):
    self.schId = schId
    self.year = year
    self.diploma = diploma
    self.wenliType = wenliType
    self.fromProvinceId = fromProvinceId
    self.majorList = majorList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.year = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.diploma = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.wenliType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.fromProvinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.majorList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = SchEnrollMajorItem()
            _elem5.read(iprot)
            self.majorList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SchEnrollPlan')
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 1)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.I16, 2)
      oprot.writeI16(self.year)
      oprot.writeFieldEnd()
    if self.diploma is not None:
      oprot.writeFieldBegin('diploma', TType.I32, 3)
      oprot.writeI32(self.diploma)
      oprot.writeFieldEnd()
    if self.wenliType is not None:
      oprot.writeFieldBegin('wenliType', TType.I32, 4)
      oprot.writeI32(self.wenliType)
      oprot.writeFieldEnd()
    if self.fromProvinceId is not None:
      oprot.writeFieldBegin('fromProvinceId', TType.STRING, 5)
      oprot.writeString(self.fromProvinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorList is not None:
      oprot.writeFieldBegin('majorList', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.majorList))
      for iter6 in self.majorList:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.year)
    value = (value * 31) ^ hash(self.diploma)
    value = (value * 31) ^ hash(self.wenliType)
    value = (value * 31) ^ hash(self.fromProvinceId)
    value = (value * 31) ^ hash(self.majorList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SchEnrollInfo(object):
  """
  Attributes:
   - schId
   - year
   - diploma
   - wenliType
   - batch
   - fromProvinceId
   - majorSecondCateList
   - majorIdList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'schId', None, None, ), # 1
    (2, TType.I16, 'year', None, None, ), # 2
    (3, TType.I32, 'diploma', None, None, ), # 3
    (4, TType.I32, 'wenliType', None, None, ), # 4
    (5, TType.I32, 'batch', None, None, ), # 5
    (6, TType.STRING, 'fromProvinceId', None, None, ), # 6
    (7, TType.LIST, 'majorSecondCateList', (TType.STRING,None), None, ), # 7
    (8, TType.LIST, 'majorIdList', (TType.STRING,None), None, ), # 8
  )

  def __init__(self, schId=None, year=None, diploma=None, wenliType=None, batch=None, fromProvinceId=None, majorSecondCateList=None, majorIdList=None,):
    self.schId = schId
    self.year = year
    self.diploma = diploma
    self.wenliType = wenliType
    self.batch = batch
    self.fromProvinceId = fromProvinceId
    self.majorSecondCateList = majorSecondCateList
    self.majorIdList = majorIdList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.year = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.diploma = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.wenliType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.batch = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.fromProvinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.majorSecondCateList = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString().decode('utf-8')
            self.majorSecondCateList.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.majorIdList = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = iprot.readString().decode('utf-8')
            self.majorIdList.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SchEnrollInfo')
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 1)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.I16, 2)
      oprot.writeI16(self.year)
      oprot.writeFieldEnd()
    if self.diploma is not None:
      oprot.writeFieldBegin('diploma', TType.I32, 3)
      oprot.writeI32(self.diploma)
      oprot.writeFieldEnd()
    if self.wenliType is not None:
      oprot.writeFieldBegin('wenliType', TType.I32, 4)
      oprot.writeI32(self.wenliType)
      oprot.writeFieldEnd()
    if self.batch is not None:
      oprot.writeFieldBegin('batch', TType.I32, 5)
      oprot.writeI32(self.batch)
      oprot.writeFieldEnd()
    if self.fromProvinceId is not None:
      oprot.writeFieldBegin('fromProvinceId', TType.STRING, 6)
      oprot.writeString(self.fromProvinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorSecondCateList is not None:
      oprot.writeFieldBegin('majorSecondCateList', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.majorSecondCateList))
      for iter19 in self.majorSecondCateList:
        oprot.writeString(iter19.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.majorIdList is not None:
      oprot.writeFieldBegin('majorIdList', TType.LIST, 8)
      oprot.writeListBegin(TType.STRING, len(self.majorIdList))
      for iter20 in self.majorIdList:
        oprot.writeString(iter20.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.year)
    value = (value * 31) ^ hash(self.diploma)
    value = (value * 31) ^ hash(self.wenliType)
    value = (value * 31) ^ hash(self.batch)
    value = (value * 31) ^ hash(self.fromProvinceId)
    value = (value * 31) ^ hash(self.majorSecondCateList)
    value = (value * 31) ^ hash(self.majorIdList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MajorEnrollSchItem(object):
  """
  Attributes:
   - schId
   - batch
   - wenliType
   - fromProvinceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'schId', None, None, ), # 1
    (2, TType.I32, 'batch', None, None, ), # 2
    (3, TType.I32, 'wenliType', None, None, ), # 3
    (4, TType.STRING, 'fromProvinceId', None, None, ), # 4
  )

  def __init__(self, schId=None, batch=None, wenliType=None, fromProvinceId=None,):
    self.schId = schId
    self.batch = batch
    self.wenliType = wenliType
    self.fromProvinceId = fromProvinceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.batch = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.wenliType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.fromProvinceId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MajorEnrollSchItem')
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 1)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.batch is not None:
      oprot.writeFieldBegin('batch', TType.I32, 2)
      oprot.writeI32(self.batch)
      oprot.writeFieldEnd()
    if self.wenliType is not None:
      oprot.writeFieldBegin('wenliType', TType.I32, 3)
      oprot.writeI32(self.wenliType)
      oprot.writeFieldEnd()
    if self.fromProvinceId is not None:
      oprot.writeFieldBegin('fromProvinceId', TType.STRING, 4)
      oprot.writeString(self.fromProvinceId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.batch)
    value = (value * 31) ^ hash(self.wenliType)
    value = (value * 31) ^ hash(self.fromProvinceId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MajorEnrollInfo(object):
  """
  Attributes:
   - diploma
   - majorSecondCate
   - majorId
   - year
   - schList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'diploma', None, None, ), # 1
    (2, TType.STRING, 'majorSecondCate', None, None, ), # 2
    (3, TType.STRING, 'majorId', None, None, ), # 3
    (4, TType.I16, 'year', None, None, ), # 4
    (5, TType.LIST, 'schList', (TType.STRUCT,(MajorEnrollSchItem, MajorEnrollSchItem.thrift_spec)), None, ), # 5
  )

  def __init__(self, diploma=None, majorSecondCate=None, majorId=None, year=None, schList=None,):
    self.diploma = diploma
    self.majorSecondCate = majorSecondCate
    self.majorId = majorId
    self.year = year
    self.schList = schList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.diploma = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.majorSecondCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.majorId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.year = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.schList = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = MajorEnrollSchItem()
            _elem26.read(iprot)
            self.schList.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MajorEnrollInfo')
    if self.diploma is not None:
      oprot.writeFieldBegin('diploma', TType.I32, 1)
      oprot.writeI32(self.diploma)
      oprot.writeFieldEnd()
    if self.majorSecondCate is not None:
      oprot.writeFieldBegin('majorSecondCate', TType.STRING, 2)
      oprot.writeString(self.majorSecondCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorId is not None:
      oprot.writeFieldBegin('majorId', TType.STRING, 3)
      oprot.writeString(self.majorId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.I16, 4)
      oprot.writeI16(self.year)
      oprot.writeFieldEnd()
    if self.schList is not None:
      oprot.writeFieldBegin('schList', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.schList))
      for iter27 in self.schList:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.diploma)
    value = (value * 31) ^ hash(self.majorSecondCate)
    value = (value * 31) ^ hash(self.majorId)
    value = (value * 31) ^ hash(self.year)
    value = (value * 31) ^ hash(self.schList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
